% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/all_generic.R, R/sampling_frame.R
\name{samples}
\alias{samples}
\alias{samples.sampling_frame}
\title{Extract sampling times}
\usage{
samples(x, ...)

\method{samples}{sampling_frame}(x, blockids = NULL, global = FALSE, ...)
}
\arguments{
\item{x}{The object containing timing information (typically a sampling_frame or regressor)}

\item{...}{Additional arguments passed to methods. Common arguments include:
\describe{
\item{blockids}{Numeric vector specifying which blocks/runs to include}
\item{global}{Logical; if TRUE, return cumulative times across runs}
}}

\item{blockids}{Numeric vector specifying which blocks/runs to include.}

\item{global}{Logical; if TRUE, return cumulative times across runs.}
}
\value{
A numeric vector of sampling times in seconds, where:
\itemize{
\item Each value represents a scan acquisition time
\item Times account for TR (repetition time) spacing
\item If global=FALSE, times reset at the start of each run
\item If global=TRUE, times accumulate across runs
}
}
\description{
Get the sampling times for a regressor or sampling frame. These times represent when
fMRI data was acquired and can be either relative (within each run) or global
(cumulative across runs). Sampling times are used to:
\itemize{
\item Evaluate regressors at scan acquisition times
\item Align model predictions with data collection
\item Convert between TR-based and time-based representations
}
}
\examples{
# Create a sampling frame with multiple runs
sframe <- sampling_frame(
  blocklens = c(100, 100, 100),  # 100 scans per run
  TR = 2,                        # 2 seconds per scan
  start_time = 0                 # Start at time 0
)

# Get relative sampling times (reset each run)
rel_times <- samples(sframe)
# First few times: 0, 2, 4, 6, ... (resets each run)

# Get global sampling times (cumulative)
glob_times <- samples(sframe, global = TRUE)
# Shows: 0, 2, 4, ..., 198, 200, 202, ..., 598

# Get times for specific runs
run2_times <- samples(sframe, blockids = 2)
# Times for second run only

# Create regressor and get its sampling times
event_data <- data.frame(
  onsets = c(1, 10, 20),
  run = c(1, 1, 1)
)
reg <- regressor(
  onsets = event_data$onsets,
  sampling_frame = sframe
)
reg_times <- samples(reg)
}
\seealso{
\code{\link[=sampling_frame]{sampling_frame()}}, \code{\link[=regressor]{regressor()}}, \code{\link[=global_onsets]{global_onsets()}}

Other timing: 
\code{\link{durations}()},
\code{\link{global_onsets}()},
\code{\link{onsets}()}
}
\concept{timing}
