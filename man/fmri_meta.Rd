% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fmri_meta.R
\name{fmri_meta}
\alias{fmri_meta}
\title{Fit Group-Level Meta-Analysis}
\usage{
fmri_meta(
  data,
  formula = ~1,
  method = c("pm", "fe", "dl", "reml"),
  robust = c("none", "huber", "t"),
  weights = c("ivw", "equal", "custom"),
  weights_custom = NULL,
  combine = NULL,
  contrasts = NULL,
  return_cov = NULL,
  chunk_size = 10000,
  n_threads = getOption("fmrireg.num_threads", 0),
  verbose = TRUE
)
}
\arguments{
\item{data}{A group_data object created by \code{\link{group_data}}}

\item{formula}{Formula specifying the meta-regression model. Default is ~ 1 (intercept only).
Use ~ 1 + group for group comparisons, or include continuous covariates.}

\item{method}{Character string specifying the meta-analysis method:
\itemize{
\item "fe": Fixed-effects (inverse variance weighted)
\item "pm": Paule-Mandel random-effects (default, good for whole-brain)
\item "dl": DerSimonian-Laird random-effects
\item "reml": Restricted maximum likelihood random-effects
}}

\item{robust}{Character string specifying robust estimation:
\itemize{
\item "none": No robust estimation (default)
\item "huber": Huber M-estimator with IRLS
\item "t": Student-t mixture model (for heavy-tailed distributions)
}}

\item{weights}{Character string specifying weighting scheme:
\itemize{
\item "ivw": Inverse variance weighting (default)
\item "equal": Equal weights for all subjects
\item "custom": User-provided weights (must supply weights argument)
}}

\item{weights_custom}{Numeric vector or matrix of custom weights (required if
\code{weights = "custom"}). If a vector, length must equal the number of subjects.
If a matrix, it must be subjects x features.}

\item{combine}{For t-statistic-only data, combination method ("stouffer",
"fisher", or "lancaster"). Stouffer combines z-scores and supports
equal, inverse-variance, or custom weighting (via \code{weights}). Fisher uses
equal weights. Lancaster implements a weighted Fisher method by mapping
weights to per-subject degrees of freedom.}

\item{contrasts}{Optional numeric vector or matrix specifying fit-time exact contrasts. If a
vector is provided, its names must match the column names of the design matrix X. A matrix
should have columns corresponding to predictors and rows corresponding to contrasts.}

\item{return_cov}{Optional. If set to "tri", returns the packed upper-triangular Var(beta)
per feature under \verb{$cov} to enable exact post-hoc contrasts via \code{contrast()}.}

\item{chunk_size}{Number of voxels to process at once (default: 10000)}

\item{n_threads}{Number of parallel threads to use. Defaults to fmrireg.num_threads option.}

\item{verbose}{Logical. Print progress messages (default: TRUE)}
}
\value{
An fmri_meta object containing:
\itemize{
\item coefficients: Meta-regression coefficients
\item se: Standard errors
\item tau2: Between-study variance (for random-effects)
\item I2: I-squared heterogeneity statistic
\item Q: Cochran's Q statistic
\item model: Model specification
\item data: Input group_data object
}
}
\description{
Performs voxelwise or ROI-based meta-analysis on group fMRI data using
fixed-effects, random-effects, or robust methods. Supports meta-regression
with covariates for group comparisons and other moderator analyses.
}
\examples{
\dontrun{
# Simple fixed-effects meta-analysis
fit <- fmri_meta(gd, method = "fe")

# Random-effects with group comparison
fit <- fmri_meta(gd, formula = ~ 1 + group, method = "pm")

# Robust meta-regression with continuous covariate
fit <- fmri_meta(gd, formula = ~ 1 + age + sex, method = "reml", robust = "huber")

# Stouffer's Z for t-statistics only
fit <- fmri_meta(gd_tstat, combine = "stouffer")

# Exact post-hoc contrasts by storing covariance
fit_cov <- fmri_meta(gd, formula = ~ 1 + group, method = "pm", return_cov = "tri")
con <- contrast(fit_cov, c("(Intercept)" = 0, group = 1))

# Exact fit-time contrast without storing covariance
fit_con <- fmri_meta(gd, formula = ~ 1 + group, method = "pm",
                     contrasts = c("(Intercept)" = 0, group = 1))
}
}
