[{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"package-building-and-checking","dir":"","previous_headings":"Build and Development Commands","what":"Package Building and Checking","title":"CLAUDE.md","text":"devtools::document() - Generate/update documentation roxygen2 comments devtools::check(cran = TRUE) - Run comprehensive CRAN checks (gold standard) devtools::spell_check() - Check spelling documentation DESCRIPTION urlchecker::url_check() - Validate URLs documentation devtools::check_win_devel() - Check Windows development version rhub::check_for_cran() - Run multi-platform CRAN checks","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"testing","dir":"","previous_headings":"Build and Development Commands","what":"Testing","title":"CLAUDE.md","text":"devtools::test() - Run tests testthat::test_local() - Run tests locally testthat::test_file(\"tests/testthat/test_specific.R\") - Run single test file Tests located tests/testthat/","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"documentation","dir":"","previous_headings":"Build and Development Commands","what":"Documentation","title":"CLAUDE.md","text":"pkgdown::build_site() - Build package website Documentation follows CRAN guidelines strictly (see CRAN_guidance.md)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"high-level-architecture","dir":"","previous_headings":"","what":"High-Level Architecture","title":"CLAUDE.md","text":"fmrireg R package fMRI time series regression analysis layered architecture:","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"core-abstractions","dir":"","previous_headings":"High-Level Architecture","what":"Core Abstractions","title":"CLAUDE.md","text":"event_factor: Categorical experimental events event_variable: Continuous experimental variables event_matrix: Matrix-based events Events convolved HRFs create regressors Base HRF class various implementations (gamma, gaussian, spline, etc.) HRFs can modified via decorators (lag, block, normalize) Supports custom basis sets parametric variations baseline_model: Nuisance regressors (drift, motion, etc.) event_model: Experimental design (events + HRFs) fmri_model: Complete model (baseline + events) fmri_dataset: Base class fMRI data matrix_dataset: -memory matrix data fmri_mem_dataset: Memory-mapped fMRI data latent_dataset: Reduced dimensionality data fmri_lm: Standard GLM fitting fmri_rlm: Robust GLM fitting Supports different strategies: runwise, chunkwise, trial-wise C++ implementations performance (mixed_solve, AR whitening) Flexible contrast specification via formulas Support F-contrasts, pairwise, polynomial contrasts","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"key-design-patterns","dir":"","previous_headings":"High-Level Architecture","what":"Key Design Patterns","title":"CLAUDE.md","text":"S3 Object System: generics defined R/all_generic.R Builder Pattern: Models built incrementally (events → event_model → fmri_model) Strategy Pattern: Different fitting algorithms (OLS, robust, regularized) Decorator Pattern: HRF modifications (lag_hrf, block_hrf)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"performance-considerations","dir":"","previous_headings":"High-Level Architecture","what":"Performance Considerations","title":"CLAUDE.md","text":"C++ implementations via Rcpp computationally intensive operations Parallelization via RcppParallel (configurable: options(fmrireg.num_threads = N)) Chunked processing large datasets manage memory","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"cran-compliance","dir":"","previous_headings":"High-Level Architecture","what":"CRAN Compliance","title":"CLAUDE.md","text":"package strictly follows CRAN guidelines: - S3 generics primary documentation site - Methods use @rdname link generic documentation - examples must run quickly (< 5 seconds) - Avoid modifying user options par() without restoration - See CRAN_guidance.md detailed guidelines","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"development-principles","dir":"","previous_headings":"High-Level Architecture","what":"Development Principles","title":"CLAUDE.md","text":"data-raw/principles.md: - Single source truth data representations - Encapsulation reconstruction - Clear separation concerns - Functional composition preferred - Object-oriented design S3 - One way one thing - Fail fast locally clear error messages","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"migration-complete","dir":"","previous_headings":"AR MODELING MIGRATION TO fmriAR (2025-09-18)","what":"Migration Complete","title":"CLAUDE.md","text":"AR (autoregressive) modeling functionality migrated specialized fmriAR package: Added fmriAR Imports Remotes DESCRIPTION fmriAR provides enhanced AR/ARMA modeling capabilities Created R/fmriAR_adapter.R seamless integration Maps fmrireg configurations fmriAR parameters Maintains backward compatibility Removed R/fmri_ar_modeling.R, R/ar_utils.R Removed src/ar_whiten.cpp (C++ implementation) Created compatibility layer legacy function calls Access advanced features: ARMA models, multiscale pooling, better diagnostics Improved performance via optimized C++ implementation Reduced maintenance burden (~600 lines code removed) Single source truth AR functionality","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"api-compatibility","dir":"","previous_headings":"AR MODELING MIGRATION TO fmriAR (2025-09-18)","what":"API Compatibility","title":"CLAUDE.md","text":"existing fmri_lm() calls continue work unchanged: - cor_struct = \"ar1\" → delegates fmriAR p=1 - cor_struct = \"ar2\" → delegates fmriAR p=2 - cor_struct = \"arp\" → delegates fmriAR user-specified p - options preserved: exact_first, iter_gls, global, etc.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"testing-1","dir":"","previous_headings":"AR MODELING MIGRATION TO fmriAR (2025-09-18)","what":"Testing","title":"CLAUDE.md","text":"Integration tests test_fmriAR_integration.R existing AR tests continue pass Numerical results match within tolerance","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/CLAUDE.html","id":"critical-test-issues-resolved-2025-05-28","dir":"","previous_headings":"","what":"CRITICAL TEST ISSUES RESOLVED (2025-05-28)","title":"CLAUDE.md","text":"critical functionality tests now passing following fixes: Updated solve_integrated_glm handle config structures (config$ar$struct config$ar_options$cor_struct) Added proper config extraction pipeline functions Files modified: fmri_lm_integrated_solver.R Corrected formula use sum weights approach: df = sum(weights) - p File modified: fmri_lm_effective_df.R Added XtXinv pipeline results contrast computation Added dfres core solver results Files modified: fmri_lm_integrated_solver.R, fmri_lm_solver.R 6 critical tests now pass: - ✓ AR whitening integration (now via fmriAR) - ✓ Robust fitting - ✓ Contrast computation - ✓ Effective df calculations - ✓ Bootstrap functionality - ✓ Sandwich variance estimator refactored code now ready integration existing codebase.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"","text":"fmrireg package provides tools analyzing fMRI regression models R, inspired standard R modeling tools like lm() glm(). integrates hemodynamic response functions design matrix construction comprehensive fMRI analysis. fMRI analysis involves complexities like large datasets, spatio-temporal correlations, physiological noise, core standard univariate analysis multiple regression applied voxelwise. fmrireg package simplifies specification estimation regression models. vignette provides high-level overview key steps components involved using fmrireg.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"key-components-and-workflow","dir":"Articles","previous_headings":"","what":"Key Components and Workflow","title":"","text":"typical fMRI analysis workflow fmrireg involves main stages: Data Representation: Defining fMRI data experimental design organized. Defining Hemodynamic Response Functions (HRFs). Creating event-related regressors (event_model). Modeling baseline components like drift nuisance factors (baseline_model). Defining contrasts interest (contrast). Model Estimation: Fitting specified model data (e.g., using fmri_lm). Advanced Topics: Exploring single-trial estimation, simulation, translation packages.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"data-representation","dir":"Articles","previous_headings":"Key Components and Workflow","what":"1. Data Representation","title":"","text":"modeling, need represent fMRI data structure. fmrireg uses objects like: fmri_dataset / fmri_mem_dataset: Encapsulates 4D fMRI data (potentially file-backed -memory), mask information, TR, run structure, experimental design table. sampling_frame: Defines temporal structure – number scans per run (blocklens) repetition time (TR).","code":"# Example: 5 runs, 200 scans/run, TR=2s sframe <- sampling_frame(blocklens = rep(200, 5), TR = 2) sframe #> Sampling Frame #> ============== #>  #> Structure: #>   5 blocks #>   Total scans: 1000 #>  #> Timing: #>   TR: 2 s #>   Precision: 0.1 s #>  #> Duration: #>   Total time: 2000.0 s"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"a-hemodynamic-response-function-hrf","dir":"Articles","previous_headings":"Key Components and Workflow > 2. Model Building","what":"a) Hemodynamic Response Function (HRF)","title":"","text":"HRF models BOLD signal response brief neural event. fmrireg provides various pre-defined HRFs (e.g., HRF_SPMG1, HRF_GAUSSIAN) functions create modify (gen_hrf, hrf_blocked, hrf_lagged).  Related Topic: Hemodynamic Response Functions","code":"# Plot the SPM canonical HRF time <- seq(0, 24, by = 0.2) plot(time, HRF_SPMG1(time), type = 'l', xlab = \"Time (s)\", ylab = \"BOLD Response\",      main = \"SPM Canonical HRF (HRF_SPMG1)\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"b-event-model-event_model","dir":"Articles","previous_headings":"Key Components and Workflow > 2. Model Building","what":"b) Event Model (event_model)","title":"","text":"defines task-related part GLM. specify experimental events (onsets, conditions, durations) map regressors using formula syntax. hrf() afni_hrf() functions within formula link event variables specific HRF shapes. Related Topic: Event Models","code":"# Example: Model effect of 'stim_type', using SPMG1 HRF # (Assuming 'my_design_table' and 'my_sampling_frame' exist) event_mod <- event_model(onset ~ hrf(stim_type),                           data = my_design_table,                           block = ~ run_id,                           sampling_frame = my_sampling_frame)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"c-baseline-model-baseline_model","dir":"Articles","previous_headings":"Key Components and Workflow > 2. Model Building","what":"c) Baseline Model (baseline_model)","title":"","text":"models non-task-related components like scanner drift, run intercepts, nuisance factors (e.g., motion parameters). Related Topic: Baseline Models","code":"# Example: Cubic B-spline drift model + run intercepts # (Requires 'sframe' defined earlier) base_mod <- baseline_model(basis = \"bs\", degree = 3, sframe = sframe) print(base_mod) #> ================================================ #>            Baseline Model                        #> ================================================ #>   Drift Components                            #>     * Name: baseline_bs_3                 #>     * Basis type: bs                      #>     * Degree: 3                           #>     * Drift columns: 15                   #>  #>   Additional Components                     #>     * Constant columns: 5                 #>     * Nuisance columns: 0                 #>  #>   Model Summary                             #>     * Total columns: 20                   #>  #>   Design Matrix Preview                     #>      0.000  0.000  0.000  0.000 ...       #>      0.015  0.000  0.000  0.000 ...       #>      0.030  0.000  0.000  0.000 ...       #> ================================================"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"d-contrasts-pair_contrast-unit_contrast-etc-","dir":"Articles","previous_headings":"Key Components and Workflow > 2. Model Building","what":"d) Contrasts (pair_contrast, unit_contrast, etc.)","title":"","text":"Contrasts define specific comparisons condition estimates. See Vignette: vignette(\"a_05_contrasts\", package = \"fmrireg\")","code":"# Example: Contrast comparing 'face' vs 'scene' levels of 'stim_type' face_vs_scene <- pair_contrast(~ stim_type == \"face\", ~ stim_type == \"scene\", name = \"FvS\") print(face_vs_scene) #> contrast: FvS  #>  A:  ~stim_type == \"face\"  #>  B:  ~stim_type == \"scene\""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"model-estimation-fmri_model-fmri_lm","dir":"Articles","previous_headings":"Key Components and Workflow","what":"3. Model Estimation (fmri_model, fmri_lm)","title":"","text":"combine event baseline models full fmri_model fit fmri_dataset using estimation functions like fmri_lm (standard GLM) estimate_betas (single-trial betas). Setting robust = TRUE invokes row-wise weighting lessen influence motion spikes frame-level artifacts. vignette(\"a_09_linear_model\", package = \"fmrireg\") Linear Models Trialwise Analysis","code":"# Combine event and baseline models full_model <- fmri_model(event_mod, base_mod)  # Fit the GLM # (Requires 'my_dataset' of class fmri_dataset) fit <- fmri_lm(full_model, dataset = my_dataset)  # Robust fit down-weighting outlier time points fit_robust <- fmri_lm(full_model, dataset = my_dataset, robust = TRUE)  # Extract contrast results (if contrasts were defined) # con_results <- coef(fit)  # Get coefficients"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"advanced-topics","dir":"Articles","previous_headings":"Key Components and Workflow","what":"4. Advanced Topics","title":"","text":"fmrireg also supports: vignette(\"a_08_simulation\", package = \"fmrireg\") AFNI Translation: Generating scripts AFNI’s 3dDeconvolve (afni_lm). Low-level Regressors: Manually creating manipulating regressors (regressor).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"acceleration-sketched-nyström-analysis","dir":"Articles","previous_headings":"Key Components and Workflow > 4. Advanced Topics","what":"Acceleration: Sketched / Nyström Analysis","title":"","text":"large problems, can accelerate voxelwise GLM estimation : - SRHT/IHS temporal sketching reduce timepoints preserving LS geometry. - Nyström/landmark spatial extension solve subset voxels extend parcel‑aware kernels. See vignette(\"sketched-ar\", package = \"fmrireg\") guidance, tradeoffs, practical defaults.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"group-level-meta-analysis","dir":"Articles","previous_headings":"Key Components and Workflow > 4. Advanced Topics","what":"Group-Level Meta-Analysis","title":"","text":"Combine subject‑level maps ROI summaries using fixed/random‑effects meta‑regression: - Inputs: HDF5/NIfTI (beta+SE t+df) ROI CSV. - Random‑effects: Paule–Mandel/DerSimonian–Laird/REML alias; optional robust Huber. - t‑combine: Stouffer/Fisher/Lancaster (supports equal/IVW/custom weights applicable). - Exact contrasts: fit‑time (contrasts=…) post‑hoc via return_cov = \"tri\" + contrast(). - Multiple comparisons: BH FDR spatial FDR (block/parcel aware). See vignette(\"group_analysis\", package = \"fmrireg\") end‑‑end examples.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting Started","title":"","text":"overview provides map fmrireg package. detailed explanations examples, please refer specific vignettes linked .","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/Overview.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"","text":"Dataset Management Simulating fMRI Data Group Analysis Sketched/Nyström Acceleration","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"introduction-to-contrasts","dir":"Articles","previous_headings":"","what":"Introduction to Contrasts","title":"","text":"Statistical contrasts fundamental component fMRI analyses, allowing researchers test specific hypotheses differences brain activity experimental conditions. fmrireg package provides flexible powerful system defining, computing, applying contrasts linear models fitted fMRI data. vignette explores various ways specify contrasts fmrireg, simple pairwise comparisons complex interactions polynomial trends.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"example-a-2x2-factorial-design","dir":"Articles","previous_headings":"","what":"Example: A 2x2 Factorial Design","title":"","text":"illustrate contrast functionalities, let’s use simple two--two factorial design. two factors: category: levels “face” “scene” attention: levels “attend” “ignore” ’ll assume unique condition repeated twice within single run. First, construct event table representing design: 2x2 Experimental Design Table Cells within ‘category:attention’ event term event_term object encapsulates structure experimental conditions used compute contrast weights.","code":"design <- expand.grid(category = c(\"face\", \"scene\"),                        attention = c(\"attend\", \"ignore\"),                        replication = c(1, 2)) design$onset <- seq(1, 100, length.out = nrow(design)) # Assign arbitrary onsets design$block <- rep(1, nrow(design))                  # Single block (run)  # Ensure factors are factors design$category <- factor(design$category) design$attention <- factor(design$attention)  kable(design, caption = \"2x2 Experimental Design Table\") # Define a sampling frame and create the event model sframe <- sampling_frame(blocklens = 120, TR = 2) emodel <- event_model(onset ~ hrf(category, attention),                        block = ~block,                        data = design,                        sampling_frame = sframe)  # Extract the event term for contrast calculation # In this simple model, there's only one event term event_term <- terms(emodel)[[1]]   kable(cells(event_term), caption = \"Cells within the 'category:attention' event term\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"basic-contrasts-pair_contrast","dir":"Articles","previous_headings":"","what":"Basic Contrasts: pair_contrast","title":"","text":"common type contrast compares average activation one set conditions another. pair_contrast function provides convenient way define sum--zero contrasts.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"defining-pair-contrasts","dir":"Articles","previous_headings":"Basic Contrasts: pair_contrast","what":"Defining Pair Contrasts","title":"","text":"pair_contrast takes two formulas, B, defining conditions compare, mandatory name. Let’s define contrasts main effects category (face vs. scene) attention (attend vs. ignore):","code":"# Main effect of category: face > scene con_face_vs_scene <- pair_contrast(~ category == \"face\",                                   ~ category == \"scene\",                                   name = \"face_vs_scene\")  # Main effect of attention: attend > ignore con_attend_vs_ignore <- pair_contrast(~ attention == \"attend\",                                      ~ attention == \"ignore\",                                      name = \"attend_vs_ignore\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"computing-contrast-weights","dir":"Articles","previous_headings":"Basic Contrasts: pair_contrast","what":"Computing Contrast Weights","title":"","text":"Contrast specifications abstract applied specific model term structure. contrast_weights function computes numerical weights based levels within term. Notice pair_contrast automatically averages levels mentioned formulas. face_vs_scene, averages ‘attend’ ‘ignore’ within category level contrasting. resulting weights sum zero (0.25 * 2 + (-0.25) * 2 = 0).","code":"wts_face_vs_scene <- contrast_weights(con_face_vs_scene, event_term) wts_attend_vs_ignore <- contrast_weights(con_attend_vs_ignore, event_term)  cat(\"Weights for 'face_vs_scene':\\n\") ## Weights for 'face_vs_scene': kable(wts_face_vs_scene$weights, col.names = wts_face_vs_scene$name) cat(\"\\nWeights for 'attend_vs_ignore':\\n\") ##  ## Weights for 'attend_vs_ignore': kable(wts_attend_vs_ignore$weights, col.names = wts_attend_vs_ignore$name)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"unit-contrasts-comparing-to-baseline","dir":"Articles","previous_headings":"","what":"Unit Contrasts: Comparing to Baseline","title":"","text":"Sometimes, want test whether activation condition (set conditions) significantly different implicit baseline (often represented intercept model). unit_contrast used purpose. creates contrasts sum 1. weights average specified conditions compare zero (implicit baseline).","code":"con_face_vs_baseline <- unit_contrast(~ category == \"face\", name = \"face_gt_baseline\") con_attend_vs_baseline <- unit_contrast(~ attention == \"attend\", name = \"attend_gt_baseline\")  wts_face_vs_baseline <- contrast_weights(con_face_vs_baseline, event_term) wts_attend_vs_baseline <- contrast_weights(con_attend_vs_baseline, event_term)  cat(\"Weights for 'face_gt_baseline':\\n\") ## Weights for 'face_gt_baseline': kable(wts_face_vs_baseline$weights, col.names = wts_face_vs_baseline$name) cat(\"\\nWeights for 'attend_gt_baseline':\\n\") ##  ## Weights for 'attend_gt_baseline': kable(wts_attend_vs_baseline$weights, col.names = wts_attend_vs_baseline$name)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"general-contrasts-with-contrast","dir":"Articles","previous_headings":"","what":"General Contrasts with contrast()","title":"","text":"contrast() function allows complex contrasts defined single formula expression. useful interactions specific linear combinations conditions. Let’s define interaction contrast: (face:attend - face:ignore) - (scene:attend - scene:ignore). tests effect attention differs categories. Note: formula contrast(), condition names formed joining factor levels colons (e.g., face:attend). condition names contain special characters like colons, must enclosed backticks. contrast_weights function evaluates formula environment condition name corresponds column vector (1 condition, 0 otherwise).","code":"# Interaction contrast con_interaction <- contrast(   ~ (`face:attend` - `face:ignore`) - (`scene:attend` - `scene:ignore`),   name = \"category_X_attention\" )  wts_interaction <- contrast_weights(con_interaction, event_term)  cat(\"Weights for 'category_X_attention':\\n\") ## Weights for 'category_X_attention': kable(wts_interaction$weights, col.names = wts_interaction$name)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"contrasts-for-main-effects-and-interactions","dir":"Articles","previous_headings":"","what":"Contrasts for Main Effects and Interactions","title":"","text":"pair_contrast contrast flexible, fmrireg provides convenience functions standard ANOVA-like contrasts. oneway_contrast: Generates contrasts main effect single factor (sum--zero coding). interaction_contrast: Generates contrasts interaction effects two factors. often result multiple contrast columns (F-contrasts) testing overall effect. Note weights generated interaction_contrast(~ category * attention) match manually specified using contrast(). factors levels, functions generate multiple orthogonal contrast columns.","code":"# Main effect of category (will produce 1 contrast vector) con_main_category <- oneway_contrast(~ category, name = \"Main_Category\") wts_main_category <- contrast_weights(con_main_category, event_term)  # Interaction effect (will produce 1 contrast vector for a 2x2 design) con_int_cat_att <- interaction_contrast(~ category * attention, name = \"Interaction_CatAtt\") wts_int_cat_att <- contrast_weights(con_int_cat_att, event_term)  cat(\"Weights for 'Main_Category' (oneway_contrast):\\n\") ## Weights for 'Main_Category' (oneway_contrast): kable(wts_main_category$weights) cat(\"\\nWeights for 'Interaction_CatAtt' (interaction_contrast):\\n\") ##  ## Weights for 'Interaction_CatAtt' (interaction_contrast): kable(wts_int_cat_att$weights)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"polynomial-contrasts-for-ordered-factors","dir":"Articles","previous_headings":"","what":"Polynomial Contrasts for Ordered Factors","title":"","text":"factor represents ordered levels (e.g., different task difficulty levels, time points), poly_contrast can test trends (linear, quadratic, etc.). Let’s add ‘intensity’ factor design: Design Ordered ‘intensity’ Factor Now, define polynomial contrast test linear quadratic trends intensity: output two columns: poly1 linear trend poly2 quadratic trend.","code":"design_poly <- expand.grid(category = c(\"face\", \"scene\"),                             intensity = c(1, 2, 3), # Ordered factor                            replication = c(1)) design_poly$onset <- seq(1, 60, length.out = nrow(design_poly)) design_poly$block <- rep(1, nrow(design_poly))  design_poly$intensity <- factor(design_poly$intensity, ordered = TRUE)  kable(design_poly, caption = \"Design with Ordered 'intensity' Factor\") emodel_poly <- event_model(onset ~ hrf(category, intensity),                             block = ~block,                             data = design_poly,                             sampling_frame = sframe) event_term_poly <- terms(emodel_poly)[[1]] con_poly_intensity <- poly_contrast(~ intensity, degree = 2, name = \"Intensity_Trend\") wts_poly_intensity <- contrast_weights(con_poly_intensity, event_term_poly)  cat(\"Weights for 'Intensity_Trend' (poly_contrast, degree=2):\\n\") ## Weights for 'Intensity_Trend' (poly_contrast, degree=2): kable(wts_poly_intensity$weights)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"helper-functions-for-common-comparisons","dir":"Articles","previous_headings":"","what":"Helper Functions for Common Comparisons","title":"","text":"Two helpers simplify common multi-level comparisons: pair_contrast: Creates pairwise comparison two levels factor. one_against_all_contrast: Compares level average levels.","code":"# Pairwise contrast for category using pair_contrast con_pairwise_cat <- pair_contrast(~ category == \"face\",                                   ~ category == \"scene\",                                   name = \"cat_face_scene\")  # Compare each attention level vs the other con_one_all_att <- one_against_all_contrast(levels(design$attention), facname = \"attention\")  # Since con_one_all_att is already a contrast_set, we need to extract its elements # and combine them properly with the single contrast all_helper_contrasts <- list(con_pairwise_cat) all_helper_contrasts <- append(all_helper_contrasts, con_one_all_att) con_set_helpers <- do.call(contrast_set, all_helper_contrasts)  # Calculate weights (demonstrating contrast_set) wts_helpers <- contrast_weights(con_set_helpers, event_term)  # Display weights for one_against_all cat(\"Weights for 'con_attend_vs_other':\\n\") ## Weights for 'con_attend_vs_other': kable(wts_helpers$con_attend_vs_other$weights) cat(\"\\nWeights for 'con_ignore_vs_other':\\n\") ##  ## Weights for 'con_ignore_vs_other': kable(wts_helpers$con_ignore_vs_other$weights)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"grouping-contrasts-contrast_set","dir":"Articles","previous_headings":"","what":"Grouping Contrasts: contrast_set","title":"","text":"can group multiple contrast specifications using contrast_set. contrast_weights called contrast_set, returns named list computed contrast weight objects.","code":"# Combine several previously defined contrasts all_contrasts <- contrast_set(   con_face_vs_scene,   con_attend_vs_ignore,   con_interaction,   con_face_vs_baseline )  print(all_contrasts) ##  ## === Contrast Set === ##  ##  Overview: ##   * Number of contrasts: 4  ##   * Types of contrasts: ##     - contrast_formula_spec : 1  ##     - pair_contrast_spec : 2  ##     - unit_contrast_spec : 1  ##  ##   Individual Contrasts: ##  ## [1] face_vs_scene (pair_contrast_spec) ##     Formula: ~category == \"face\" vs  ~category == \"scene\" ##  ## [2] attend_vs_ignore (pair_contrast_spec) ##     Formula: ~attention == \"attend\" vs  ~attention == \"ignore\" ##  ## [3] category_X_attention (contrast_formula_spec) ##     Formula: ~(`face:attend` - `face:ignore`) - (`scene:attend` - `scene:ignore`) ##  ## [4] face_gt_baseline (unit_contrast_spec) ##     Formula: ~category == \"face\" # Compute weights for the entire set all_weights <- contrast_weights(all_contrasts, event_term)  # Access weights for a specific contrast within the set cat(\"\\nAccessing weights for 'face_vs_scene' from the set:\\n\") ##  ## Accessing weights for 'face_vs_scene' from the set: kable(all_weights$face_vs_scene$weights)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"applying-contrasts-in-fmri_lm","dir":"Articles","previous_headings":"","what":"Applying Contrasts in fmri_lm","title":"","text":"Contrasts typically specified within hrf() function fmri_lm formula. can provide single contrast specification contrast_set. (Note: fitting code set eval=FALSE avoid lengthy computation vignette build, demonstrates principle.)","code":"# Simulate some simple data for demonstration ysim <- matrix(rnorm(120 * 3), 120, 3) # 3 voxels dataset_sim <- matrix_dataset(ysim, TR = 2, run_length = 120, event_table = design)  # Fit model with the contrast set defined earlier fmri_fit <- fmri_lm(   formula = onset ~ hrf(category, attention, contrasts = all_contrasts),   block = ~ block,   dataset = dataset_sim,   strategy = \"chunkwise\" # Use chunkwise for matrix_dataset )  # Print summary of the fitted model (shows contrasts) print(fmri_fit)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"extracting-contrast-results","dir":"Articles","previous_headings":"","what":"Extracting Contrast Results","title":"","text":"fitting model contrasts, can extract results using standard accessor functions, specifying type = \"contrasts\" type = \"F\": coef(fmri_fit, type = \"contrasts\"): Estimated contrast values. stats(fmri_fit, type = \"contrasts\"): t-statistics contrasts. standard_error(fmri_fit, type = \"contrasts\"): Standard errors contrasts. stats(fmri_fit, type = \"F\"): F-statistics (F-contrasts defined, e.g., via oneway_contrast).","code":"# Extract estimated contrast values contrast_estimates <- coef(fmri_fit, type = \"contrasts\") kable(contrast_estimates, caption = \"Estimated Contrast Values\")  # Extract t-statistics contrast_tstats <- stats(fmri_fit, type = \"contrasts\") kable(contrast_tstats, caption = \"Contrast t-statistics\")  # Extract standard errors contrast_se <- standard_error(fmri_fit, type = \"contrasts\") kable(contrast_se, caption = \"Contrast Standard Errors\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"visualizing-contrast-weights","dir":"Articles","previous_headings":"","what":"Visualizing Contrast Weights","title":"","text":"plot_contrasts function provides heatmap visualization contrast weights applied across regressors design matrix (including baseline terms present). plot helps verify contrasts specified correctly relative full model design matrix.","code":"# We need to add contrasts *directly* to the event model for plotting emodel_with_cons <- event_model(   onset ~ hrf(category, attention, contrasts = all_contrasts),   block = ~ block,    data = design,    sampling_frame = sframe )  # Plot the contrasts (using default baseline model) tryCatch({   plot_contrasts(emodel_with_cons, rotate_x_text = TRUE, coord_fixed = FALSE) }, error = function(e) {   cat(\"Note: plot_contrasts() encountered an issue and was skipped.\\n\")   cat(\"Error:\", e$message, \"\\n\") })"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"working-with-contrast-weights","dir":"Articles","previous_headings":"","what":"Working with Contrast Weights","title":"","text":"computed contrast weights can used directly statistical analyses exported analysis packages. weights matrix shows exactly experimental condition contributes contrast:","code":"# View the structure of interaction contrast weights cat(\"Interaction contrast structure:\\n\") ## Interaction contrast structure: str(wts_interaction) ## List of 5 ##  $ term         :List of 9 ##   ..$ varname         : chr \"category:attention\" ##   ..$ events          :List of 2 ##   .. ..$ category :List of 7 ##   .. .. ..$ varname   : chr \"category\" ##   .. .. .. ..- attr(*, \"orig_names\")= chr \"category\" ##   .. .. ..$ onsets    : num [1:8] 1 15.1 29.3 43.4 57.6 ... ##   .. .. ..$ durations : num [1:8] 0 0 0 0 0 0 0 0 ##   .. .. ..$ blockids  : int [1:8] 1 1 1 1 1 1 1 1 ##   .. .. ..$ value     : int [1:8, 1] 1 2 1 2 1 2 1 2 ##   .. .. .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. .. .. ..$ : NULL ##   .. .. .. .. ..$ : chr \"category\" ##   .. .. .. .. .. ..- attr(*, \"orig_names\")= chr \"category\" ##   .. .. ..$ continuous: logi FALSE ##   .. .. ..$ meta      :List of 1 ##   .. .. .. ..$ levels: chr [1:2] \"face\" \"scene\" ##   .. .. ..- attr(*, \"class\")= chr [1:2] \"event\" \"event_seq\" ##   .. ..$ attention:List of 7 ##   .. .. ..$ varname   : chr \"attention\" ##   .. .. .. ..- attr(*, \"orig_names\")= chr \"attention\" ##   .. .. ..$ onsets    : num [1:8] 1 15.1 29.3 43.4 57.6 ... ##   .. .. ..$ durations : num [1:8] 0 0 0 0 0 0 0 0 ##   .. .. ..$ blockids  : int [1:8] 1 1 1 1 1 1 1 1 ##   .. .. ..$ value     : int [1:8, 1] 1 1 2 2 1 1 2 2 ##   .. .. .. ..- attr(*, \"dimnames\")=List of 2 ##   .. .. .. .. ..$ : NULL ##   .. .. .. .. ..$ : chr \"attention\" ##   .. .. .. .. .. ..- attr(*, \"orig_names\")= chr \"attention\" ##   .. .. ..$ continuous: logi FALSE ##   .. .. ..$ meta      :List of 1 ##   .. .. .. ..$ levels: chr [1:2] \"attend\" \"ignore\" ##   .. .. ..- attr(*, \"class\")= chr [1:2] \"event\" \"event_seq\" ##   ..$ subset          : logi [1:8] TRUE TRUE TRUE TRUE TRUE TRUE ... ##   ..$ event_table     : tibble [8 × 2] (S3: tbl_df/tbl/data.frame) ##   .. ..$ category : Factor w/ 2 levels \"face\",\"scene\": 1 2 1 2 1 2 1 2 ##   .. ..$ attention: Factor w/ 2 levels \"attend\",\"ignore\": 1 1 2 2 1 1 2 2 ##   ..$ onsets          : num [1:8] 1 15.1 29.3 43.4 57.6 ... ##   ..$ blockids        : int [1:8] 1 1 1 1 1 1 1 1 ##   ..$ durations       : num [1:8] 0 0 0 0 0 0 0 0 ##   ..$ condition_levels: chr [1:4] \"category.face_attention.attend\" \"category.scene_attention.attend\" \"category.face_attention.ignore\" \"category.scene_attention.ignore\" ##   ..$ condition_ids   : int [1:8] 1 2 3 4 1 2 3 4 ##   ..- attr(*, \"class\")= chr [1:2] \"event_term\" \"event_seq\" ##   ..- attr(*, \"hrfspec\")=List of 15 ##   .. ..$ name     : chr \"category:attention\" ##   .. ..$ label    : chr \"hrf(category,attention)\" ##   .. ..$ id       : NULL ##   .. ..$ vars     :List of 2 ##   .. .. ..$ : language ~category ##   .. .. .. ..- attr(*, \".Environment\")=<environment: 0x55cbb3d0ecf8>  ##   .. .. ..$ : language ~attention ##   .. .. .. ..- attr(*, \".Environment\")=<environment: 0x55cbb3d0ecf8>  ##   .. .. ..- attr(*, \"class\")= chr [1:2] \"quosures\" \"list\" ##   .. ..$ varnames : Named chr [1:2] \"category\" \"attention\" ##   .. .. ..- attr(*, \"names\")= chr [1:2] \"\" \"\" ##   .. ..$ hrf      :function (t, P1 = 5, P2 = 15, A1 = 0.0833)   ##   .. .. ..- attr(*, \"class\")= chr [1:2] \"HRF\" \"function\" ##   .. .. ..- attr(*, \"name\")= chr \"SPMG1\" ##   .. .. ..- attr(*, \"nbasis\")= int 1 ##   .. .. ..- attr(*, \"span\")= num 24 ##   .. .. ..- attr(*, \"param_names\")= chr [1:3] \"P1\" \"P2\" \"A1\" ##   .. .. ..- attr(*, \"params\")=List of 3 ##   .. .. .. ..$ P1: num 5 ##   .. .. .. ..$ P2: num 15 ##   .. .. .. ..$ A1: num 0.0833 ##   .. ..$ onsets   : NULL ##   .. ..$ durations: NULL ##   .. ..$ prefix   : NULL ##   .. ..$ subset   : NULL ##   .. ..$ precision: num 0.3 ##   .. ..$ contrasts: NULL ##   .. ..$ summate  : logi TRUE ##   .. ..$ uid      : chr \"t01\" ##   .. ..$ term_tag : chr \"category_attention\" ##   .. ..- attr(*, \"class\")= chr [1:2] \"hrfspec\" \"list\" ##   ..- attr(*, \"term_tag\")= chr \"category_attention\" ##   ..- attr(*, \"uid\")= chr \"t01\" ##  $ name         : chr \"category_X_attention\" ##  $ weights      : num [1:4, 1] 1 -1 -1 1 ##   ..- attr(*, \"dimnames\")=List of 2 ##   .. ..$ : chr [1:4] \"category.face_attention.attend\" \"category.scene_attention.attend\" \"category.face_attention.ignore\" \"category.scene_attention.ignore\" ##   .. ..$ : NULL ##  $ condnames    : chr [1:4] \"category.face_attention.attend\" \"category.scene_attention.attend\" \"category.face_attention.ignore\" \"category.scene_attention.ignore\" ##  $ contrast_spec:List of 4 ##   ..$ A    :Class 'formula'  language ~(`face:attend` - `face:ignore`) - (`scene:attend` - `scene:ignore`) ##   .. .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv>  ##   ..$ B    : NULL ##   ..$ where: NULL ##   ..$ name : chr \"category_X_attention\" ##   ..- attr(*, \"class\")= chr [1:3] \"contrast_formula_spec\" \"contrast_spec\" \"list\" ##  - attr(*, \"class\")= chr [1:2] \"contrast\" \"list\" cat(\"\\nContrast weights matrix:\\n\") ##  ## Contrast weights matrix: print(wts_interaction$conmat) ## NULL"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"","text":"Benchmark Datasets Group Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"","text":"fmrireg package offers comprehensive system defining applying statistical contrasts fMRI analysis. simple pairwise comparisons (pair_contrast) baseline tests (unit_contrast) complex formula-based definitions (contrast), trend analysis (poly_contrast), ANOVA-style effects (oneway_contrast, interaction_contrast), researchers fine-grained control hypothesis testing. integration fmri_lm visualization tools like plot_contrasts facilitates robust interpretable fMRI modeling.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_08_simulation.html","id":"introduction-to-fmri-data-simulation","dir":"Articles","previous_headings":"","what":"Introduction to fMRI Data Simulation","title":"","text":"Simulation essential tool fMRI method development, validation, teaching. fmrireg package offers several functions simulate fMRI data varying levels complexity: simulate_bold_signal: Simulates clean BOLD responses multiple experimental conditions simulate_noise_vector: Generates realistic fMRI noise temporal autocorrelation, drift, physiological components simulate_simple_dataset: Combines signal noise complete dataset based SNR simulate_fmri_matrix: Creates multiple time series shared event timing column-specific variation parameters vignette demonstrates use functions create realistic fMRI simulations various purposes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_08_simulation.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"","text":"04 fMRI Linear Model (GLM) ## Simulating Clean BOLD Signals Let’s start simulate_bold_signal, generates clean hemodynamic response signal multiple experimental conditions.   function returns list containing: - onset: Event onset times - condition: Condition labels event - mat: Matrix time points BOLD responses condition can control: - Number conditions (ncond) - Number repetitions per condition (nreps) - HRF shape (hrf) - Amplitudes condition (amps) - Inter-stimulus interval range (isi) - Amplitude variability (ampsd)","code":"# Simulate 3 conditions with different amplitudes sim <- simulate_bold_signal(ncond = 3, amps = c(1.0, 1.5, 2.0), TR = 2)  # Extract the data and plot time <- sim$mat[,1]  # First column contains time signals <- sim$mat[,-1]  # Other columns contain condition signals  # Create a tidy dataframe for plotting df <- data.frame(   Time = time,   Cond1 = signals[,1],   Cond2 = signals[,2],   Cond3 = signals[,3] )  df_long <- tidyr::pivot_longer(df, cols = c(Cond1, Cond2, Cond3),                          names_to = \"Condition\",                          values_to = \"Response\")  # Plot using ggplot2 ggplot(df_long, aes(x = Time, y = Response, color = Condition)) +   geom_line() +   theme_minimal() +   labs(title = \"Simulated BOLD Signals for Three Conditions\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Condition\") +   scale_color_brewer(palette = \"Set1\") # Mark trial onsets on the time axis ggplot(df_long, aes(x = Time, y = Response, color = Condition)) +   geom_line() +   geom_vline(xintercept = sim$onset, linetype = \"dashed\", alpha = 0.3) +   theme_minimal() +   labs(title = \"Simulated BOLD Signals with Event Onsets\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Condition\") +   scale_color_brewer(palette = \"Set1\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_08_simulation.html","id":"simulating-realistic-fmri-noise","dir":"Articles","previous_headings":"","what":"Simulating Realistic fMRI Noise","title":"","text":"simulate_noise_vector function generates realistic fMRI noise combining various noise sources common real fMRI data. understand components, let’s simulate visualize separately combined.     simulation shows five distinct types noise components: White Noise: Random fluctuations equal power across frequencies (flat power spectrum). ARMA Noise: Temporally autocorrelated noise characteristic “smoothed” appearance. power spectrum shows power lower frequencies. Drift Component: slow oscillation typical scanner drift physiological trends. power spectrum shows dominant peak low frequency. Physiological Noise: Regular oscillations frequencies corresponding respiration (~0.3 Hz) cardiac-like activity (~0.8 Hz). real fMRI data TR=2s, cardiac frequencies (~1.2 Hz) aliased. Combined Noise: components together, creating complex noise structure typical real fMRI data. power spectrum shows features contributing components. components, added task-related signals, create realistic fMRI time series.","code":"# Simulation parameters n_timepoints <- 200 TR <- 2 time <- seq(0, (n_timepoints - 1) * TR, by = TR)  # Create noise components with clear differences set.seed(123) # For reproducibility  # 1. Simulate Pure White Noise noise_white <- simulate_noise_vector(n_timepoints, TR = TR,                                    ar = 0, ma = 0,                                   drift_amplitude = 0, physio = FALSE, sd = 1) ## Warning in min(Mod(polyroot(c(1, -model$ar)))): no non-missing arguments to ## min; returning Inf # 2. Simulate ARMA Noise (without drift/physio) noise_arma <- simulate_noise_vector(n_timepoints, TR = TR,                                   ar = c(0.6), ma = c(0.3),                                   drift_amplitude = 0, physio = FALSE, sd = 1)  # 3. Generate Drift Component Directly drift_freq <- 1/128 drift_amplitude <- 2 noise_drift <- drift_amplitude * sin(2 * pi * drift_freq * time)  # 4. Generate Physiological Noise Component Directly # Make physiological components more prominent noise_cardiac <- 1.5 * sin(2 * pi * 0.3 * time)  # Respiratory (~0.3 Hz) noise_respiratory <- 1.0 * sin(2 * pi * 0.8 * time)  # Cardiac-like (~0.8 Hz, observable with TR=2s) noise_physio <- noise_cardiac + noise_respiratory  # 5. Simulate Combined Noise (ARMA + Drift + Physio) noise_combined <- noise_arma + noise_drift + noise_physio  # Combine into a data frame for plotting time courses noise_df <- data.frame(   Time = time,   White_Noise = noise_white,   ARMA_Noise = noise_arma,   Drift_Component = noise_drift,   Physiological_Noise = noise_physio,   Combined_Noise = noise_combined )  # Create long format dataframe for plotting without pipes noise_long <- tidyr::pivot_longer(noise_df,                                    cols = -Time,                                   names_to = \"NoiseType\",                                    values_to = \"Signal\")  # Set factor levels for proper ordering noise_long$NoiseType <- factor(noise_long$NoiseType,                                levels = c(\"White_Noise\", \"ARMA_Noise\",                                          \"Drift_Component\", \"Physiological_Noise\",                                          \"Combined_Noise\"),                               labels = c(\"White Noise\", \"ARMA Noise\",                                          \"Drift Component\", \"Physiological Noise\",                                          \"Combined Noise\"))  # Plot Time Courses (Faceted) ggplot(noise_long, aes(x = Time, y = Signal, color = NoiseType)) +   geom_line() +   facet_wrap(~NoiseType, ncol = 1, scales = \"free_y\") + # Use free_y scales   theme_minimal() +   theme(legend.position = \"none\") + # Remove legend as facets show type   labs(title = \"Simulated fMRI Noise Components: Time Courses\",        x = \"Time (seconds)\",        y = \"Signal Amplitude\") # --- Power Spectrum Analysis --- library(stats)  calculate_spectrum <- function(signal, TR) {   # Detrend   signal <- signal - mean(signal)      # Calculate FFT   n <- length(signal)   # Get proper periodogram-based power spectrum   fft_result <- fft(signal)   # Get power - divide by n to normalize   power <- Mod(fft_result)^2 / n      # Get positive frequencies only (up to Nyquist)   nyquist_index <- floor(n/2) + 1   freq <- seq(0, 1/(2*TR), length.out = nyquist_index)   power_pos <- power[1:nyquist_index]      # For one-sided spectrum, multiply by 2 (except DC and Nyquist)   if (n > 1) {     power_pos[2:(length(power_pos)-ifelse(n %% 2 == 0, 1, 0))] <-        2 * power_pos[2:(length(power_pos)-ifelse(n %% 2 == 0, 1, 0))]   }      # Return as data frame   data.frame(Frequency = freq, Power = power_pos) }  # Calculate spectra spec_white <- calculate_spectrum(noise_white, TR) spec_arma <- calculate_spectrum(noise_arma, TR) spec_drift <- calculate_spectrum(noise_drift, TR) spec_physio <- calculate_spectrum(noise_physio, TR) spec_combined <- calculate_spectrum(noise_combined, TR)  # Add noise type column to each data frame spec_white$NoiseType <- \"White Noise\" spec_arma$NoiseType <- \"ARMA Noise\" spec_drift$NoiseType <- \"Drift Component\" spec_physio$NoiseType <- \"Physiological Noise\" spec_combined$NoiseType <- \"Combined Noise\"  # Combine all spectra into one data frame spec_df <- rbind(spec_white, spec_arma, spec_drift, spec_physio, spec_combined)  # Set factor levels for proper ordering spec_df$NoiseType <- factor(spec_df$NoiseType,                             levels = c(\"White Noise\", \"ARMA Noise\",                                       \"Drift Component\", \"Physiological Noise\",                                       \"Combined Noise\"))  # Create better drift visualization # First, generate a longer drift signal to better resolve low frequencies n_long <- 1024 time_long <- seq(0, (n_long - 1) * TR, by = TR) drift_long <- drift_amplitude * sin(2 * pi * drift_freq * time_long) spec_drift_long <- calculate_spectrum(drift_long, TR) spec_drift_long$NoiseType <- \"Drift Component (High Resolution)\"  # Plot Power Spectra in regular scale to show true spectral shape ggplot() +   # Regular components   geom_line(data = spec_df, aes(x = Frequency, y = Power, color = NoiseType)) +   # Add high-resolution drift component   geom_line(data = subset(spec_drift_long, Frequency <= 0.05),             aes(x = Frequency, y = Power), color = \"darkgreen\", linetype = \"dashed\") +   theme_minimal() +   facet_wrap(~NoiseType, ncol = 1, scales = \"free_y\") +   theme(legend.position = \"none\") +   labs(title = \"Power Spectra of Different Noise Components\",        x = \"Frequency (Hz)\",        y = \"Power\") +   scale_color_brewer(palette = \"Set1\") +   coord_cartesian(xlim = c(0, 0.25))  # Limit to Nyquist frequency # Also plot with log scale to show all components together ggplot(spec_df, aes(x = Frequency, y = Power, color = NoiseType)) +   geom_line() +   theme_minimal() +   labs(title = \"Power Spectra of Different Noise Components (Log Scale)\",        x = \"Frequency (Hz)\",        y = \"Power (log scale)\") +   scale_y_log10() +  # Log scale to see all components   scale_color_brewer(palette = \"Set1\") +   theme(legend.position = \"top\") +   coord_cartesian(xlim = c(0, 0.25))  # Limit to Nyquist frequency # Special zoom-in plot to focus on drift component drift_freq_idx <- which.min(abs(spec_df$Frequency - drift_freq)) ggplot() +   geom_line(data = subset(spec_df, NoiseType == \"Drift Component\"),             aes(x = Frequency, y = Power), color = \"darkgreen\") +   geom_line(data = subset(spec_drift_long, Frequency <= 0.05),             aes(x = Frequency, y = Power), color = \"darkgreen\", linetype = \"dashed\") +   geom_vline(xintercept = drift_freq, linetype = \"dotted\", color = \"red\") +   theme_minimal() +   labs(title = \"Zoomed Power Spectrum of Drift Component\",        subtitle = paste(\"Expected peak at\", drift_freq, \"Hz\"),        x = \"Frequency (Hz)\",        y = \"Power\") +   coord_cartesian(xlim = c(0, 0.05))  # Zoom in on low frequencies"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_08_simulation.html","id":"creating-a-complete-dataset-with-signal-and-noise","dir":"Articles","previous_headings":"","what":"Creating a Complete Dataset with Signal and Noise","title":"","text":"simulate_simple_dataset function combines clean signals noise create complete fMRI dataset specified signal--noise ratio (SNR).     Statistics clean noisy signals different SNR levels visualization shows different SNR levels affect fMRI time series. lower SNR, noise dominates signal. SNR level, show: original clean signal (red line): true underlying BOLD response noisy signal (blue line): actually measured scanner Signal decomposition: Visualization signal, noise, combined signal relate SNR level SNR = 1.0, signal pattern remains clearly visible despite noise. SNR = 0.5, features signal obscured, SNR = 0.2, noise substantially masks underlying signal, making accurate detection challenging without proper statistical methods. function returns: - clean: simulated signals without noise - noisy: signals added noise - noise: simulated noise component - onsets: Trial onset times - conditions: Condition labels trial","code":"# Set seed for reproducibility set.seed(42)  # Simulate a dataset with 3 conditions and different SNR levels data_snr_1.0 <- simulate_simple_dataset(ncond = 3, TR = 2, snr = 1.0) data_snr_0.5 <- simulate_simple_dataset(ncond = 3, TR = 2, snr = 0.5) data_snr_0.2 <- simulate_simple_dataset(ncond = 3, TR = 2, snr = 0.2)  # Improved function to create data frame for plotting create_plot_df <- function(data, snr_label) {   time <- data$clean$mat[,1]      # Extract clean signals and noisy signals    # Instead of averaging, use the condition with the clearest signal pattern   # Usually the middle column has the most distinct pattern   best_column <- which.max(apply(data$clean$mat[,-1], 2, function(x) max(x) - min(x)))   clean_signal <- data$clean$mat[, best_column + 1]  # +1 because column 1 is time   noisy_signal <- data$noisy[, best_column + 1]      # Corresponding noisy signal      df <- data.frame(     Time = time,     Clean = clean_signal,     Noisy = noisy_signal,     SNR = snr_label   )      return(df) }  # Combine data for different SNR values plot_df <- rbind(   create_plot_df(data_snr_1.0, \"SNR = 1.0\"),   create_plot_df(data_snr_0.5, \"SNR = 0.5\"),   create_plot_df(data_snr_0.2, \"SNR = 0.2\") )  # Convert to long format plot_df_long <- tidyr::pivot_longer(plot_df,                                      cols = -c(Time, SNR),                                     names_to = \"Type\",                                      values_to = \"Signal\")  # First approach: Overlay clean and noisy signals ggplot(plot_df_long, aes(x = Time, y = Signal, color = Type)) +   geom_line() +   facet_wrap(~SNR, ncol = 1) +   theme_minimal() +   labs(title = \"Clean vs. Noisy Signals at Different SNR Levels\",        subtitle = \"Single condition shown for clarity\",        x = \"Time (seconds)\",        y = \"Signal\",        color = \"Signal Type\") +   scale_color_manual(values = c(\"Clean\" = \"darkred\", \"Noisy\" = \"steelblue\")) +   theme(legend.position = \"top\") # Second approach: Plot signal+noise and then just signal below it # Create custom panel plots for each SNR plot_faceted <- function(df, snr_value) {   df_subset <- subset(df, SNR == snr_value)      # Calculate the noise component   noise <- df_subset$Noisy - df_subset$Clean      # Create a data frame for the decomposition plot   decomp_df <- data.frame(     Time = rep(df_subset$Time, 3),     Component = factor(rep(c(\"Signal+Noise\", \"Signal\", \"Noise\"), each = length(df_subset$Time)),                       levels = c(\"Signal+Noise\", \"Signal\", \"Noise\")),     Value = c(df_subset$Noisy, df_subset$Clean, noise)   )      # Plot with custom y-axis ranges   ggplot(decomp_df, aes(x = Time, y = Value, color = Component)) +     geom_line() +     facet_wrap(~Component, ncol = 1, scales = \"free_y\") +     theme_minimal() +     labs(title = paste(\"Signal Decomposition at\", snr_value),          x = \"Time (seconds)\",          y = \"Amplitude\") +     scale_color_manual(values = c(\"Signal+Noise\" = \"steelblue\",                                   \"Signal\" = \"darkred\",                                   \"Noise\" = \"darkgreen\")) +     theme(legend.position = \"none\") }  # Create each SNR plot p1 <- plot_faceted(plot_df, \"SNR = 1.0\") p2 <- plot_faceted(plot_df, \"SNR = 0.5\") p3 <- plot_faceted(plot_df, \"SNR = 0.2\")  # Display plots in sequence p1 p2 p3 # Calculate statistics (using standard R to avoid pipe operator issues) snr_stats_list <- list() for (snr_val in unique(plot_df_long$SNR)) {   for (type_val in unique(plot_df_long$Type)) {     subset_data <- plot_df_long[plot_df_long$SNR == snr_val & plot_df_long$Type == type_val, ]     snr_stats_list[[length(snr_stats_list) + 1]] <- data.frame(       SNR = snr_val,       Type = type_val,       Mean = mean(subset_data$Signal),       SD = sd(subset_data$Signal),       Range = max(subset_data$Signal) - min(subset_data$Signal)     )   } } snr_stats <- do.call(rbind, snr_stats_list)  # Print the statistics knitr::kable(snr_stats, caption = \"Statistics of clean and noisy signals at different SNR levels\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_08_simulation.html","id":"simulating-matrix-time-series-with-column-specific-variation","dir":"Articles","previous_headings":"","what":"Simulating Matrix Time Series with Column-Specific Variation","title":"","text":"advanced simulation function, simulate_fmri_matrix, generates multiple time series (columns) share event timing column-specific variations amplitudes durations. particularly useful simulating multiple voxels regions related slightly different response profiles.    function particularly powerful simulating multiple related time series : - Shared event timing individual variation : - Amplitude (per event, per column) - Duration (per event, per column) - Independent noise generation column - Complex output including: - Time series matrix - Amplitude duration matrices - HRF noise parameter information","code":"# Simulate 5 voxels (columns) with shared event timing # but variation in amplitudes and durations sim_matrix <- simulate_fmri_matrix(   n = 5,                  # 5 voxels/regions   total_time = 200,       # 200 seconds of scan time   TR = 2,                 # TR = 2 seconds   n_events = 10,          # 10 events   amplitudes = 1,         # Base amplitude = 1   amplitude_sd = 0.3,     # Amplitude variability   durations = 2,          # Base duration = 2 seconds   duration_sd = 0.5,      # Duration variability   noise_type = \"ar1\",     # AR(1) noise   noise_sd = 0.5          # Noise standard deviation )  # Extract the time series data ts_data <- sim_matrix$time_series matrix_data <- ts_data$datamat  # Create a tidy data frame for plotting time_points <- seq(0, by = 2, length.out = nrow(matrix_data)) plot_data <- data.frame(Time = time_points)  for(i in 1:ncol(matrix_data)) {   plot_data[[paste0(\"Voxel\", i)]] <- matrix_data[, i] }  plot_data_long <- tidyr::pivot_longer(   plot_data,    cols = starts_with(\"Voxel\"),    names_to = \"Voxel\",    values_to = \"Signal\" )  # Plot all time series ggplot(plot_data_long, aes(x = Time, y = Signal, color = Voxel)) +   geom_line(alpha = 0.8) +   theme_minimal() +   labs(title = \"Multiple Simulated Time Series with Column-Specific Variation\",        x = \"Time (seconds)\",        y = \"Signal\",        color = \"Voxel\") +   scale_color_brewer(palette = \"Set2\") # Plot the amplitude and duration matrices to visualize trial-by-trial variations amp_df <- as.data.frame(sim_matrix$ampmat) colnames(amp_df) <- paste0(\"Voxel\", 1:ncol(amp_df)) amp_df$Event <- 1:nrow(amp_df)  dur_df <- as.data.frame(sim_matrix$durmat) colnames(dur_df) <- paste0(\"Voxel\", 1:ncol(dur_df)) dur_df$Event <- 1:nrow(dur_df)  # Transform to long format amp_long <- tidyr::pivot_longer(   amp_df,    cols = starts_with(\"Voxel\"),    names_to = \"Voxel\",    values_to = \"Amplitude\" )  dur_long <- tidyr::pivot_longer(   dur_df,    cols = starts_with(\"Voxel\"),    names_to = \"Voxel\",    values_to = \"Duration\" )  # Plot amplitude variation across voxels ggplot(amp_long, aes(x = Event, y = Amplitude, color = Voxel, group = Voxel)) +   geom_line() +   geom_point() +   theme_minimal() +   labs(title = \"Amplitude Variation Across Events and Voxels\",        x = \"Event Number\",        y = \"Amplitude\",        color = \"Voxel\") +   scale_color_brewer(palette = \"Set2\") # Plot duration variation across voxels ggplot(dur_long, aes(x = Event, y = Duration, color = Voxel, group = Voxel)) +   geom_line() +   geom_point() +   theme_minimal() +   labs(title = \"Duration Variation Across Events and Voxels\",        x = \"Event Number\",        y = \"Duration (seconds)\",        color = \"Voxel\") +   scale_color_brewer(palette = \"Set2\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_08_simulation.html","id":"summary-and-comparison","dir":"Articles","previous_headings":"","what":"Summary and Comparison","title":"","text":"four simulation functions fmrireg serve different purposes offer increasing levels complexity: simulate_bold_signal: Generate clean BOLD signals multiple conditions simulate_noise_vector: Create realistic fMRI noise temporal structure simulate_simple_dataset: Combine signal noise specific SNR simulate_fmri_matrix: Create multiple time series trial--trial, column-specific parameter variation Choose appropriate function based simulation needs: - basic signal generation: use simulate_bold_signal - realistic noise: use simulate_noise_vector - complete dataset controlled SNR: use simulate_simple_dataset - simulating multiple voxels/regions shared timing response variation: use simulate_fmri_matrix functions provide powerful toolkit method development, validation, teaching fMRI analysis concepts realistic simulations.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"introduction-to-fmri-linear-models","dir":"Articles","previous_headings":"","what":"Introduction to fMRI Linear Models","title":"","text":"Statistical analysis fMRI data typically involves fitting linear model voxel’s time series. approach, often called General Linear Model (GLM), estimates much experimental condition contributes observed signal. fmrireg package provides flexible framework : Modeling hemodynamic response experimental stimuli Accounting baseline trends noise Estimating condition-specific effects Computing contrasts conditions Testing statistical hypotheses brain activity Thread usage internal routines can adjusted globally. Set options(fmrireg.num_threads = <n>) environment variable FMRIREG_NUM_THREADS loading package control many threads RcppParallel uses. vignette demonstrates conduct complete linear model analysis using fmrireg package, data simulation statistical inference.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"simulating-a-dataset-for-analysis","dir":"Articles","previous_headings":"","what":"Simulating a Dataset for Analysis","title":"","text":"First, let’s create realistic fMRI dataset known parameters. ’ll simulate simple experiment two conditions different amplitudes. First rows experimental design  Now experimental design, let’s simulate fMRI time series. ’ll create signals condition different amplitudes, add noise, combine dataset.  simulated dataset now contains: Condition-specific signals known amplitudes (1.0 2.0) Realistic noise temporal autocorrelation, drift, physiological components Multiple “voxels” varying signal strengths complete event table condition labels onset times","code":"# Create an experimental design with two conditions # Condition 1: 10 events with amplitude 1.0 # Condition 2: 10 events with amplitude 2.0  # Define parameters TR <- 2                  # Repetition time (2 seconds) run_length <- 200        # 200 timepoints per run = 400 seconds nruns <- 1               # Number of runs  # Create an event table run_id <- rep(1, 20) condition <- factor(rep(c(\"condition1\", \"condition2\"), each = 10)) onset_times <- sort(runif(20, min = 10, max = 380))  # Random onsets between 10s and 380s  event_table <- data.frame(   run = run_id,   onset = onset_times,   condition = condition )  # Display the experiment design kable(head(event_table), caption = \"First few rows of the experimental design\") # Create a sampling frame sframe <- sampling_frame(blocklens = run_length, TR = TR)  # Visualize the experimental design event_df <- data.frame(   time = seq(0, (run_length-1) * TR, by = TR),   condition1 = rep(0, run_length),   condition2 = rep(0, run_length) )  # Mark event onsets in the timeline for (i in 1:nrow(event_table)) {   timepoint <- which.min(abs(event_df$time - event_table$onset[i]))   if (event_table$condition[i] == \"condition1\") {     event_df$condition1[timepoint] <- 1   } else {     event_df$condition2[timepoint] <- 1   } }  # Convert to long format for plotting event_long <- event_df %>%   pivot_longer(cols = -time, names_to = \"condition\", values_to = \"onset\")  # Plot the experimental design ggplot(event_long, aes(x = time, y = onset, color = condition)) +   geom_segment(aes(xend = time, yend = 0), linewidth = 1) +   geom_point(size = 3) +   theme_minimal(base_size = 14) +   theme(legend.position = \"top\",         text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16)) +   labs(title = \"Experimental Design with Event Onsets\",        x = \"Time (seconds)\",        y = \"Event\") +   scale_color_brewer(palette = \"Set1\") # Simulate the true BOLD signals for each condition # First, convert our events to global indices global_onsets <- global_onsets(sframe, event_table$onset, blockids(sframe)[event_table$run])  # Create regressors for each condition condition1_indices <- which(event_table$condition == \"condition1\") condition2_indices <- which(event_table$condition == \"condition2\")  reg1 <- regressor(global_onsets[condition1_indices], hrf = fmrihrf::HRF_SPMG1, amplitude = 1.0) reg2 <- regressor(global_onsets[condition2_indices], hrf = fmrihrf::HRF_SPMG1, amplitude = 2.0)  # Sample time points time_points <- samples(sframe, global = TRUE)  # Evaluate regressors at each time point signal1 <- evaluate(reg1, time_points) signal2 <- evaluate(reg2, time_points)  # Combine signals (this is the \"true\" signal without noise) true_signal <- signal1 + signal2  # Create noise with temporal autocorrelation and drift noise <- simulate_noise_vector(   n = length(time_points),   TR = TR,   ar = c(0.3),         # AR coefficient (temporal autocorrelation)   ma = c(0.2),         # MA coefficient   drift_freq = 1/128,  # Slow drift   drift_amplitude = 1, # Moderate drift amplitude   physio = TRUE,       # Include physiological noise   sd = 0.5             # Noise standard deviation )  # Create the observed signal by adding noise observed_signal <- true_signal + noise  # Create a data frame for visualization signal_df <- data.frame(   time = time_points,   true_signal = true_signal,   noise = noise,   observed_signal = observed_signal,   condition1 = signal1,   condition2 = signal2 )  # Create a matrix dataset for the model fitting simulated_data <- matrix(observed_signal, ncol = 1) dataset <- fmridataset::matrix_dataset(   datamat = cbind(simulated_data, simulated_data * 0.8, simulated_data * 0.6), # Three \"voxels\" with varied signal strength   TR = TR,   run_length = run_length,   event_table = event_table )  # Visualize the signals signal_long <- signal_df %>%   select(time, condition1, condition2, true_signal, noise, observed_signal) %>%   pivot_longer(cols = -time, names_to = \"component\", values_to = \"signal\")  # Set the factor levels for better plotting order signal_long$component <- factor(signal_long$component,                                 levels = c(\"condition1\", \"condition2\", \"true_signal\", \"noise\", \"observed_signal\"))  # Plot signals ggplot(signal_long, aes(x = time, y = signal, color = component)) +   geom_line() +   facet_wrap(~component, ncol = 1, scales = \"free_y\") +   theme_minimal(base_size = 14) +   theme(legend.position = \"none\",         text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16),         strip.text = element_text(size = 14)) +   labs(title = \"Simulated fMRI Time Series Components\",        x = \"Time (seconds)\",        y = \"Signal Amplitude\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"fitting-a-linear-model","dir":"Articles","previous_headings":"","what":"Fitting a Linear Model","title":"","text":"Now can fit linear model simulated data using fmri_lm function. need specify: formula describing experimental effects block structure data dataset","code":"# Fit a linear model model <- fmri_lm(   formula = onset ~ hrf(condition),  # Model experimental effects   block = ~ run,                     # Block structure   dataset = dataset,                 # Our simulated dataset   strategy = \"chunkwise\",            # Processing strategy   nchunks = 1                        # Process all voxels at once )  # Print a summary of the model model ##  ## ================================== ##         fmri_lm_result           ## ================================== ##  ## Model formula: ##   ~ onset hrf(condition)  ##  ## Fitting strategy:  chunkwise  ##  ## Baseline parameters:  4  ## Design parameters:    2  ## Contrasts:           None ##  ## Use coef(...), stats(...), etc. to extract results. ##  ##"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"accounting-for-temporal-autocorrelation","dir":"Articles","previous_headings":"Fitting a Linear Model","what":"Accounting for Temporal Autocorrelation","title":"","text":"simulated noise contains AR(1) structure. can ask fmri_lm apply fast AR(1) prewhitening step setting cor_struct = \"ar1\". estimates AR coefficient initial OLS fit, whitens data design matrix, refits GLM. cor_struct argument also accepts \"arp\" higher-order autoregressive models. setting models AR coefficients (moving-average terms).","code":"model_ar1 <- fmri_lm(   formula = onset ~ hrf(condition),   block   = ~ run,   dataset = dataset,   strategy = \"chunkwise\",   nchunks = 1,   cor_struct = \"ar1\",   cor_iter = 1 )  # Compare standard errors (first few voxels) se_ols <- standard_error(model) se_ar1 <- standard_error(model_ar1) head(cbind(OLS = se_ols[[1]], AR1 = se_ar1[[1]])) ##             OLS        AR1 ## [1,] 0.11620215 0.11620215 ## [2,] 0.09296172 0.09296172 ## [3,] 0.06972129 0.06972129"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"handling-outliers-with-row-wise-robust-fitting","dir":"Articles","previous_headings":"Fitting a Linear Model","what":"Handling Outliers with Row-Wise Robust Fitting","title":"","text":"Real fMRI runs sometimes contain entire time points corrupted motion scanner artifacts. fmri_lm function can mitigate impact enabling row-wise robust weighting. robust = TRUE, Iteratively Reweighted Least Squares loop -weights frames large residuals. robust_psi argument selects weighting function robust_max_iter controls number iterations. Robust fitting guards outlier time points correct voxel-specific spikes. P-values rely robust residual scale interpreted approximate.","code":"# Note: Robust fitting example - requires bug fix in chunkwise_lm_slow model_robust <- fmri_lm(   formula = onset ~ hrf(condition),   block   = ~ run,   dataset = dataset,   strategy = \"chunkwise\",   nchunks = 1,   robust = TRUE,   robust_psi = \"huber\",   robust_max_iter = 2 )  se_robust <- standard_error(model_robust) head(cbind(OLS = se_ols[[1]], Robust = se_robust[[1]]))"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"extracting-model-results","dir":"Articles","previous_headings":"","what":"Extracting Model Results","title":"","text":"Let’s extract visualize results linear model.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"coefficient-estimates","dir":"Articles","previous_headings":"Extracting Model Results","what":"1. Coefficient Estimates","title":"","text":"Coefficient estimates condition voxel  bar plot shows estimated coefficients condition across three simulated voxels. Note : Condition2 approximately twice amplitude Condition1, matches simulation parameters coefficient magnitude decreases across voxels, consistent multiplication factors (1.0, 0.8, 0.6)","code":"# Extract coefficient estimates beta_estimates <- coef(model) kable(beta_estimates, caption = \"Coefficient estimates for each condition and voxel\") # Reshape for plotting (works with both approaches) beta_long <- as.data.frame(beta_estimates) %>%   mutate(voxel = row_number()) %>%   pivot_longer(cols = -voxel, names_to = \"condition\", values_to = \"estimate\")  # Plot coefficient estimates ggplot(beta_long, aes(x = condition, y = estimate, fill = condition)) +   geom_bar(stat = \"identity\") +   facet_wrap(~voxel, ncol = 3, scales = \"free_y\") +   theme_minimal(base_size = 14) +   theme(legend.position = \"top\",         text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16),         strip.text = element_text(size = 14),         axis.text.x = element_text(angle = 45, hjust = 1)) +   labs(title = \"Estimated Coefficients by Condition and Voxel\",        x = \"Condition\",        y = \"Coefficient Estimate\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"t-statistics-and-p-values","dir":"Articles","previous_headings":"Extracting Model Results","what":"2. T-Statistics and P-Values","title":"","text":"t-statistics quantify reliability estimated effects. Higher absolute t-values indicate reliable estimates. simulation, conditions voxels show significant activity (p < 0.05).","code":"# Extract t-statistics and standard errors t_stats <- stats(model) std_errors <- standard_error(model) # Note: Statistical results visualization - requires proper stats() method implementation # Display the statistical results kable(t_stats, caption = \"T-statistics for each condition and voxel\") kable(std_errors, caption = \"Standard errors for each condition and voxel\")  # The following code would combine and visualize statistical results: # result_summary <- data.frame( #   voxel = rep(1:nrow(beta_estimates), ncol(beta_estimates)), #   condition = rep(colnames(beta_estimates), each = nrow(beta_estimates)), #   estimate = as.vector(as.matrix(beta_estimates)), #   t_statistic = as.vector(t_stats), #   std_error = as.vector(std_errors) # ) # result_summary$p_value <- 2 * pt(-abs(result_summary$t_statistic), df = run_length - 2) # ... visualization code ..."},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"contrasts-between-conditions","dir":"Articles","previous_headings":"Extracting Model Results","what":"3. Contrasts Between Conditions","title":"","text":"key advantage GLM approach ability directly compare conditions using contrasts. contrast results show Condition2 consistently elicits significantly stronger activation Condition1 across voxels, matches simulation parameters (Condition2 twice amplitude Condition1).","code":"# Note: Contrast analysis example - requires bug fix in event_model parsing # Define a contrast specification for comparing condition2 vs condition1 con_spec <- pair_contrast(~ condition == \"condition2\", ~ condition == \"condition1\", name = \"cond2_minus_cond1\")  # Define a contrast model using the specified contrast in hrf() contrast_model <- fmri_lm(   formula = onset ~ hrf(condition, contrasts = con_spec),   block = ~ run,   dataset = dataset,   strategy = \"chunkwise\",   nchunks = 1 )  # Extract contrast results contrast_estimates <- coef(contrast_model) contrast_tstats <- stats(contrast_model) contrast_stderr <- standard_error(contrast_model)  # Combine results into a data frame for display contrast_results <- data.frame(   voxel = 1:nrow(contrast_estimates),   estimate = contrast_estimates[[1]],   t_statistic = contrast_tstats[[1]],   std_error = contrast_stderr[[1]] )  # Calculate p-values and significance contrast_results$p_value <- 2 * pt(-abs(contrast_results$t_statistic), df = run_length - 2) contrast_results$significant <- contrast_results$p_value < 0.05 # Display contrast results kable(contrast_results, caption = \"Contrast results: condition2 - condition1\", digits = 4)  # Visualize the contrast ggplot(contrast_results, aes(x = as.factor(voxel), y = estimate, fill = significant)) +   geom_bar(stat = \"identity\") +   theme_minimal(base_size = 14) +   theme(text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16),         plot.subtitle = element_text(size = 15)) +   labs(title = \"Condition2 - Condition1 Contrast\",        subtitle = \"Positive values indicate stronger activation for Condition2\",        x = \"Voxel\",        y = \"Contrast Estimate\") +   scale_fill_manual(values = c(\"FALSE\" = \"gray\", \"TRUE\" = \"red\"))"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"fitted-hrf-curves","dir":"Articles","previous_headings":"","what":"Fitted HRF Curves","title":"","text":"Another useful visualization fitted hemodynamic response condition. shows estimated BOLD response time.  fitted HRF curves show temporal profile BOLD response condition. can observe: peak response around 5-6 seconds post-stimulus stronger response Condition2 compared Condition1 decreasing response amplitude across voxels","code":"# Extract fitted HRF curves from the fitted model fitted_hrfs <- fitted_hrf(model, sample_at = seq(0, 20, by = 0.5))  # Extract the design info and reorganize for plotting hrf_data <- lapply(names(fitted_hrfs), function(term) {   hrf_info <- fitted_hrfs[[term]]   design_info <- hrf_info$design   pred_values <- hrf_info$pred      # Combine with design info   result <- cbind(design_info, pred_values)   result$term <- term   return(result) })  # Combine all HRF data hrf_df <- do.call(rbind, hrf_data)  # Identify predicted-value columns by excluding known design columns design_cols <- union(colnames(fitted_hrfs[[1]]$design), c(\"term\")) pred_cols <- setdiff(colnames(hrf_df), design_cols) if (length(pred_cols) == 0) {   # Fallback: match common default names for matrix columns   pred_cols <- grep(\"^(V|X)?[0-9]+$|^pred.*$\", colnames(hrf_df), value = TRUE) }  # Create a data frame in long format for plotting hrf_long <- hrf_df %>%   tidyr::pivot_longer(     cols = all_of(pred_cols),     names_to = \"voxel_id\",     values_to = \"response\"   ) %>%   mutate(     voxel_index = suppressWarnings(as.integer(gsub(\"^[^0-9]*\", \"\", voxel_id))),     voxel = paste0(\"voxel\", voxel_index)   )  # Plot the fitted HRF curves for each condition and voxel ggplot(hrf_long, aes(x = time, y = response, color = condition)) +   geom_line() +   facet_grid(voxel ~ term) +   theme_minimal(base_size = 14) +   theme(text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16),         strip.text = element_text(size = 14)) +   labs(title = \"Fitted Hemodynamic Response Functions\",        x = \"Time (seconds)\",        y = \"BOLD Response\",        color = \"Condition\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"comparing-models-with-different-hrf-bases","dir":"Articles","previous_headings":"","what":"Comparing Models with Different HRF Bases","title":"","text":"choice hemodynamic response function can impact model fit. Let’s compare different HRF options. model comparison shows: R-Squared: proportion variance explained model. Higher values indicate better fit. AIC (Akaike Information Criterion): measure model quality balances goodness fit model complexity. Lower values indicate better models. case, canonical (SPM) model actually provides best fit according AIC, showing lowest AIC values across voxels. interesting result since used HRF (SPMG1) generate data, confirming model selection correctly identifies true underlying signal generator. B-spline model, despite flexibility capture variations signal, penalized AIC additional complexity. demonstrates model selection criteria like AIC can help identify parsimonious model explains data. canonical SPM model performs well due accurate representation hemodynamic response shape simulated data, making optimal choice particular dataset. highlights importance selecting appropriate HRF basis function analyzing fMRI data.","code":"# Note: HRF comparison example - requires fix in model fitting # Fit models with different HRF bases model_canonical <- fmri_lm(   formula = onset ~ hrf(condition, basis = \"spmg1\"),   block = ~ run,   dataset = dataset,   strategy = \"chunkwise\",   nchunks = 1 )  model_gaussian <- fmri_lm(   formula = onset ~ hrf(condition, basis = \"gaussian\"),   block = ~ run,   dataset = dataset,   strategy = \"chunkwise\",   nchunks = 1 )  model_bspline <- fmri_lm(   formula = onset ~ hrf(condition, basis = \"bspline\", nbasis = 5),   block = ~ run,   dataset = dataset,   strategy = \"chunkwise\",   nchunks = 1 )  # Function to extract model fit statistics extract_model_stats <- function(model, model_name, dataset) {   # Get observed data   observed_data <- get_data_matrix(dataset)      # Get design matrix (ensure it's a numeric matrix)   design_mat <- as.matrix(design_matrix(model$model))      # Get estimated coefficients (include baseline)   # Get all coefficients including baseline   betas <- as.matrix(coef(model))      # Calculate fitted values   fitted_vals <- design_mat %*% t(betas)      # Calculate residuals   resids <- observed_data - fitted_vals      # Calculate sum of squared residuals   ssr <- colSums(resids^2)      # Calculate R-squared   tss <- apply(observed_data, 2, function(y) sum((y - mean(y))^2))   r_squared <- 1 - ssr/tss      # Calculate AIC   n <- nrow(observed_data)   p <- ncol(design_mat)   aic <- n * log(ssr/n) + 2 * p      # Return results   data.frame(     model = model_name,     voxel = 1:ncol(observed_data),     r_squared = r_squared,     aic = aic,     ssr = ssr   ) }  # Extract statistics for each model stats_canonical <- extract_model_stats(model_canonical, \"canonical_spm\", dataset) stats_gaussian <- extract_model_stats(model_gaussian, \"gaussian\", dataset) stats_bspline <- extract_model_stats(model_bspline, \"bspline_n5\", dataset)  # Combine results model_comparison <- rbind(stats_canonical, stats_gaussian, stats_bspline)  # Display model comparison kable(model_comparison, caption = \"Model comparison statistics\", digits = 4)  # Reshape for plotting model_comparison_long <- model_comparison %>%   pivot_longer(cols = c(r_squared, aic, ssr), names_to = \"metric\", values_to = \"value\")  # Plot comparison (separate plots for different metrics) ggplot(subset(model_comparison_long, metric == \"r_squared\"),         aes(x = model, y = value, fill = model)) +   geom_bar(stat = \"identity\") +   facet_wrap(~voxel, ncol = 3) +   theme_minimal(base_size = 14) +   theme(text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16),         strip.text = element_text(size = 14),         axis.text.x = element_text(angle = 45, hjust = 1),         legend.position = \"none\") +   labs(title = \"Model Comparison: R-Squared\",        x = \"HRF Model\",        y = \"R-Squared\") # Note: AIC comparison visualization - requires model_comparison_long ggplot(subset(model_comparison_long, metric == \"aic\"),         aes(x = model, y = value, fill = model)) +   geom_bar(stat = \"identity\") +   facet_wrap(~voxel, ncol = 3) +   theme_minimal(base_size = 14) +   theme(text = element_text(size = 14),         axis.title = element_text(size = 15),         plot.title = element_text(size = 16),         strip.text = element_text(size = 14),         axis.text.x = element_text(angle = 45, hjust = 1),         legend.position = \"none\") +   labs(title = \"Model Comparison: AIC (Lower is Better)\",        x = \"HRF Model\",        y = \"AIC\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"","text":"vignette demonstrated complete workflow fMRI linear model analysis using fmrireg package: Creating/simulating dataset realistic signal noise properties Fitting linear models different HRF options Extracting visualizing model coefficients statistics Computing testing contrasts conditions Comparing model performance using goodness--fit metrics Diagnosing model quality residual analysis fmri_lm function provides powerful flexible framework analyzing fMRI data, features handling temporal autocorrelation, modeling different HRF shapes, computing contrasts conditions. advanced analyses, might consider: - Adding nuisance regressors model physiological noise, motion, confounds - Using complex experimental designs multiple factors - Implementing spatial smoothing preprocessing steps - Extending GLM methods like psychophysiological interactions (PPI) finite impulse response (FIR) models","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"","text":"Contrasts Hypothesis Tests Group Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"introduction-linking-data-and-design","dir":"Articles","previous_headings":"","what":"Introduction: Linking Data and Design","title":"","text":"Effective fMRI analysis requires associating measured brain activity (imaging data) crucial metadata, including: Temporal Structure: scan acquired (TR) scans grouped runs. Spatial Structure: brain locations (voxels) included analysis (mask). Experimental Design: Timing properties experimental events conditions. fmrireg package uses several dataset objects encapsulate information, providing consistent input format modeling functions like event_model, baseline_model, fmri_lm, estimate_betas. vignette describes main dataset classes create .","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"the-sampling_frame","dir":"Articles","previous_headings":"","what":"The sampling_frame","title":"","text":"diving datasets, recall sampling_frame object (introduced Overview detailed vignettes). defines fundamental temporal structure shared dataset types: blocklens: vector specifying number scans (time points) run. TR: repetition time (time scans) seconds. Dataset objects internally create utilize sampling_frame based provided run lengths TR.","code":"sframe_example <- sampling_frame(blocklens = c(150, 160), TR = 2.0) print(sframe_example) #> Sampling Frame #> ============== #>  #> Structure: #>   2 blocks #>   Total scans: 310 #>  #> Timing: #>   TR: 2 s #>   Precision: 0.1 s #>  #> Duration: #>   Total time: 620.0 s"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"overview-of-dataset-classes","dir":"Articles","previous_headings":"","what":"Overview of Dataset Classes","title":"","text":"fmrireg offers different dataset classes depending data stored: fmri_mem_dataset: volumetric fMRI data already loaded R memory (NeuroVec objects). fmri_file_dataset: volumetric fMRI data stored image files (e.g., NIfTI) disk. matrix_dataset: fMRI data represented standard R matrix (time points x voxels/components). latent_dataset: dimension-reduced data (e.g., PCA/ICA components), typically requiring fmristore package. inherit base fmri_dataset class.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"in-memory-volumetric-data-fmri_mem_dataset","dir":"Articles","previous_headings":"","what":"In-Memory Volumetric Data (fmri_mem_dataset)","title":"","text":"Use fMRI runs loaded neuroim2::NeuroVec objects R session. Key Arguments: scans: list NeuroVec objects, one run. mask: neuroim2::NeuroVol neuroim2::LogicalNeuroVol object representing brain mask. TR: Repetition time (seconds). run_length (Optional): Vector run lengths; omitted, inferred dimensions NeuroVec objects scans. event_table (Optional): data.frame containing experimental design information.","code":"# Create minimal example data (2 runs) d <- c(5, 5, 5, 20) # Small dimensions for example mask_vol <- neuroim2::LogicalNeuroVol(array(TRUE, d[1:3]), neuroim2::NeuroSpace(d[1:3]))  scan1 <- neuroim2::NeuroVec(array(rnorm(prod(d)), d), neuroim2::NeuroSpace(d)) scan2 <- neuroim2::NeuroVec(array(rnorm(prod(d)), d), neuroim2::NeuroSpace(d))  # Example event table events_df <- data.frame(   onset = c(5, 15, 5, 15),    condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   run = c(1, 1, 2, 2) )  # Create the dataset object mem_dset <- fmri_mem_dataset(scans = list(scan1, scan2),                               mask = mask_vol,                               TR = 2.0,                               # run_length automatically inferred as c(20, 20)                              event_table = events_df)  print(mem_dset) #>  #> === fMRI Dataset === #>  #> ** Dimensions: #>   - Timepoints: 40  #>   - Runs: 2   #>   - Objects: 2 pre-loaded NeuroVec object(s) #>   - Voxels in mask: (lazy) #>  #> ** Temporal Structure: #>   - TR: 2 seconds #>   - Run lengths: 20, 20  #>  #> ** Event Table: #>   - Rows: 4  #>   - Variables: onset, condition, run  #>   - First few events: #>   onset condition run #> 1     5         A   1 #> 2    15         B   1 #> 3     5         A   2 # Access components print(mem_dset$sampling_frame) #> Sampling Frame #> ============== #>  #> Structure: #>   2 blocks #>   Total scans: 40 #>  #> Timing: #>   TR: 2 s #>   Precision: 0.1 s #>  #> Duration: #>   Total time: 80.0 s"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"file-based-volumetric-data-fmri_file_dataset","dir":"Articles","previous_headings":"","what":"File-Based Volumetric Data (fmri_file_dataset)","title":"","text":"often practical option typical fMRI analyses data resides files. Key Arguments: scans: character vector file paths 4D fMRI image files (e.g., .nii.gz), one path per run. mask: character string giving file path 3D mask image file. TR: Repetition time (seconds). run_length: numeric vector specifying number volumes (time points) run file listed scans. event_table (Optional): data.frame experimental design info. base_path (Optional): path prepend relative file paths scans mask. preload (Optional, Default: FALSE): TRUE, load mask scan data memory immediately. FALSE (recommended large data), data read accessed. mode (Optional): Storage mode neuroim2 reading data (e.g., “normal”, “mmap”). Using preload=FALSE memory-efficient required data segments read needed (e.g., model fitting).","code":"# --- Create Dummy Files (for illustration only) --- # In a real analysis, these files would already exist. tmp_dir <- tempdir() mask_filename <- \"mask.nii.gz\" scan1_filename <- \"run1.nii.gz\" scan2_filename <- \"run2.nii.gz\"  mask_file_full_path <- file.path(tmp_dir, mask_filename) scan1_file_full_path <- file.path(tmp_dir, scan1_filename) scan2_file_full_path <- file.path(tmp_dir, scan2_filename)  # Create small dummy mask and scans using neuroim2 functionality d <- c(5, 5, 5) # Mask dimensions d_run1 <- c(d, 20) # Run 1 dimensions (time=20) d_run2 <- c(d, 25) # Run 2 dimensions (time=25)  mask_vol_dummy <- neuroim2::NeuroVol(array(1, d), neuroim2::NeuroSpace(d)) scan1_dummy <- neuroim2::NeuroVec(array(rnorm(prod(d_run1)), d_run1), neuroim2::NeuroSpace(d_run1)) scan2_dummy <- neuroim2::NeuroVec(array(rnorm(prod(d_run2)), d_run2), neuroim2::NeuroSpace(d_run2))  # Ensure dummy files are written using their full paths neuroim2::write_vol(mask_vol_dummy, mask_file_full_path) neuroim2::write_vec(scan1_dummy, scan1_file_full_path) neuroim2::write_vec(scan2_dummy, scan2_file_full_path) # --- End Dummy File Creation ---  # Create the file-based dataset object # Pass only filenames to 'scans' and 'mask', and specify the directory in 'base_path' file_dset <- fmri_dataset(scans = c(scan1_filename, scan2_filename),                              mask = mask_filename,                              TR = 1.5,                              run_length = c(20, 25), # Must match time dim of files                             event_table = events_df,                              base_path = tmp_dir,    # Set base_path to the temp directory                             preload = FALSE) # Keep data on disk  # This print statement should now work print(file_dset) #>  #> === fMRI Dataset === #>  #> ** Dimensions: #>   - Timepoints: 45  #>   - Runs: 2   #>   - Backend: nifti_backend  #>   - Data dimensions: 45 x ? (timepoints x voxels) #>   - Voxels in mask: (lazy) #>  #> ** Temporal Structure: #>   - TR: 1.5 seconds #>   - Run lengths: 20, 25  #>  #> ** Event Table: #>   - Rows: 4  #>   - Variables: onset, condition, run  #>   - First few events: #> # A tibble: 3 × 3 #>   onset condition   run #>   <dbl> <fct>     <dbl> #> 1     5 A             1 #> 2    15 B             1 #> 3     5 A             2  # Clean up dummy files (optional, commented out for vignette) # file.remove(mask_file_full_path, scan1_file_full_path, scan2_file_full_path)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"matrix-data-matrix_dataset","dir":"Articles","previous_headings":"","what":"Matrix Data (matrix_dataset)","title":"","text":"Use fMRI data already represented 2D matrix rows time points columns voxels components (e.g., surface projection ROI averaging). Key Arguments: datamat: numeric matrix (time x features). TR: Repetition time (seconds). run_length: Vector specifying number rows (time points) belonging run. event_table (Optional): data.frame design info (must total number rows datamat). matrix_dataset, concept spatial mask implicit; columns provided datamat included.","code":"# Example matrix (100 time points, 50 features/voxels) # Two runs of 50 time points each time_points <- 100 features <- 50 run_len <- c(50, 50) example_matrix <- matrix(rnorm(time_points * features), time_points, features)  # Example event table for matrix data events_mat_df <- data.frame(   onset = c(seq(5, 45, by=10), seq(5, 45, by=10)),    condition = factor(rep(c(\"C\", \"D\"), 10)),   run = rep(1:2, each = 5) )  mat_dset <- matrix_dataset(datamat = example_matrix,                             TR = 2.5,                             run_length = run_len,                            event_table = events_mat_df)  print(mat_dset) #>  #> === fMRI Dataset === #>  #> ** Dimensions: #>   - Timepoints: 100  #>   - Runs: 2   #>   - Matrix: 100 x 50 (timepoints x voxels) #>   - Voxels in mask: (lazy) #>  #> ** Temporal Structure: #>   - TR: 2.5 seconds #>   - Run lengths: 50, 50  #>  #> ** Event Table: #>   - Rows: 20  #>   - Variables: onset, condition, run  #>   - First few events: #>   onset condition run #> 1     5         C   1 #> 2    15         D   1 #> 3    25         C   1 print(mat_dset$sampling_frame) #> Sampling Frame #> ============== #>  #> Structure: #>   2 blocks #>   Total scans: 100 #>  #> Timing: #>   TR: 2.5 s #>   Precision: 0.1 s #>  #> Duration: #>   Total time: 250.0 s"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"latent-data-latent_dataset","dir":"Articles","previous_headings":"","what":"Latent Data (latent_dataset)","title":"","text":"class designed data undergone dimensionality reduction (e.g., PCA, ICA). wraps LatentNeuroVec object, stores basis vectors (latent components time) loadings (spatial maps components). Creating using LatentNeuroVec objects typically requires fmristore package. Key Arguments: lvec: LatentNeuroVec object fmristore package. TR: Repetition time (seconds). run_length: Vector specifying run lengths (must sum time dimension lvec). event_table (Optional): Experimental design data.frame. dataset type essentially behaves like matrix_dataset matrix columns latent component time series.","code":"# Conceptual example (requires fmristore package and a LatentNeuroVec) # Assuming 'my_latent_neuro_vec' is a LatentNeuroVec object representing # 20 components over 300 time points (2 runs of 150)  # latent_dset <- latent_dataset(lvec = my_latent_neuro_vec,  #                              TR = 2.0,  #                              run_length = c(150, 150), #                              event_table = some_event_df) #  # print(latent_dset)"},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/a_10_dataset.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"","text":"Simulating fMRI Data fMRI Linear Model (GLM) created, dataset objects serve primary data input fmrireg’s modeling functions: event_model(..., sampling_frame = dset$sampling_frame) baseline_model(..., sframe = dset$sampling_frame) fmri_lm(model, dataset = dset) estimate_betas(..., dataset = dset) provide standardized way access data (get_data(dset)), masks (get_mask(dset)), timing information (blocklens(dset), blockids(dset)), regardless underlying storage format. Choosing appropriate dataset class depends data resides (memory, files) format (volumetric, matrix, latent).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"","text":"fmrireg package includes comprehensive set benchmark datasets designed testing evaluating HRF fitting, beta estimation, fMRI analysis methods. datasets provide known ground truth various challenging scenarios commonly encountered fMRI analysis. vignette demonstrates use benchmark datasets evaluate analysis methods.","code":"library(fmrireg) #>  #> Attaching package: 'fmrireg' #> The following object is masked from 'package:stats': #>  #>     convolve library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:fmrireg': #>  #>     group_data #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"available-benchmark-datasets","dir":"Articles","previous_headings":"","what":"Available Benchmark Datasets","title":"","text":"Let’s start exploring benchmark datasets available:","code":"# List all available datasets datasets_info <- list_benchmark_datasets() print(datasets_info) #>                                                         Dataset #> BM_Canonical_HighSNR                       BM_Canonical_HighSNR #> BM_Canonical_LowSNR                         BM_Canonical_LowSNR #> BM_HRF_Variability_AcrossVoxels BM_HRF_Variability_AcrossVoxels #> BM_Trial_Amplitude_Variability   BM_Trial_Amplitude_Variability #> BM_Complex_Realistic                       BM_Complex_Realistic #>                                                                                                                        Description #> BM_Canonical_HighSNR                                 Canonical HRF (SPMG1), high SNR, 3 conditions, fixed amplitudes per condition #> BM_Canonical_LowSNR                                   Canonical HRF (SPMG1), low SNR, 3 conditions, fixed amplitudes per condition #> BM_HRF_Variability_AcrossVoxels                                         HRF varies across voxel groups, 2 conditions, moderate SNR #> BM_Trial_Amplitude_Variability                              Single condition with significant trial-to-trial amplitude variability #> BM_Complex_Realistic            Complex realistic scenario: 3 HRF groups, 3 conditions, variable durations/amplitudes, AR(2) noise"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"loading-and-exploring-a-dataset","dir":"Articles","previous_headings":"","what":"Loading and Exploring a Dataset","title":"","text":"Let’s load high SNR canonical dataset explore structure:","code":"# Load the high SNR dataset data <- load_benchmark_dataset(\"BM_Canonical_HighSNR\")  # Get a summary of the dataset summary_info <- get_benchmark_summary(\"BM_Canonical_HighSNR\") print(summary_info$dimensions) #> $n_timepoints #> [1] 150 #>  #> $n_voxels #> [1] 100 #>  #> $n_events #> [1] 45 #>  #> $n_conditions #> [1] 3 print(summary_info$experimental_design) #> $conditions #> [1] \"Cond1\" \"Cond2\" \"Cond3\" #>  #> $events_per_condition #> $events_per_condition$Cond1 #> [1] 15 #>  #> $events_per_condition$Cond2 #> [1] 15 #>  #> $events_per_condition$Cond3 #> [1] 15 #>  #>  #> $TR #> [1] 2 #>  #> $total_time #> [1] 300 #>  #> $target_snr #> [1] 4"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"","text":"Group Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"examining-the-data-structure","dir":"Articles","previous_headings":"","what":"Examining the Data Structure","title":"","text":"benchmark dataset list. Key components include: description: text summary. Y_noisy: matrix noisy BOLD time series (time points x voxels). Y_clean: (available) BOLD signal without noise. event_onsets: Vector event start times. condition_labels: Vector condition names event. event_durations: Vector event durations. true_betas_condition: Ground truth beta values condition. true_hrf_parameters: Information HRF used simulation. TR, total_time, run_length: Scan parameters.","code":"# Look at the BOLD time series dimensions and event structure cat(\"Y_noisy BOLD data dimensions:\", dim(data$Y_noisy), \"\\n\") #> Y_noisy BOLD data dimensions: 150 100 cat(\"Number of events:\", length(data$event_onsets), \"\\n\") #> Number of events: 45 cat(\"Conditions:\", unique(data$condition_labels), \"\\n\") #> Conditions: Cond1 Cond2 Cond3 cat(\"Events per condition:\", table(data$condition_labels), \"\\n\") #> Events per condition: 15 15 15 cat(\"TR:\", data$TR, \"\\n\") #> TR: 2 cat(\"Run length:\", data$run_length, \"\\n\") #> Run length:"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"visualizing-the-data","dir":"Articles","previous_headings":"","what":"Visualizing the Data","title":"","text":"Let’s visualize aspects benchmark dataset:","code":"# Plot the first few voxels' time series n_timepoints <- nrow(data$Y_noisy) time_points <- seq(0, by = data$TR, length.out = n_timepoints)  # Create a data frame for plotting plot_data <- data.frame(   Time = rep(time_points, 3),   BOLD = c(data$Y_noisy[, 1], data$Y_noisy[, 2], data$Y_noisy[, 3]),   Voxel = rep(paste(\"Voxel\", 1:3), each = n_timepoints) )  # Add event markers event_data <- data.frame(   Time = data$event_onsets,   Condition = data$condition_labels )  ggplot(plot_data, aes(x = Time, y = BOLD)) +   geom_line() +   geom_vline(data = event_data, aes(xintercept = Time, color = Condition),               alpha = 0.7, linetype = \"dashed\") +   facet_wrap(~Voxel, scales = \"free_y\") +   labs(title = \"BOLD Time Series with Event Markers\",        x = \"Time (seconds)\", y = \"BOLD Signal\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"creating-design-matrices","dir":"Articles","previous_headings":"","what":"Creating Design Matrices","title":"","text":"One key features ability create design matrices different HRF assumptions:","code":"# Create design matrix with the true HRF (canonical) X_true <- create_design_matrix_from_benchmark(\"BM_Canonical_HighSNR\", fmrihrf::HRF_SPMG1)  # Create design matrix with a different HRF (e.g., a Gaussian HRF instead of canonical) X_wrong <- create_design_matrix_from_benchmark(\"BM_Canonical_HighSNR\", fmrihrf::HRF_GAUSSIAN)  cat(\"True HRF design matrix dimensions:\", dim(X_true), \"\\n\") #> True HRF design matrix dimensions: 150 4 cat(\"Alternative HRF design matrix dimensions:\", dim(X_wrong), \"\\n\") #> Alternative HRF design matrix dimensions: 150 4"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"method-evaluation-example","dir":"Articles","previous_headings":"","what":"Method Evaluation Example","title":"","text":"Let’s demonstrate evaluate simple method (OLS) benchmark dataset:","code":"# Fit ordinary least squares with the correct HRF betas_correct <- solve(t(X_true) %*% X_true) %*% t(X_true) %*% data$Y_noisy  # Fit OLS with the wrong HRF assumption betas_wrong <- solve(t(X_wrong) %*% X_wrong) %*% t(X_wrong) %*% data$Y_noisy  # Evaluate performance (remove intercept for comparison) performance_correct <- evaluate_method_performance(\"BM_Canonical_HighSNR\",                                                     betas_correct[-1, ],                                                     \"OLS_Correct_HRF\")  performance_wrong <- evaluate_method_performance(\"BM_Canonical_HighSNR\",                                                   betas_wrong[-1, ],                                                   \"OLS_Wrong_HRF\")  # Compare results cat(\"Correct HRF - Overall correlation:\", round(performance_correct$overall_metrics$correlation, 3), \"\\n\") #> Correct HRF - Overall correlation: 0.989 cat(\"Wrong HRF - Overall correlation:\", round(performance_wrong$overall_metrics$correlation, 3), \"\\n\") #> Wrong HRF - Overall correlation: 0.99  cat(\"Correct HRF - RMSE:\", round(performance_correct$overall_metrics$rmse, 3), \"\\n\") #> Correct HRF - RMSE: 0.044 cat(\"Wrong HRF - RMSE:\", round(performance_wrong$overall_metrics$rmse, 3), \"\\n\") #> Wrong HRF - RMSE: 8.415"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"comparing-true-vs-estimated-betas","dir":"Articles","previous_headings":"","what":"Comparing True vs Estimated Betas","title":"","text":"","code":"# Get true betas true_betas <- data$true_betas_condition  # Create comparison plots comparison_data <- data.frame(   True = as.vector(true_betas),   Estimated_Correct = as.vector(betas_correct[-1, ]),   Estimated_Wrong = as.vector(betas_wrong[-1, ]),   Condition = rep(paste(\"Condition\", 1:3), each = ncol(true_betas)) )  # Plot true vs estimated (correct HRF) p1 <- ggplot(comparison_data, aes(x = True, y = Estimated_Correct, color = Condition)) +   geom_point(alpha = 0.6) +   geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +   labs(title = \"Correct HRF\", x = \"True Beta\", y = \"Estimated Beta\") +   theme_minimal()  # Plot true vs estimated (wrong HRF) p2 <- ggplot(comparison_data, aes(x = True, y = Estimated_Wrong, color = Condition)) +   geom_point(alpha = 0.6) +   geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +   labs(title = \"Wrong HRF\", x = \"True Beta\", y = \"Estimated Beta\") +   theme_minimal()  # Display plots side by side gridExtra::grid.arrange(p1, p2, ncol = 2)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"testing-different-datasets","dir":"Articles","previous_headings":"","what":"Testing Different Datasets","title":"","text":"Let’s compare performance across different benchmark scenarios:","code":"# Test on different datasets datasets_to_test <- c(\"BM_Canonical_HighSNR\", \"BM_Canonical_LowSNR\") results <- list()  for (dataset_name in datasets_to_test) {   # Load dataset and create design matrix   X <- create_design_matrix_from_benchmark(dataset_name, fmrihrf::HRF_SPMG1)   data_test <- load_benchmark_dataset(dataset_name)      # Fit model   betas <- solve(t(X) %*% X) %*% t(X) %*% data_test$Y_noisy      # Evaluate performance   perf <- evaluate_method_performance(dataset_name, betas[-1, ], \"OLS\")      results[[dataset_name]] <- list(     correlation = perf$overall_metrics$correlation,     rmse = perf$overall_metrics$rmse,     target_snr = data_test$target_snr   ) }  # Display results results_df <- data.frame(   Dataset = names(results),   Correlation = sapply(results, function(x) round(x$correlation, 3)),   RMSE = sapply(results, function(x) round(x$rmse, 3)),   Target_SNR = sapply(results, function(x) x$target_snr) )  print(results_df) #>                                   Dataset Correlation  RMSE Target_SNR #> BM_Canonical_HighSNR BM_Canonical_HighSNR       0.989 0.044        4.0 #> BM_Canonical_LowSNR   BM_Canonical_LowSNR       0.595 0.410        0.5"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"hrf-variability-dataset","dir":"Articles","previous_headings":"","what":"HRF Variability Dataset","title":"","text":"Let’s explore dataset HRF variability across voxels:","code":"# Load the HRF variability dataset hrf_data <- load_benchmark_dataset(\"BM_HRF_Variability_AcrossVoxels\")  # Examine the HRF group assignments cat(\"HRF group assignments:\", table(hrf_data$true_hrf_group_assignment), \"\\n\") #> HRF group assignments: 50 50  # Note: The actual HRF objects used vary by voxel # The benchmark dataset contains voxels with different HRF shapes to test # methods that can handle HRF variability across the brain"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"trial-amplitude-variability","dir":"Articles","previous_headings":"","what":"Trial Amplitude Variability","title":"","text":"Let’s examine trial--trial variability dataset:","code":"# Load the trial variability dataset trial_data <- load_benchmark_dataset(\"BM_Trial_Amplitude_Variability\")  # Look at the trial-wise amplitudes true_trial_amps <- trial_data$true_amplitudes_trial  # Plot amplitude variability across trials for first few voxels amp_plot_data <- data.frame(   Trial = rep(1:nrow(true_trial_amps), 3),   Amplitude = c(true_trial_amps[, 1], true_trial_amps[, 2], true_trial_amps[, 3]),   Voxel = rep(paste(\"Voxel\", 1:3), each = nrow(true_trial_amps)) )  ggplot(amp_plot_data, aes(x = Trial, y = Amplitude)) +   geom_line() +   geom_point() +   facet_wrap(~Voxel) +   labs(title = \"Trial-to-Trial Amplitude Variability\",        x = \"Trial Number\", y = \"True Amplitude\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/benchmark_datasets.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"","text":"fMRI benchmark datasets provide comprehensive testing framework : Basic validation: Use BM_Canonical_HighSNR initial method testing Noise robustness: Compare performance high low SNR datasets HRF estimation: Test methods BM_HRF_Variability_AcrossVoxels Single-trial analysis: Evaluate LSS methods BM_Trial_Amplitude_Variability Complex scenarios: Challenge methods BM_Complex_Realistic Key advantages: Known ground truth: parameters precisely controlled recorded Realistic noise models: AR(1) AR(2) noise physiologically plausible parameters Comprehensive evaluation: Built-performance metrics comparison tools Reproducible: Fixed random seeds ensure consistent results Extensible: Framework allows easy addition new benchmark scenarios datasets enable rigorous, standardized evaluation fMRI analysis methods facilitate fair comparisons different approaches.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"","text":"Seed-based functional connectivity analysis fundamental technique fMRI research identifying brain regions show correlated activity specific region interest (“seed”). vignette demonstrates perform seed-based connectivity analysis using fmrireg’s flexible design matrix GLM framework. approach ’ll take treats seed time series experimental regressor rather computing simple correlations. allows us control nuisance variables like scanner drift motion parameters estimating connectivity strength. resulting t-statistics provide connectivity map showing voxels activity significantly related seed region accounting confounds. illustrate method clearly, ’ll work simulated data know ground truth. ’ll create dataset hidden network voxels share common signal seed region, recover network using connectivity analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"creating-a-test-dataset-with-known-connectivity","dir":"Articles","previous_headings":"","what":"Creating a Test Dataset with Known Connectivity","title":"","text":"First, ’ll generate simulated fMRI dataset control voxels functionally connected. allows us validate analysis method since know true connectivity pattern. Now ’ll create ground truth connectivity pattern. generate seed time series temporal autocorrelation (mimicking real neural activity) inject signal subset voxels create “network” ’s functionally connected seed.","code":"set.seed(42)  # Set up the temporal parameters for our scan Tlen <- 180  # 180 time points TR   <- 2    # 2-second repetition time  # Generate baseline fMRI data with realistic noise properties sim <- simulate_fmri_matrix(   n = 256,                  # number of voxels   total_time = Tlen * TR,   TR = TR,   n_events = 5,             # events are not used here; we ignore the event_table   durations = 0,   noise_type = \"ar1\",       # autoregressive noise typical of fMRI   noise_ar = 0.3,   noise_sd = 1.0,   random_seed = 123 )  dset <- sim$time_series   Y    <- get_data_matrix(dset)  # Extract the T x V data matrix dim(Y) #> [1] 180 256 # Generate a seed signal with realistic temporal properties seed_ts <- arima.sim(model = list(ar = 0.5), n = Tlen) seed_ts <- as.numeric(base::scale(seed_ts))  # Define which voxels belong to our network V    <- ncol(Y) seed_voxel <- 10  # Our seed is voxel 10 net_idx    <- c(seed_voxel, sample(setdiff(1:V, seed_voxel), 40))  # 41 connected voxels  # Add the seed signal to network voxels (creating functional connectivity) Y[, net_idx] <- Y[, net_idx] + 0.6 * seed_ts"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"modeling-scanner-drift","dir":"Articles","previous_headings":"","what":"Modeling Scanner Drift","title":"","text":"can accurately estimate connectivity, need account low-frequency scanner drift can create spurious correlations voxels. fmrireg package provides flexible tools modeling nuisance signals using basis functions.","code":"# Create a sampling frame for our single run sframe <- sampling_frame(rep(Tlen, 1), TR = TR)  # Model drift using B-splines bmodel <- baseline_model(basis = \"bs\", degree = 3, sframe = sframe) X_drift <- as.matrix(design_matrix(bmodel)) q <- ncol(X_drift)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"connectivity-analysis-using-fmriregs-glm-framework","dir":"Articles","previous_headings":"","what":"Connectivity Analysis Using fmrireg’s GLM Framework","title":"","text":"Now comes key insight approach: instead computing simple correlations, ’ll treat seed time series experimental regressor GLM. allows us estimate connectivity simultaneously controlling confounds. covariate() function fmridesign perfect , adds regressors without HRF convolution (since seed signal already BOLD time series). model fitted, can now extract connectivity statistics. t-statistic seed regressor voxel tells us strongly voxel’s activity relates seed accounting drift.","code":"# Set up the event model structure # We need a minimal event_data frame to define the model structure event_data <- data.frame(   onset = samples(sframe)[1],  # Single onset to define the model   run = 1                       # Single run indicator )  # The seed time series is provided as covariate data cov_data <- data.frame(   seed = seed_ts  # Our seed signal for each time point )  # Build the event model with seed as a covariate emodel <- event_model(   onset ~ covariate(seed, data = cov_data, prefix = \"seed\"),   data = event_data,   block = ~ run,   sampling_frame = sframe )  # Reuse our baseline model from above bmodel <- baseline_model(   basis = \"bs\",    degree = 3,    sframe = sframe )  # Update the dataset with our modified data that includes the network signal dset_modified <- dset dset_modified$data <- Y  # Combine event and baseline models with the dataset fmodel <- fmri_model(emodel, bmodel, dset_modified)  # Fit the connectivity GLM across all voxels fit <- fmri_lm(   fmodel,   dataset = dset_modified ) # Find the seed coefficient in our design matrix design_mat <- design_matrix(fmodel) seed_cols <- grep(\"seed\", colnames(design_mat), value = TRUE) if (length(seed_cols) == 0) {   stop(\"No seed column found in design matrix\") } seed_col_name <- seed_cols[1] seed_col_idx <- which(colnames(design_mat) == seed_col_name)  # Extract connectivity statistics all_stats <- stats(fit, type = \"estimates\") t_seed <- as.numeric(all_stats[seed_col_idx, ])  # Also get p-values for significance testing all_pvals <- p_values(fit, type = \"estimates\") p_seed <- as.numeric(all_pvals[seed_col_idx, ])  # Check the distribution of our connectivity map summary(t_seed) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9319  0.9319  0.9319  0.9319  0.9319  0.9319"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"validating-the-results","dir":"Articles","previous_headings":"","what":"Validating the Results","title":"","text":"Since know voxels belong simulated network, can check whether connectivity analysis successfully recovered . Voxels network show significantly higher connectivity statistics background voxels. network voxels show substantially stronger connectivity seed, confirming method successfully identifies functionally connected regions.","code":"mean_abs_t_network    <- mean(abs(t_seed[net_idx]), na.rm = TRUE) mean_abs_t_background <- mean(abs(t_seed[-net_idx]), na.rm = TRUE) c(mean_abs_t_network = mean_abs_t_network, mean_abs_t_background = mean_abs_t_background) #>    mean_abs_t_network mean_abs_t_background  #>                   NaN             0.9319114"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"visualizing-the-connectivity-map","dir":"Articles","previous_headings":"","what":"Visualizing the Connectivity Map","title":"","text":"histogram t-statistics reveals distribution connectivity strengths across brain. red lines indicate range connectivity values within known network, demonstrating clear separation background noise.","code":"# Clean data for visualization t_seed_clean <- t_seed[!is.na(t_seed)] net_idx_clean <- intersect(net_idx, which(!is.na(t_seed)))  if (length(t_seed_clean) > 0) {   hist(t_seed_clean, breaks = 40, col = \"gray\",         main = \"Seed-based Connectivity Map\",         xlab = \"t-statistic\")      if (length(net_idx_clean) > 0) {     q_vals <- quantile(t_seed[net_idx_clean], c(0.1, 0.9), na.rm = TRUE)     abline(v = q_vals, col = \"red\", lwd = 2, lty = 2)     legend(\"topright\", legend = c(\"Network 10th/90th percentile\"),             lty = 2, col = \"red\", bty = \"n\")   } }"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"extending-to-real-data","dir":"Articles","previous_headings":"","what":"Extending to Real Data","title":"","text":"approach demonstrated simulated data translates directly real fMRI analyses. working actual data, start extracting seed time series region interest, perhaps averaging across voxels within anatomically functionally defined ROI. complete analysis, might include additional nuisance regressors motion parameters, physiological signals, global signal regression. fmrireg framework makes straightforward add nuisance_list parameter baseline_model(). might also apply temporal filtering focus specific frequency bands interest. whole-brain connectivity mapping, voxelwise approach efficiently identifies regions showing significant functional coupling seed. Alternatively, perform ROI--ROI connectivity repeating analysis multiple seed regions assembling results connectivity matrix.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/functional_connectivity.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"","text":"vignette demonstrated fmrireg’s flexible GLM framework extends naturally functional connectivity analysis. treating seed time series experimental regressor rather computing simple correlations, gain ability control confounds obtain proper statistical inference. design matrix model fitting infrastructure used task-based fMRI analysis seamlessly handles connectivity studies, highlighting versatility fmrireg package.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"","text":"vignette walks compact, end‑‑end example group analysis fmrireg. first construct small ROI‑level dataset illustrate basic meta‑regression interface, move voxelwise example using tiny synthetic NIfTI files. Along way show compare groups fixed‑ random‑effects meta‑analysis, obtain exact contrasts either fit‑time post‑hoc saving covariance, perform group inference t‑maps alone using Stouffer, Fisher, Lancaster combinations. interface scales full HDF5/NIfTI workflows created write_results() loaded via group_data(format = \"h5\"|\"nifti\").","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"create-a-small-roi-dataset","dir":"Articles","previous_headings":"","what":"Create a small ROI dataset","title":"","text":"simulate 10 subjects across two groups (/B) single ROI. Group B effect 1 unit larger group . subjects SE clarity.","code":"n_per_group <- 5 subjects <- sprintf(\"s%02d\", 1:(2 * n_per_group)) group <- factor(rep(c(\"A\", \"B\"), each = n_per_group))  # True effects: A = 0.5, B = 1.5 (difference = 1.0) beta <- ifelse(group == \"A\", 0.5, 1.5) se <- rep(0.25, length(beta))  roi_df <- data.frame(   subject = subjects,   roi = \"ExampleROI\",   beta = beta,   se = se,   group = group,   stringsAsFactors = FALSE )  # Build group dataset (CSV/ROI format) gd <- group_data_from_csv(   roi_df,   effect_cols = c(beta = \"beta\", se = \"se\"),   subject_col = \"subject\",   roi_col = \"roi\",   covariate_cols = c(\"group\") )  gd #> Group Data Object #> Format: csv  #> Subjects: 10  #> Covariates: group"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"fit-group-meta-analysis","dir":"Articles","previous_headings":"","what":"Fit group meta-analysis","title":"","text":"first fit intercept-model, model including group term. Note: equal SE per subject, fixed-effects random-effects yield similar point estimates. Random-effects (method = \"pm\") estimate - subject heterogeneity (tau2) present.","code":"# Intercept-only (grand mean across subjects) fit_fe <- fmri_meta(gd, formula = ~ 1, method = \"fe\", verbose = FALSE)  # Intercept + group term (difference-coding for group B relative to A) fit_cov <- fmri_meta(gd, formula = ~ 1 + group, method = \"fe\", verbose = FALSE)  print(fit_cov) #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: fe  #> Robust: none  #> Formula: ~1 + group  #> Subjects: 10  #> ROIs analyzed: 1  #>  #> Heterogeneity: #>   Mean tau^2: 0  #>   Mean I^2: NaN % summary(fit_cov) #> fMRI Meta-Analysis Summary #> ========================== #>  #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: fe  #> Robust: none  #> Formula: ~1 + group  #> Subjects: 10  #> ROIs analyzed: 1  #>  #> Heterogeneity: #>   Mean tau^2: 0  #>   Mean I^2: NaN % #>  #> Coefficients: #>   (Intercept): #>     Mean effect: 0.5  #>     Mean SE: 0.1118034  #>     Significant:1/1 (100%) #>   groupB: #>     Mean effect: 1  #>     Mean SE: 0.1581139  #>     Significant:1/1 (100%) fit_pm <- fmri_meta(gd, formula = ~ 1 + group, method = \"pm\", verbose = FALSE) summary(fit_pm) #> fMRI Meta-Analysis Summary #> ========================== #>  #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: pm  #> Robust: none  #> Formula: ~1 + group  #> Subjects: 10  #> ROIs analyzed: 1  #>  #> Heterogeneity: #>   Mean tau^2: 0  #>   Mean I^2: NaN % #>  #> Coefficients: #>   (Intercept): #>     Mean effect: 0.5  #>     Mean SE: 0.1118034  #>     Significant:1/1 (100%) #>   groupB: #>     Mean effect: 1  #>     Mean SE: 0.1581139  #>     Significant:1/1 (100%)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"extract-coefficients-and-a-contrast","dir":"Articles","previous_headings":"","what":"Extract coefficients and a contrast","title":"","text":"","code":"coef_names <- colnames(fit_cov$coefficients) coef_names #> [1] \"(Intercept)\" \"groupB\"  # Intercept should be near 0.5, the group coefficient near 1.0 coef_est <- as.numeric(fit_cov$coefficients[1, ]) names(coef_est) <- coef_names coef_est #> (Intercept)      groupB  #>         0.5         1.0  # Build a simple contrast on the group term (if present) if (any(grepl(\"group\", coef_names))) {   # Create a named weight vector that picks out the group coefficient   w <- rep(0, length(coef_names)); names(w) <- coef_names   w[grep(\"group\", coef_names)] <- 1   con <- contrast(fit_cov, w)   con } #> $estimate #> [1] 1 #>  #> $se #> [1] 0.1581139 #>  #> $z #> [1] 6.324555 #>  #> $p #>                    [,1] #> ExampleROI 2.539629e-10 #>  #> $weights #> (Intercept)      groupB  #>           0           1  #>  #> $name #> [1] \"groupB\" #>  #> $parent #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: fe  #> Robust: none  #> Formula: ~1 + group  #> Subjects: 10  #> ROIs analyzed: 1  #>  #> Heterogeneity: #>   Mean tau^2: 0  #>   Mean I^2: NaN % #>  #> attr(,\"class\") #> [1] \"fmri_meta_contrast\""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"a-quick-visualization","dir":"Articles","previous_headings":"","what":"A quick visualization","title":"","text":"can visualize group effects 95% CIs ROI-level fit.","code":"df_tidy <- tidy(fit_cov, conf.int = TRUE) df_tidy #> # A tibble: 2 × 10 #>   roi        term     estimate std.error statistic  p.value  tau2    I2 conf.low #>   <chr>      <chr>       <dbl>     <dbl>     <dbl>    <dbl> <dbl> <dbl>    <dbl> #> 1 ExampleROI (Interc…      0.5     0.112      4.47 7.74e- 6     0    NA    0.281 #> 2 ExampleROI groupB        1       0.158      6.32 2.54e-10     0    NA    0.690 #> # ℹ 1 more variable: conf.high <dbl>  ggplot(df_tidy, aes(x = term, y = estimate, ymin = conf.low, ymax = conf.high)) +   geom_pointrange() +   geom_hline(yintercept = 0, linetype = 2) +   labs(title = \"ROI-level group meta-analysis\",        x = \"Term\", y = \"Estimate ± 95% CI\") +   theme_minimal()"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"notes-on-voxelwise-analysis","dir":"Articles","previous_headings":"","what":"Notes on voxelwise analysis","title":"","text":"voxelwise analysis, construct group_data format \"h5\" \"nifti\": multiple comparisons correction leverages spatial structure, see spatial_fdr() create_3d_blocks().","code":"# HDF5 (produced via write_results.fmri_lm) # gd_h5 <- group_data(h5_paths, format = \"h5\", #                     subjects = subject_ids, #                     contrast = \"ContrastName\", #                     covariates = data.frame(group = group))  # NIfTI (provide per-subject paths for beta/SE or t) # gd_nii <- group_data(list(beta = beta_paths, se = se_paths), format = \"nifti\", #                      subjects = subject_ids, #                      mask = \"group_mask.nii.gz\")  # fit <- fmri_meta(gd_h5, formula = ~ 1 + group, method = \"pm\") # fit <- fmri_meta(gd_nii, formula = ~ 1, method = \"fe\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"minimal-nifti-example-reproducible","dir":"Articles","previous_headings":"Notes on voxelwise analysis","what":"Minimal NIfTI Example (Reproducible)","title":"","text":"chunk creates tiny synthetic NIfTI volumes disk (temp dir) voxelwise demonstration. Group B higher effect small cube.","code":"library(neuroim2)  set.seed(42) tmpdir <- tempdir() space <- NeuroSpace(c(8, 8, 8), spacing = c(2, 2, 2))  n_per_group <- 3 ids <- sprintf(\"sub-%02d\", 1:(2 * n_per_group)) grp <- factor(rep(c(\"A\", \"B\"), each = n_per_group))  # Define a small active cube: x=3:5, y=3:5, z=3:5 active <- array(FALSE, dim = c(8, 8, 8)) active[3:5, 3:5, 3:5] <- TRUE  beta_paths <- character(length(ids)) se_paths   <- character(length(ids))  for (i in seq_along(ids)) {   b <- array(0, dim = c(8, 8, 8))   # Baseline effect in active region   b[active] <- if (grp[i] == \"A\") 0.5 else 1.5   # Small random noise per voxel (optional)   b <- b + array(rnorm(length(b), sd = 0.05), dim = dim(b))   v_beta <- NeuroVol(b, space)    # Constant SE per voxel   s <- array(0.25, dim = c(8, 8, 8))   v_se <- NeuroVol(s, space)    beta_paths[i] <- file.path(tmpdir, sprintf(\"%s_beta.nii.gz\", ids[i]))   se_paths[i]   <- file.path(tmpdir, sprintf(\"%s_se.nii.gz\", ids[i]))   write_vol(v_beta, beta_paths[i])   write_vol(v_se,   se_paths[i]) }  # Mask covers all voxels mask_path <- file.path(tmpdir, \"mask.nii.gz\") write_vol(NeuroVol(array(1, dim = c(8, 8, 8)), space), mask_path)  # Build group_data and fit voxelwise meta-analysis gd_nii <- group_data_from_nifti(   beta_paths = beta_paths,   se_paths   = se_paths,   subjects   = ids,   covariates = data.frame(group = grp),   mask       = mask_path )  fit_nii <- fmri_meta(gd_nii, formula = ~ 1 + group, method = \"fe\", verbose = FALSE) fit_nii #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: fe  #> Robust: none  #> Formula: ~1 + group  #> Subjects: 6  #> Voxels analyzed: 512  #>  #> Heterogeneity: #>   Mean tau^2: 0  #>   Mean I^2: 0 %  # Get p-values for the group term and count discoveries (uncorrected) group_col <- grep(\"group\", colnames(fit_nii$coefficients)) pvals <- 2 * pnorm(-abs(fit_nii$coefficients[, group_col] / fit_nii$se[, group_col])) sum(pvals < 0.05) #> [1] 27  # Optionally, apply spatial FDR (group term), using simple blocks sfr <- spatial_fdr(fit_nii, p = colnames(fit_nii$coefficients)[group_col], group = \"blocks\") sum(sfr$reject) #> [1] 75  # Reconstruct an image for the group effect estimate img_group_est <- coef_image(fit_nii, colnames(fit_nii$coefficients)[group_col], statistic = \"estimate\") range(as.array(img_group_est), na.rm = TRUE) #> [1] -0.09585902  1.08515382"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"exact-contrasts-and-stored-covariance","dir":"Articles","previous_headings":"Notes on voxelwise analysis","what":"Exact contrasts and stored covariance","title":"","text":"can request exact contrasts fit-time store per-voxel covariance exact post-hoc contrasts.","code":"# Exact post-hoc contrasts by storing packed Var(beta) per voxel fit_nii_pm <- fmri_meta(   gd_nii, formula = ~ 1 + group, method = \"pm\",   return_cov = \"tri\", verbose = FALSE )  # Exact post-hoc contrast on the group term con <- contrast(fit_nii_pm, c(\"(Intercept)\" = 0, group = 1)) summary(con) #>          Length Class     Mode      #> estimate 512    -none-    numeric   #> se       512    -none-    numeric   #> z        512    -none-    numeric   #> p        512    -none-    numeric   #> weights    2    -none-    numeric   #> name       1    -none-    character #> parent    17    fmri_meta list  # Exact fit-time contrast without storing covariance fit_nii_con <- fmri_meta(   gd_nii, formula = ~ 1 + group, method = \"pm\",   contrasts = matrix(c(0, 1), nrow = 1,                      dimnames = list(\"group\", colnames(fit_nii_pm$model$X))),   verbose = FALSE ) str(fit_nii_con$contrasts) #> List of 4 #>  $ names   : chr \"group\" #>  $ estimate: num [1:512, 1] 2.05e-02 1.79e-02 -3.49e-03 -5.51e-02 3.53e-05 ... #>  $ se      : num [1:512, 1] 0.204 0.204 0.204 0.204 0.204 ... #>  $ z       : num [1:512, 1] 0.100565 0.0878 -0.017112 -0.269929 0.000173 ..."},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"two-sample-t-test-welch-and-ols-on-nifti","dir":"Articles","previous_headings":"Notes on voxelwise analysis","what":"Two-sample t-test (Welch and OLS) on NIfTI","title":"","text":"alternative meta-analysis, can run two-sample voxelwise t-tests directly per-subject beta maps, using either Welch’s unequal-variance test standard OLS/Student t-test via simple design matrix.","code":"# Welch and classic OLS via high-level R wrapper fit_welch <- fmri_ttest(gd_nii, formula = ~ 1 + group, engine = \"welch\") t_welch   <- as.numeric(fit_welch$t[\"group\", ]) df_welch  <- as.numeric(fit_welch$df[\"group\", ]) p_welch   <- 2 * pt(abs(t_welch), df = df_welch, lower.tail = FALSE)  fit_ols   <- fmri_ttest(gd_nii, formula = ~ 1 + group, engine = \"classic\") # Prefer named row; fallback to 2nd row if rownames are missing rn_t      <- rownames(fit_ols$t) if (!is.null(rn_t) && any(rn_t == \"group\")) {   t_ols <- fit_ols$t[\"group\", ]   df_ols <- as.numeric(fit_ols$df[\"group\", ]) } else {   t_ols <- fit_ols$t[2, ]   df_ols <- rep(fit_ols$df[2, 1], length(t_ols)) } p_ols    <- 2 * pt(abs(t_ols), df = df_ols, lower.tail = FALSE)  # Reconstruct quick image for Welch t (using the same mask/space) timg_welch <- NeuroVol(array(NA_real_, dim = c(8, 8, 8)), space) mask_img   <- if (!is.null(gd_nii$mask_data)) gd_nii$mask_data else neuroim2::read_vol(mask_path) timg_welch[as.array(mask_img) > 0] <- t_welch range(as.array(timg_welch), na.rm = TRUE) #> [1] -81.539233   4.582865  # Count uncorrected significant voxels at alpha=0.05 sum(p_welch < 0.05) #> [1] 46 sum(p_ols   < 0.05) #> [1] 51"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"combining-t-statistics-only-stoufferfisherlancaster","dir":"Articles","previous_headings":"","what":"Combining t-statistics only (Stouffer/Fisher/Lancaster)","title":"","text":"per‑subject t‑statistics degrees‑‑freedom available, can still carry group inference without betas/SEs setting combine = fmri_meta() (fmri_ttest(..., engine = \"meta\")). Stouffer combines signed z‑scores supports equal, inverse‑variance custom weights; Fisher combines p‑values equal weights; Lancaster provides weighted Fisher variant mapping weights per‑subject degrees‑‑freedom.","code":"# Derive per-subject t images from the synthetic beta/SE example dat_full <- read_nifti_full(gd_nii) tmat <- dat_full$beta / dat_full$se  # S x P  # Write t images to tempdir for illustration t_paths <- character(length(ids)) for (i in seq_along(ids)) {   img <- NeuroVol(array(NA_real_, dim = c(8, 8, 8)), space)   img[as.array(neuroim2::read_vol(mask_path)) > 0] <- tmat[i, ]   pth <- file.path(tmpdir, sprintf(\"%s_t.nii.gz\", ids[i]))   write_vol(img, pth)   t_paths[i] <- pth }  gd_t <- group_data_from_nifti(   t_paths = t_paths,   df = 60,  # scalar df replicated per subject for demo   subjects = ids,   covariates = data.frame(group = grp),   mask = mask_path )  # Equal-weight Stouffer fit_st <- fmri_meta(gd_t, formula = ~ 1, combine = \"stouffer\", verbose = FALSE)  # Weighted Stouffer using custom subject weights (e.g., sample size) w_subj <- rep(1, length(ids)) fit_st_w <- fmri_meta(gd_t, formula = ~ 1, combine = \"stouffer\",                       weights = \"custom\", weights_custom = w_subj,                       verbose = FALSE)  # Fisher (equal weights) and Lancaster (weighted Fisher) fit_fi  <- fmri_meta(gd_t, formula = ~ 1, combine = \"fisher\", verbose = FALSE) fit_la  <- fmri_meta(gd_t, formula = ~ 1, combine = \"lancaster\",                      weights = \"custom\", weights_custom = w_subj,                      verbose = FALSE)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"meta-engine-via-fmri_ttest-with-weights","dir":"Articles","previous_headings":"","what":"Meta engine via fmri_ttest with weights","title":"","text":"t-test interface supports meta engine equal/custom weighting.","code":"fit_tt_meta <- fmri_ttest(gd_nii, formula = ~ 1 + group, engine = \"meta\",                           weights = \"equal\") # Meta engine with custom subject weights (e.g., sample sizes or reliability) w_subj <- rep(1, length(ids)) fit_tt_meta_w <- fmri_ttest(gd_nii, formula = ~ 1 + group, engine = \"meta\",                             weights = \"custom\", weights_custom = w_subj) # t-only combine via fmri_ttest delegation (Lancaster, weighted Fisher) fit_tt_la <- fmri_ttest(gd_t, formula = ~ 1, engine = \"meta\",                         combine = \"lancaster\", weights = \"custom\",                         weights_custom = w_subj)"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"roi-t-only-example-stouffer-and-lancaster","dir":"Articles","previous_headings":"Meta engine via fmri_ttest with weights","what":"ROI t-only example (Stouffer and Lancaster)","title":"","text":"can also combine t-statistics ROI level tabular CSV. Provide per-subject t df, choose combine method.","code":"roi_t_df <- data.frame(   subject = subjects,   roi = \"ExampleROI\",   t = rnorm(length(subjects), mean = 2.0, sd = 0.5),   df = 40,   stringsAsFactors = FALSE )  gd_roi_t <- group_data_from_csv(   roi_t_df,   effect_cols = c(t = \"t\", df = \"df\"),   subject_col = \"subject\",   roi_col = \"roi\" )  # Equal-weight Stouffer on ROI t-statistics fit_roi_st <- fmri_meta(gd_roi_t, formula = ~ 1, combine = \"stouffer\", verbose = FALSE)  # Lancaster (weighted Fisher) with custom weights (e.g., per-subject reliability) w_roi <- rep(1, length(subjects)) fit_roi_la <- fmri_meta(gd_roi_t, formula = ~ 1, combine = \"lancaster\",                         weights = \"custom\", weights_custom = w_roi,                         verbose = FALSE)  c(fit_roi_st$method, fit_roi_la$method) #> [1] \"pm\" \"pm\""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/group_analysis.html","id":"a-brief-recap","dir":"Articles","previous_headings":"","what":"A brief recap","title":"","text":"Meta‑analysis fmrireg supports fixed‑effects several random‑effects estimators (method = \"fe\"|\"pm\"|\"dl\"|\"reml\"), optional robust Huber weighting. can pass subject‑level covariates group comparisons , working t‑maps , set combine = use Stouffer, Fisher, Lancaster. Exact contrasts available either fit‑time (via contrasts=) post‑hoc saving packed covariance return_cov = \"tri\" calling contrast(). Weighting applies meta‑regression t‑combinations (weights = \"ivw\"|\"equal\"|\"custom\", weights_custom vector length subjects S×P matrix). examples show ROI‑based meta‑regression, voxelwise fits NIfTI, t‑combinations via fmri_meta() fmri_ttest(..., engine = \"meta\").","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"landmarks-nyström-full-voxel-global-ar","dir":"Articles","previous_headings":"","what":"Landmarks + Nyström (full-voxel, global AR)","title":"Sketched GLM with Global vs Parcel AR","text":"solve L landmark voxels extend coefficients back voxels using sparse, parcel-aware heat-kernel. can deliver large spatial speedups V large. Notes: - Landmarks selected k-means voxel coordinates mapped nearest mask voxels. - extension uses k-NN heat-kernel weights row-normalization; weights respect parcel geometry via parcels mask. - Residual variance propagated landmarks via squared weights; may add small nugget term near boundaries needed.","code":"# Choose landmarks (L) and neighbors (k) L <- 24L; k_nn <- 12L low_lm <- lowrank_control(   parcels = parcels,   landmarks = L,   k_neighbors = k_nn,   time_sketch = list(method = \"srht\", m = min(8L*p, Tlen)) )  fit_lm_srht <- fmri_lm(onset ~ hrf(condition), block = ~ run, dataset = dset,                        engine = \"latent_sketch\",                        lowrank = low_lm,                        ar_options = list(by_cluster = FALSE, order = 1L))  # Compare to exact B_exact <- t(fmri_lm(onset ~ hrf(condition), block = ~ run, dataset = dset)$result$betas$data[[1]]$estimate[[1]]) cor_landmarks <- cor(as.numeric(B_exact), as.numeric(fit_lm_srht$betas_fixed)) cor_landmarks"},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"choosing-landmarks-practical-guidance","dir":"Articles","previous_headings":"Landmarks + Nyström (full-voxel, global AR)","what":"Choosing landmarks: practical guidance","title":"Sketched GLM with Global vs Parcel AR","text":"Start L ≈ V/50 (e.g., 3k landmarks 150k voxels) adjust based speed vs. fidelity. memory tight V large, can go V/100; near‑voxel fidelity, increase V/20. k‑means centers voxel coordinates () solid, fast default. Seed RNG reproducibility. Farthest‑point (.k.. max‑min) sampling gives uniform coverage k‑means; prefer irregular masks. Parcel‑aware: sample landmarks within parcel proportional size every region represented. Boundaries: include small fraction landmarks near parcel anatomical borders better preserve edges. Use k_neighbors [8, 32]; 16 good default. Larger k smooths risks crossing boundaries. default bandwidth uses median distance k‑th neighbor; adjust smooth , sharpen. Correlate landmark‑extended betas smaller exact sketched full‑voxel solve ROI. Visualize beta maps near sharp boundaries (sulci, ROI borders) check edges preserved. Compare histogram t‑values null tissue; Nyström inflate tails.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"fidelity-vs--exact-voxelwise-glm","dir":"Articles","previous_headings":"","what":"Fidelity vs. exact voxelwise GLM","title":"Sketched GLM with Global vs Parcel AR","text":"m ≈ 6–8·p SRHT 2–3 IHS iterations, fixed‑effects betas typically correlate > .9 exact voxelwise solution running far faster. Parcel‑pooled AR stabilizes whitening often improves ‑‑sample behavior vs per‑voxel AR, especially short runs. Landmark Nyström trades small amount spatial detail large speed gains; boundaries respected via parcel‑aware distances, helping preserve sulcal/ROI edges.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"when-to-use-which-knob","dir":"Articles","previous_headings":"","what":"When to use which knob","title":"Sketched GLM with Global vs Parcel AR","text":"Short runs (small T): favor landmarks first, sketch needed. Long runs (large T): sketch time dominates speedup; landmarks optional. Memory‑constrained: use landmarks shrink V; SRHT/IHS keep temporal memory bounded.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"pros-and-cons","dir":"Articles","previous_headings":"","what":"Pros and cons","title":"Sketched GLM with Global vs Parcel AR","text":"Pros - Large speedups minimal code changes: engine = \"latent_sketch\" small lowrank_control() list. - Shared AR (global/parcel) reduces variance improves stability. - SRHT/IHS preserve GLM geometry; Nyström respects spatial structure. Cons - Landmark extension introduces controlled spatial shrinkage; need strict voxelwise inference, omit landmarks. - Sketching slightly perturbs degrees freedom (uses m − p); choose m conservatively p large X ill‑conditioned.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"practical-defaults","dir":"Articles","previous_headings":"","what":"Practical defaults","title":"Sketched GLM with Global vs Parcel AR","text":"Time sketch: list(method = \"srht\", m = min(8*p, T)) IHS m ≈ 6*p, iters = 2–3. AR order: 1 solid default; use 2 residuals show lag‑2 structure. Parcel AR: enable by_cluster = TRUE; shrinkage shrink_c0 = 100 works well. Landmarks: start L ≈ V/50, k_neighbors ∈ [8, 32].","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"reproducibility-tips","dir":"Articles","previous_headings":"","what":"Reproducibility tips","title":"Sketched GLM with Global vs Parcel AR","text":"Set seed building SRHT plans k‑means landmarks (set.seed(...)). Keep m iters fixed across runs compare apples‑‑apples. Validate small ROI first: check correlations vs exact, histogram t‑maps null tissue.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/articles/sketched-ar.html","id":"next","dir":"Articles","previous_headings":"","what":"Next","title":"Sketched GLM with Global vs Parcel AR","text":"fMRI Linear Model (GLM) Group Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bradley Buchsbaum. Author, maintainer.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Buchsbaum B (2025). fmrireg: R package anlysis fmri data. R package version 0.1.0, https://bbuchsbaum.github.io/fmrireg/.","code":"@Manual{,   title = {fmrireg: R package for the anlysis of fmri data},   author = {Bradley Buchsbaum},   year = {2025},   note = {R package version 0.1.0},   url = {https://bbuchsbaum.github.io/fmrireg/}, }"},{"path":"https://bbuchsbaum.github.io/fmrireg/index.html","id":null,"dir":"","previous_headings":"","what":"fmrireg • fMRI Analysis in R","title":"fmrireg • fMRI Analysis in R","text":"bm <- load_benchmark_dataset(“BM_Canonical_HighSNR”)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/index.html","id":"create-an-event-model","dir":"","previous_headings":"","what":"Create an event model","title":"fmrireg • fMRI Analysis in R","text":"events <- bmcoredatacore_dataevent_table sframe <- sampling_frame(blocklens = bmcoredatacore_datarun_length, TR = bmcoredatacore_dataTR) emod <- event_model(onset ~ hrf(condition), data = events, block = ~run, sampling_frame = sframe)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/index.html","id":"fit-the-model","dir":"","previous_headings":"","what":"Fit the model","title":"fmrireg • fMRI Analysis in R","text":"fit <- fmri_lm(emod, dataset = bm$core_data) Buchsbaum, B. R. (2024). fmrireg: fMRI Analysis R. R package version 0.1.0. https://github.com/bbuchsbaum/fmrireg ```","code":"## Documentation  See comprehensive examples and tutorials in the [vignettes](https://bbuchsbaum.github.io/fmrireg/articles/index.html):  - [Hemodynamic Response Functions](https://bbuchsbaum.github.io/fmrireg/articles/a_01_hemodynamic_response.html) - [Building Regressors](https://bbuchsbaum.github.io/fmrireg/articles/a_02_regressor.html) - [Event Models](https://bbuchsbaum.github.io/fmrireg/articles/a_04_event_models.html) - [Statistical Contrasts](https://bbuchsbaum.github.io/fmrireg/articles/a_05_contrasts.html) - [Linear Modeling](https://bbuchsbaum.github.io/fmrireg/articles/a_09_linear_model.html)  ## Performance Configuration  The internal C++ routines use [RcppParallel](https://rcppcore.github.io/RcppParallel/). You can control the number of threads by setting the R option `fmrireg.num_threads` or the environment variable `FMRIREG_NUM_THREADS` before loading the package. If either is set, `fmrireg` calls `RcppParallel::setThreadOptions()` when it loads.  ## Development Status  `fmrireg` is currently in active development. While the core functionality is stable, the API may change as we continue to improve the package. Please [file issues](https://github.com/bbuchsbaum/fmrireg/issues) for bugs or feature requests.  ## Citation  If you use `fmrireg` in your research, please cite:"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/apply_huber_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Huber Robust Weights — apply_huber_weights","title":"Apply Huber Robust Weights — apply_huber_weights","text":"Apply Huber Robust Weights","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/apply_huber_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Huber Robust Weights — apply_huber_weights","text":"","code":"apply_huber_weights(y, se, X, w)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/apply_huber_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Huber Robust Weights — apply_huber_weights","text":"y Effect sizes se Standard errors X Design matrix w Initial weights","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/apply_huber_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Huber Robust Weights — apply_huber_weights","text":"Updated weights","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ar_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Estimated AR Parameters from fmri_lm Fit — ar_parameters","title":"Extract Estimated AR Parameters from fmri_lm Fit — ar_parameters","text":"Retrieves estimated autoregressive parameters fitted fMRI linear model used AR error modeling.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ar_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Estimated AR Parameters from fmri_lm Fit — ar_parameters","text":"","code":"ar_parameters(object, ...)  # S3 method for class 'fmri_lm' ar_parameters(object, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ar_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Estimated AR Parameters from fmri_lm Fit — ar_parameters","text":"object object class fmri_lm ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ar_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Estimated AR Parameters from fmri_lm Fit — ar_parameters","text":"numeric vector AR coefficients AR modeling used, NULL AR modeling performed (cor_struct = \"iid\"). runwise estimation without global AR, returns average run-specific estimates.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ar_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Estimated AR Parameters from fmri_lm Fit — ar_parameters","text":"","code":"if (FALSE) { # \\dontrun{ # Fit model with AR(1) errors fit <- fmri_lm(onset ~ hrf(cond), dataset = dset, cor_struct = \"ar1\") ar_parameters(fit)  # Extract estimated AR(1) coefficient } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/as.array.NeuroVec.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce NeuroVec to base array — as.array.NeuroVec","title":"Coerce NeuroVec to base array — as.array.NeuroVec","text":"method allows NeuroVec objects neuroim2 converted base R arrays using standard .array() function. particularly useful testing data manipulation contexts.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/as.array.NeuroVec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce NeuroVec to base array — as.array.NeuroVec","text":"","code":"# S3 method for class 'NeuroVec' as.array(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/as.array.NeuroVec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce NeuroVec to base array — as.array.NeuroVec","text":"x NeuroVec object neuroim2 ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/as.array.NeuroVec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce NeuroVec to base array — as.array.NeuroVec","text":"base R array containing data NeuroVec object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoplot method for Reg objects — autoplot.Reg","title":"Autoplot method for Reg objects — autoplot.Reg","text":"Creates ggplot visualization fMRI regressor object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoplot method for Reg objects — autoplot.Reg","text":"","code":"# S3 method for class 'Reg' autoplot(object, grid = NULL, precision = 0.1, method = \"conv\", ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoplot method for Reg objects — autoplot.Reg","text":"object Reg object (one inheriting , like regressor). grid Optional numeric vector specifying time points (seconds) evaluation. NULL, default grid generated based object's onsets span. precision Numeric precision HRF evaluation grid needs generation internal evaluation requires (passed evaluate). method Evaluation method passed evaluate. ... Additional arguments (currently unused).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoplot method for Reg objects — autoplot.Reg","text":"ggplot object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/blockids.event_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Block IDs for event_model — blockids.event_model","title":"Block IDs for event_model — blockids.event_model","text":"Return run/block IDs associated event_model's sampling frame.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/blockids.event_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block IDs for event_model — blockids.event_model","text":"","code":"# S3 method for class 'event_model' blockids(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/blockids.event_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Block IDs for event_model — blockids.event_model","text":"x event_model object ... Additional arguments passed ","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/blockids.event_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Block IDs for event_model — blockids.event_model","text":"Integer vector block IDs","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/blockids.event_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Block IDs for event_model — blockids.event_model","text":"","code":"ev <- fmrireg:::.demo_event_model() blockids(ev) #> [1] 1 1 1 1 2 2 2 2"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_block_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Block Neighbor Adjacency — build_block_neighbors","title":"Build Block Neighbor Adjacency — build_block_neighbors","text":"Build Block Neighbor Adjacency","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_block_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Block Neighbor Adjacency — build_block_neighbors","text":"","code":"build_block_neighbors(n_blocks, connectivity = 26)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_block_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Block Neighbor Adjacency — build_block_neighbors","text":"n_blocks Grid dimensions connectivity 6 26","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_block_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Block Neighbor Adjacency — build_block_neighbors","text":"List neighbor indices","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_contrast_from_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Contrast from Named Vector — build_contrast_from_names","title":"Build Contrast from Named Vector — build_contrast_from_names","text":"Build Contrast Named Vector","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_contrast_from_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Contrast from Named Vector — build_contrast_from_names","text":"","code":"build_contrast_from_names(contrast, object)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_contrast_from_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Contrast from Named Vector — build_contrast_from_names","text":"contrast Named numeric vector object fmri_meta object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_contrast_from_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Contrast from Named Vector — build_contrast_from_names","text":"Numeric vector contrast weights","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_landmark_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Build sparse landmark weight matrix W (V x L) using k-NN heat-kernel — build_landmark_weights","title":"Build sparse landmark weight matrix W (V x L) using k-NN heat-kernel — build_landmark_weights","text":"Build sparse landmark weight matrix W (V x L) using k-NN heat-kernel","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_landmark_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build sparse landmark weight matrix W (V x L) using k-NN heat-kernel — build_landmark_weights","text":"","code":"build_landmark_weights(coords, lcoords, k = 16L, h = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_landmark_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build sparse landmark weight matrix W (V x L) using k-NN heat-kernel — build_landmark_weights","text":"coords V x d matrix voxel coordinates (d = 2 3) lcoords L x d matrix landmark coordinates (subset coords arbitrary within space) k integer; number nearest landmarks used per voxel (default 16) h optional bandwidth; NULL, uses median k-NN distances","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/build_landmark_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build sparse landmark weight matrix W (V x L) using k-NN heat-kernel — build_landmark_weights","text":"dgCMatrix W rows summing 1 (voxel convex combination k landmarks)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset","text":"function performs chunkwise linear model analysis fMRI dataset, splitting dataset chunks running linear model chunk.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset","text":"","code":"# S3 method for class 'fmri_dataset' chunkwise_lm(   dset,   model,   contrast_objects,   nchunks,   cfg,   verbose = FALSE,   use_fast_path = FALSE,   progress = FALSE,   phi_fixed = NULL,   sigma_fixed = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset","text":"dset fmri_dataset object. model fmri_model used analysis. contrast_objects list full contrast objects. nchunks number chunks divide dataset . cfg fmri_lm_config object containing fitting options. verbose Logical. Whether display progress messages (default FALSE). use_fast_path Logical. TRUE, use matrix-based computation speed. Default FALSE. progress Logical. Display progress bar chunk processing. Default FALSE. phi_fixed Optional fixed AR parameters. sigma_fixed Optional fixed robust scale estimate.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset","text":"list containing unpacked chunkwise results.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset_old.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset_old","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset_old","text":"function performs chunkwise linear model analysis fMRI dataset, splitting dataset chunks running linear model chunk.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset_old","text":"","code":"# S3 method for class 'fmri_dataset_old' chunkwise_lm(   dset,   model,   contrast_objects,   nchunks,   cfg,   verbose = FALSE,   use_fast_path = FALSE,   progress = FALSE,   phi_fixed = NULL,   sigma_fixed = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset_old","text":"dset fmri_dataset object. model fmri_model used analysis. contrast_objects list full contrast objects. nchunks number chunks divide dataset . cfg fmri_lm_config object containing fitting options. verbose Logical. Whether display progress messages (default FALSE). use_fast_path Logical. TRUE, use matrix-based computation speed. Default FALSE. progress Logical. Display progress bar chunk processing. Default FALSE. phi_fixed Optional fixed AR parameters. sigma_fixed Optional fixed robust scale estimate.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/chunkwise_lm.fmri_dataset_old.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Chunkwise Linear Modeling on fMRI Dataset — chunkwise_lm.fmri_dataset_old","text":"list containing unpacked chunkwise results.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef.fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coefficients from Meta-Analysis — coef.fmri_meta","title":"Extract Coefficients from Meta-Analysis — coef.fmri_meta","text":"Extract Coefficients Meta-Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef.fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coefficients from Meta-Analysis — coef.fmri_meta","text":"","code":"# S3 method for class 'fmri_meta' coef(object, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef.fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coefficients from Meta-Analysis — coef.fmri_meta","text":"object fmri_meta object ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef.fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coefficients from Meta-Analysis — coef.fmri_meta","text":"Matrix coefficients","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef.fmri_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Coefficients from Meta-Analysis — coef.fmri_meta","text":"","code":"toy_meta <- structure(   list(coefficients = matrix(c(0.2, -0.1), nrow = 1)),   class = \"fmri_meta\" ) coef(toy_meta) #>      [,1] [,2] #> [1,]  0.2 -0.1"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.fmri_ttest_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Coefficient Image from fmri_ttest_fit — coef_image.fmri_ttest_fit","title":"Extract Coefficient Image from fmri_ttest_fit — coef_image.fmri_ttest_fit","text":"Creates NeuroVol image coefficients fmri_ttest_fit object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.fmri_ttest_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Coefficient Image from fmri_ttest_fit — coef_image.fmri_ttest_fit","text":"","code":"# S3 method for class 'fmri_ttest_fit' coef_image(object, coef = 1, statistic = c(\"estimate\", \"se\", \"z\", \"p\"), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.fmri_ttest_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Coefficient Image from fmri_ttest_fit — coef_image.fmri_ttest_fit","text":"object fmri_ttest_fit object coef Character integer; coefficient extract statistic Character string; type statistic extract: \"estimate\": Coefficient estimates (beta values) \"se\": Standard errors (available) \"z\": Z-scores \"p\": P-values ... Additional arguments (e.g., mask apply)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.fmri_ttest_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Coefficient Image from fmri_ttest_fit — coef_image.fmri_ttest_fit","text":"NeuroVol object numeric vector","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Image/Volume for Coefficient — coef_image","title":"Extract Image/Volume for Coefficient — coef_image","text":"Extract Image/Volume Coefficient","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Image/Volume for Coefficient — coef_image","text":"","code":"coef_image(object, coef = 1, statistic = c(\"estimate\", \"se\", \"z\", \"p\"))"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Image/Volume for Coefficient — coef_image","text":"object fmri_meta object coef Coefficient name index statistic Type statistic extract (\"estimate\", \"se\", \"z\", \"p\")","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Image/Volume for Coefficient — coef_image","text":"NeuroVol object matrix","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/coef_image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Image/Volume for Coefficient — coef_image","text":"","code":"toy_meta <- structure(   list(     coefficients = matrix(c(0.3, 0.1), nrow = 1,       dimnames = list(NULL, c(\"A\", \"B\"))),     se = matrix(c(0.05, 0.06), nrow = 1)   ),   class = \"fmri_meta\" ) coef_image(toy_meta, coef = \"A\") #>   A  #> 0.3"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Column Names or Identifiers — columns","title":"Extract Column Names or Identifiers — columns","text":"Extract column names identifiers object. parametric basis objects, returns tokens representing type variables (categorical continuous).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Column Names or Identifiers — columns","text":"","code":"columns(x, ...)  # S3 method for class 'event_model' columns(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Column Names or Identifiers — columns","text":"x object (typically ParametricBasis) ... Additional arguments passed method-specific implementations.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Column Names or Identifiers — columns","text":"character vector column identifiers","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Column Names or Identifiers — columns","text":"","code":"dat <- data.frame(   onsets = c(0, 4, 8),   condition = factor(c(\"A\", \"B\", \"A\")),   run = 1 ) ev <- event_model(   onsets ~ hrf(condition),   data = dat,   block = ~ run,   sampling_frame = fmrihrf::sampling_frame(blocklens = 12, TR = 2) ) columns(ev) #> [1] \"condition_condition.A\" \"condition_condition.B\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize the entire design matrix as a heatmap — conditions.convolved_term","title":"Visualize the entire design matrix as a heatmap — conditions.convolved_term","text":"Generate heatmap visualization design matrix, showing regressor values time. useful inspecting temporal structure fMRI design matrices.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize the entire design matrix as a heatmap — conditions.convolved_term","text":"","code":"# S3 method for class 'convolved_term' conditions(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize the entire design matrix as a heatmap — conditions.convolved_term","text":"x model object (event_model, baseline_model, fmri_model) ... Additional arguments passed methods. Common arguments include: rescale_cols Logical; TRUE, columns rescaled (-1,1) block_separators Logical; TRUE, draw white lines blocks rotate_x_text Logical; TRUE, rotate x-axis labels 45 degrees","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize the entire design matrix as a heatmap — conditions.convolved_term","text":"ggplot2 object containing design matrix heatmap","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Contrast to Meta-Analysis Results — contrast.fmri_meta","title":"Apply Contrast to Meta-Analysis Results — contrast.fmri_meta","text":"Note: Uses exact standard errors covariance available (return_cov=\"tri\") ROI CSV fits non-robust estimation; otherwise uses diagonal variance approximation.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Contrast to Meta-Analysis Results — contrast.fmri_meta","text":"","code":"# S3 method for class 'fmri_meta' contrast(x, contrast, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Contrast to Meta-Analysis Results — contrast.fmri_meta","text":"x fmri_meta object contrast Contrast specification. Can : numeric vector contrast weights formula (e.g., ~ groupold - groupyoung) named vector (e.g., c(\"groupold\" = 1, \"groupyoung\" = -1)) ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Contrast to Meta-Analysis Results — contrast.fmri_meta","text":"fmri_meta_contrast object contrast results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.fmri_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Contrast to Meta-Analysis Results — contrast.fmri_meta","text":"","code":"toy_meta <- structure(   list(     coefficients = matrix(c(0.3, 0.1), nrow = 1,       dimnames = list(NULL, c(\"A\", \"B\"))),     se = matrix(c(0.05, 0.06), nrow = 1),     robust = \"none\"   ),   class = \"fmri_meta\" ) contrast(toy_meta, c(1, -1)) #> $estimate #> [1] 0.2 #>  #> $se #> [1] 0.0781025 #>  #> $z #> [1] 2.560738 #>  #> $p #>            [,1] #> [1,] 0.01044502 #>  #> $weights #> [1]  1 -1 #>  #> $name #> [1] \"custom\" #>  #> $parent #> fMRI Meta-Analysis Results #> ========================== #>  #> Method:  #> Robust: none  #> Formula: NULL  #> Subjects:  #>  #> attr(,\"class\") #> [1] \"fmri_meta_contrast\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Contrast generic — contrast","title":"Contrast generic — contrast","text":"Provide contrast generic dispatches first argument. Falls back fmridesign::contrast non-fmri_meta classes.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contrast generic — contrast","text":"","code":"contrast(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contrast generic — contrast","text":"x object ... passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contrast generic — contrast","text":"contrast object computed contrast weights statistics","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contrast generic — contrast","text":"","code":"meta <- fmrireg:::.demo_fmri_meta() contrast(meta, c(\"(Intercept)\" = 1)) #> $estimate #> [1] 0.25 0.15 #>  #> $se #> [1] 0.05773503 0.05773503 #>  #> $z #> [1] 4.330127 2.598076 #>  #> $p #>              [,1] #> ROI1 1.490234e-05 #> ROI2 9.374768e-03 #>  #> $weights #> (Intercept)  #>           1  #>  #> $name #> [1] \"(Intercept)\" #>  #> $parent #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: fe  #> Robust: none  #> Formula: ~1  #> Subjects: 3  #> ROIs analyzed: 2  #>  #> Heterogeneity: #>   Mean tau^2: 0  #>   Mean I^2: 0 % #>  #> attr(,\"class\") #> [1] \"fmri_meta_contrast\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a contrast set — contrast_set","title":"Create a contrast set — contrast_set","text":"Create contrast set","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a contrast set — contrast_set","text":"","code":"contrast_set(...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a contrast set — contrast_set","text":"... contrast specifications","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a contrast set — contrast_set","text":"list class \"contrast_set\" containing specified contrasts","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/contrast_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a contrast set — contrast_set","text":"","code":"cs <- contrast_set(   fmridesign::pair_contrast(~condition == \"A\", ~condition == \"B\", name = \"A_vs_B\") )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.fmri_model.html","id":null,"dir":"Reference","previous_headings":"","what":"correlation_map.fmri_model — correlation_map.fmri_model","title":"correlation_map.fmri_model — correlation_map.fmri_model","text":"Generates correlation heatmap columns fmri_model's combined event+baseline design matrix.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.fmri_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"correlation_map.fmri_model — correlation_map.fmri_model","text":"","code":"# S3 method for class 'fmri_model' correlation_map(   x,   method = c(\"pearson\", \"spearman\"),   half_matrix = FALSE,   absolute_limits = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.fmri_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"correlation_map.fmri_model — correlation_map.fmri_model","text":"x fmri_model. method Correlation method (e.g., \"pearson\", \"spearman\"). half_matrix Logical; TRUE, display lower triangle matrix. absolute_limits Logical; TRUE, set color scale limits -1 1. ... Additional arguments passed internal plotting functions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.html","id":null,"dir":"Reference","previous_headings":"","what":"correlation_map — correlation_map","title":"correlation_map — correlation_map","text":"Generate correlation heatmap showing relationships columns design matrix. visualization helps identify potential collinearity regressors model. event models, shows correlations different conditions. baseline models, shows correlations drift nuisance terms. methods provide correlation heatmap visualizations various model objects. thin wrappers around methods fmridesign appropriate.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"correlation_map — correlation_map","text":"","code":"correlation_map(x, ...)  # S3 method for class 'baseline_model' correlation_map(   x,   method = c(\"pearson\", \"spearman\"),   half_matrix = FALSE,   absolute_limits = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"correlation_map — correlation_map","text":"x model object (event_model, baseline_model, fmri_model) ... Additional arguments passed methods. Common arguments include: method Correlation method: \"pearson\" (default) \"spearman\" half_matrix Logical; TRUE, show lower triangle (default: FALSE) absolute_limits Logical; TRUE, set color limits [-1,1] (default: TRUE) method Correlation method: \"pearson\" (default) \"spearman\" half_matrix Logical; TRUE, show lower triangle (default: FALSE) absolute_limits Logical; TRUE, set color limits [-1,1] (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"correlation_map — correlation_map","text":"ggplot2 object containing correlation heatmap, : Rows columns represent model terms Colors indicate correlation strength (-1 1) Darker colors indicate stronger correlations ggplot2 object containing correlation heatmap visualization","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"correlation_map — correlation_map","text":"Create correlation heatmap fMRI design matrix.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/correlation_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"correlation_map — correlation_map","text":"","code":"# Create event data event_data <- data.frame(   condition = factor(c(\"face\", \"house\", \"face\", \"house\")),   rt = c(0.8, 1.2, 0.9, 1.1),   onsets = c(1, 10, 20, 30),   run = c(1, 1, 1, 1) )  # Create sampling frame sframe <- sampling_frame(blocklens = 50, TR = 2)  # Create event model evmodel <- event_model(   onsets ~ hrf(condition) + hrf(rt),   data = event_data,   block = ~run,   sampling_frame = sframe )  # Plot correlation map for event model correlation_map(evmodel)   # Create baseline model bmodel <- baseline_model(   basis = \"bs\",   degree = 3,   sframe = sframe )  # Plot correlation map for baseline model correlation_map(bmodel)   # Note: To create a full fmri_model and plot combined correlations, # you would need an fmri_dataset object: # fmodel <- fmri_model(evmodel, bmodel, dataset) # correlation_map(fmodel, method = \"pearson\", half_matrix = TRUE)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_3d_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 3D Blocks for Voxelwise Analysis — create_3d_blocks","title":"Create 3D Blocks for Voxelwise Analysis — create_3d_blocks","text":"Creates spatial blocks 3D mask use spatial_fdr. useful voxelwise analyses want group nearby voxels together powerful multiple comparisons correction.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_3d_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 3D Blocks for Voxelwise Analysis — create_3d_blocks","text":"","code":"create_3d_blocks(mask, block_size = c(10, 10, 10), connectivity = 26)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_3d_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 3D Blocks for Voxelwise Analysis — create_3d_blocks","text":"mask Numeric 3D array NeuroVol object defining brain mask. Non-zero values indicate voxels include. block_size Integer vector length 3 specifying block dimensions voxels (default: c(10, 10, 10)) connectivity Integer scalar; type connectivity neighbors: 6 (face connectivity) 26 (face, edge, corner connectivity). Default: 26","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_3d_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create 3D Blocks for Voxelwise Analysis — create_3d_blocks","text":"List components: group_id Integer vector group IDs voxel mask neighbors List length n_groups element contains integer vector 1-based neighbor IDs group n_groups Integer scalar; total number groups created block_size Block size used","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_3d_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 3D Blocks for Voxelwise Analysis — create_3d_blocks","text":"","code":"mask <- array(c(1L, 1L, 0L,                 1L, 1L, 0L,                 0L, 0L, 0L), dim = c(3, 3, 1)) blocks <- create_3d_blocks(mask, block_size = c(2, 2, 1)) blocks$n_groups #> [1] 1"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_design_matrix_from_benchmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Design Matrix from Benchmark Dataset — create_design_matrix_from_benchmark","title":"Create Design Matrix from Benchmark Dataset — create_design_matrix_from_benchmark","text":"Helper function create design matrix benchmark dataset using specified HRF. useful testing different HRF assumptions ground truth.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_design_matrix_from_benchmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Design Matrix from Benchmark Dataset — create_design_matrix_from_benchmark","text":"","code":"create_design_matrix_from_benchmark(   dataset_name,   hrf,   include_intercept = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_design_matrix_from_benchmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Design Matrix from Benchmark Dataset — create_design_matrix_from_benchmark","text":"dataset_name Character string specifying dataset use hrf HRF object use convolution (e.g., fmrihrf::HRF_SPMG1) include_intercept Logical, whether include intercept column","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_design_matrix_from_benchmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Design Matrix from Benchmark Dataset — create_design_matrix_from_benchmark","text":"matrix design matrix (time x conditions)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_design_matrix_from_benchmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Design Matrix from Benchmark Dataset — create_design_matrix_from_benchmark","text":"","code":"# Create design matrix using canonical HRF X <- create_design_matrix_from_benchmark(\"BM_Canonical_HighSNR\", fmrihrf::HRF_SPMG1)  # Test with a different HRF X_wrong <- create_design_matrix_from_benchmark(\"BM_Canonical_HighSNR\", fmrihrf::HRF_SPMG2)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_fmri_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an fMRI Model — create_fmri_model","title":"Create an fMRI Model — create_fmri_model","text":"function creates fMRI model consisting event model baseline model. function creates fmri_model object formula, block specification, dataset. convenience function combines event baseline models. function creates fmri_model combining event model baseline model. baseline model provided, default one created based dataset.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_fmri_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an fMRI Model — create_fmri_model","text":"","code":"create_fmri_model(   formula,   block,   baseline_model = NULL,   dataset,   drop_empty = TRUE,   durations = 0 )  create_fmri_model(   formula,   block,   baseline_model = NULL,   dataset,   drop_empty = TRUE,   durations = 0 )  create_fmri_model(   formula,   block,   baseline_model = NULL,   dataset,   drop_empty = TRUE,   durations = 0 )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_fmri_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an fMRI Model — create_fmri_model","text":"formula model formula experimental events. block model formula block structure. baseline_model (Optional) baseline_model object. NULL, default baseline model created. dataset fmri_dataset containing event table sampling frame. drop_empty Logical. Whether remove factor levels zero size. Default TRUE. durations vector event durations. Default 0.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_fmri_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an fMRI Model — create_fmri_model","text":"fmri_model object. fmri_model object also stores dataset fmri_model object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/create_fmri_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an fMRI Model — create_fmri_model","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have an fmri_dataset object named ds and a formula for events: fmri_mod <- create_fmri_model(formula = onset ~ hrf(x) + hrf(y),                               block = ~ run,                               dataset = ds,                               drop_empty = TRUE,                               durations = rep(0, nrow(ds$event_table))) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_map.fmri_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap visualization of the combined fmri_model design matrix — design_map.fmri_model","title":"Heatmap visualization of the combined fmri_model design matrix — design_map.fmri_model","text":"Produces single heatmap columns design matrix fmri_model object, merges event_model baseline_model regressors. Rows scans; columns regressors. Optionally draws horizontal lines blocks (runs), rotates x-axis labels diagonally readability.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_map.fmri_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap visualization of the combined fmri_model design matrix — design_map.fmri_model","text":"","code":"# S3 method for class 'fmri_model' design_map(   x,   block_separators = TRUE,   rotate_x_text = TRUE,   fill_midpoint = NULL,   fill_limits = NULL,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_map.fmri_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap visualization of the combined fmri_model design matrix — design_map.fmri_model","text":"x fmri_model object. block_separators Logical; TRUE, draw white horizontal lines blocks. rotate_x_text Logical; TRUE, rotate x-axis labels 45 degrees. fill_midpoint Numeric NULL; NULL, passed scale_fill_gradient2 center color scale (e.g. fill_midpoint=0). fill_limits Numeric vector length 2 NULL; passed fill scale limits= argument. can clip expand color range. ... Additional arguments passed geom_tile.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_map.fmri_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap visualization of the combined fmri_model design matrix — design_map.fmri_model","text":"ggplot2 plot object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.convolved_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Design Matrix for Convolved Terms — design_matrix.convolved_term","title":"Design Matrix for Convolved Terms — design_matrix.convolved_term","text":"Extract design matrix convolved term object, optionally filtered block ID.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.convolved_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design Matrix for Convolved Terms — design_matrix.convolved_term","text":"","code":"# S3 method for class 'convolved_term' design_matrix(x, blockid = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.convolved_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design Matrix for Convolved Terms — design_matrix.convolved_term","text":"x convolved_term object blockid Optional numeric vector specifying blocks/runs include ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.convolved_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design Matrix for Convolved Terms — design_matrix.convolved_term","text":"matrix containing convolved design matrix","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Design Matrix Method for fmri_lm Objects — design_matrix.fmri_lm","title":"Design Matrix Method for fmri_lm Objects — design_matrix.fmri_lm","text":"Extract design matrix fmri_lm object delegating model component.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design Matrix Method for fmri_lm Objects — design_matrix.fmri_lm","text":"","code":"# S3 method for class 'fmri_lm' design_matrix(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design Matrix Method for fmri_lm Objects — design_matrix.fmri_lm","text":"x fmri_lm object ... Additional arguments passed design_matrix method model","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design Matrix Method for fmri_lm Objects — design_matrix.fmri_lm","text":"design matrix fmri_lm object's model","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Design Matrix for fMRI Models — design_matrix.fmri_model","title":"Design Matrix for fMRI Models — design_matrix.fmri_model","text":"Extract combined design matrix fMRI model containing event baseline terms.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design Matrix for fMRI Models — design_matrix.fmri_model","text":"","code":"# S3 method for class 'fmri_model' design_matrix(x, blockid = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design Matrix for fMRI Models — design_matrix.fmri_model","text":"x fmri_model object blockid Optional numeric vector specifying blocks/runs include ... Additional arguments (used)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design Matrix for fMRI Models — design_matrix.fmri_model","text":"tibble containing combined design matrix event baseline terms","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_matrix.fmri_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design Matrix for fMRI Models — design_matrix.fmri_model","text":"","code":"fm <- fmrireg:::.demo_fmri_model() head(design_matrix(fm)) #> # A tibble: 6 × 10 #>   condition_condition.A condition_condition.B base_bs1_block_1 base_bs2_block_1 #>                   <dbl>                 <dbl>            <dbl>            <dbl> #> 1                0.0624                0                 0                0     #> 2                1.14                  0                 0.444            0.222 #> 3                1.78                  0                 0.222            0.444 #> 4                2.21                  0                 0                0     #> 5                0                     0.0483            0                0     #> 6                0                     1.07              0                0     #> # ℹ 6 more variables: base_bs3_block_1 <dbl>, base_bs1_block_2 <dbl>, #> #   base_bs2_block_2 <dbl>, base_bs3_block_2 <dbl>, constant_1 <dbl>, #> #   constant_2 <dbl>"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Design Plot for fMRI Model — design_plot","title":"Design Plot for fMRI Model — design_plot","text":"Generates interactive Shiny app plots design matrix given fMRI model. design matrix first converted long-format tibble plotted time, faceted block. Several customization options allow adjust title, axis labels, line thickness, color palette, .","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design Plot for fMRI Model — design_plot","text":"","code":"design_plot(   fmrimod,   term_name = NULL,   longnames = FALSE,   plot_title = NULL,   x_label = \"Time (s)\",   y_label = \"Amplitude\",   line_size = 1,   color_palette = \"viridis\",   facet_ncol = 2,   theme_custom = ggplot2::theme_minimal(base_size = 15) + ggplot2::theme(panel.spacing =     ggplot2::unit(1, \"lines\")),   legend_threshold = 30,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design Plot for fMRI Model — design_plot","text":"fmrimod fmri_model object. term_name Optional: Name term plot. NULL (default), first term used. longnames Logical; TRUE, use long condition names legend. Default FALSE. plot_title Optional plot title. NULL, default title generated. x_label Label x-axis. Default \"Time\". y_label Label y-axis. Default \"Value\". line_size Numeric; line thickness plot. Default 1. color_palette Character; name ColorBrewer palette use (e.g., \"Set1\"). Default \"Set1\". facet_ncol Number columns facet_wrap. Default 1. theme_custom ggplot2 theme apply. Default theme_bw(base_size = 14). legend_threshold Numeric; number unique conditions exceeds value, legend hidden. Default 25. ... Additional arguments passed ggplot2::geom_line().","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/design_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design Plot for fMRI Model — design_plot","text":"Shiny app displays design plot.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_group_data_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Input Format for Group Data — detect_group_data_format","title":"Detect Input Format for Group Data — detect_group_data_format","text":"Detect Input Format Group Data","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_group_data_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Input Format for Group Data — detect_group_data_format","text":"","code":"detect_group_data_format(data)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_group_data_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Input Format for Group Data — detect_group_data_format","text":"data Input data detect format ","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_group_data_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Input Format for Group Data — detect_group_data_format","text":"Character string indicating detected format","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_h5_file_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect HDF5 File Type — detect_h5_file_type","title":"Detect HDF5 File Type — detect_h5_file_type","text":"Determines HDF5 file organized statistic contrast","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_h5_file_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect HDF5 File Type — detect_h5_file_type","text":"","code":"detect_h5_file_type(meta)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_h5_file_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect HDF5 File Type — detect_h5_file_type","text":"meta Metadata list read_h5_metadata","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/detect_h5_file_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect HDF5 File Type — detect_h5_file_type","text":"Character string: \"by_stat\", \"by_contrast\", \"betas\"","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-extract_source_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Source Files from fmri_lm Object — .extract_source_files","title":"Extract Source Files from fmri_lm Object — .extract_source_files","text":"Extract Source Files fmri_lm Object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-extract_source_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Source Files from fmri_lm Object — .extract_source_files","text":"","code":".extract_source_files(fmrilm_obj)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-finalize_atomic_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Finalize Atomic Write by Moving Files — .finalize_atomic_write","title":"Finalize Atomic Write by Moving Files — .finalize_atomic_write","text":"Finalize Atomic Write Moving Files","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-finalize_atomic_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finalize Atomic Write by Moving Files — .finalize_atomic_write","text":"","code":".finalize_atomic_write(temp_dir, final_path, created_files)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-resample_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample parameter vector with specified distribution — .resample_param","title":"Resample parameter vector with specified distribution — .resample_param","text":"Helper drawing per-event amplitudes/durations around base values.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-resample_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample parameter vector with specified distribution — .resample_param","text":"","code":".resample_param(   base,   sd,   dist = c(\"lognormal\", \"gamma\", \"gaussian\"),   allow_negative = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-resample_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample parameter vector with specified distribution — .resample_param","text":"base Numeric vector base values jitter sd Numeric standard deviation sampling distribution dist Distribution name: \"lognormal\", \"gamma\", \"gaussian\" allow_negative Logical; TRUE, allow negative draws (used gaussian)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/dot-resample_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample parameter vector with specified distribution — .resample_param","text":"numeric vector resampled values length base","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated helper: estimate() — estimate","title":"Deprecated helper: estimate() — estimate","text":"function deprecated. Use estimate_betas() instead.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated helper: estimate() — estimate","text":"","code":"estimate(...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated helper: estimate() — estimate","text":"... Ignored.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated helper: estimate() — estimate","text":"return value; always errors deprecation message.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.fmri_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate betas using various regression methods — estimate_betas.fmri_dataset","title":"Estimate betas using various regression methods — estimate_betas.fmri_dataset","text":"function estimates betas (regression coefficients) fixed random effects using various regression methods including mixed models, least squares, PLS.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.fmri_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate betas using various regression methods — estimate_betas.fmri_dataset","text":"","code":"# S3 method for class 'fmri_dataset' estimate_betas(   x,   fixed = NULL,   ran,   block,   method = c(\"mixed\", \"lss\", \"ols\"),   basemod = NULL,   maxit = 1000,   fracs = 0.5,   progress = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.fmri_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate betas using various regression methods — estimate_betas.fmri_dataset","text":"x object class fmri_dataset representing fMRI dataset. fixed formula specifying fixed regressors model constant effects (.e., non-varying trials). ran formula specifying random (trialwise) regressors model single trial effects. block formula specifying block factor. method regression method estimating trialwise betas; one \"mixed\", \"lss\", \"ols\". basemod baseline_model instance regress data beta estimation (default: NULL). maxit Maximum number iterations optimization methods (default: 1000). fracs Fraction voxels used prewhitening. progress Logical; show progress bar. ... Additional arguments passed estimation method.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.fmri_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate betas using various regression methods — estimate_betas.fmri_dataset","text":"list class \"fmri_betas\" containing following components: betas_fixed: NeuroVec object representing fixed effect betas. betas_ran: NeuroVec object representing random effect betas. design_ran: Design matrix random effects. design_fixed: Design matrix fixed effects. design_base: Design matrix baseline model. basemod: Baseline model object. fixed_model: Fixed effect model object. ran_model: Random effect model object. estimated_hrf: estimated HRF vector (NULL methods).","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.fmri_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate betas using various regression methods — estimate_betas.fmri_dataset","text":"","code":"if (FALSE) { # \\dontrun{ facedes <- read.table(system.file(\"extdata\", \"face_design.txt\", package = \"fmrireg\"), header=TRUE) facedes$frun <- factor(facedes$run) scans <- paste0(\"rscan0\", 1:6, \".nii\")  dset <- fmri_dataset(scans=scans, mask=\"mask.nii\", TR=1.5,          run_length=rep(436,6), event_table=facedes) fixed = onset ~ hrf(run) ran = onset ~ trialwise() block = ~ run  betas <- estimate_betas(dset, fixed=fixed, ran=ran, block=block, method=\"mixed\") } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Beta Coefficients for fMRI Data — estimate_betas","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"Estimate beta coefficients (regression parameters) fMRI data using various methods. function supports different estimation approaches : single Single-trial beta estimation effects Fixed random effects regularization Various regularization techniques hrf Optional HRF estimation function estimates betas (regression coefficients) fixed random effects matrix dataset using various methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"","code":"estimate_betas(x, ...)  # S3 method for class 'latent_dataset' estimate_betas(   x,   fixed = NULL,   ran,   block,   method = c(\"mixed\", \"lss\", \"ols\"),   basemod = NULL,   prewhiten = FALSE,   progress = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"x object class matrix_dataset representing matrix dataset ... Additional arguments passed estimation method fixed formula specifying fixed regressors model constant effects (.e., non-varying trials) ran formula specifying random (trialwise) regressors model single trial effects block formula specifying block factor method regression method estimating trialwise betas; one \"mixed\", \"lss\", \"ols\" (default: \"mixed\") basemod baseline_model instance regress data beta estimation (default: NULL) prewhiten currently experimental, default FALSE. progress Logical; show progress bar.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"list class \"fmri_betas\" containing: betas_fixed Fixed effect coefficients betas_ran Random (trial-wise) coefficients design_ran Design matrix random effects design_fixed Design matrix fixed effects design_base Design matrix baseline model method_specific Additional components specific estimation method used list class \"fmri_betas\" containing following components: betas_fixed: Matrix representing fixed effect betas betas_ran: Matrix representing random effect betas design_ran: Design matrix random effects design_fixed: Design matrix fixed effects design_base: Design matrix baseline model","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"generic function methods different dataset types: fmri_dataset volumetric fMRI data matrix_dataset matrix-format data latent_dataset dimensionality-reduced data Available estimation methods include: mixed Mixed-effects model using rrBLUP r1 Rank-1 GLM joint HRF estimation lss Least-squares separate estimation pls Partial least squares regression ols Ordinary least squares","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"Mumford, J. ., et al. (2012). Deconvolving BOLD activation event-related designs multivoxel pattern classification analyses. NeuroImage, 59(3), 2636-2643. Pedregosa, F., et al. (2015). Data-driven HRF estimation encoding decoding models. NeuroImage, 104, 209-220.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Beta Coefficients for fMRI Data — estimate_betas","text":"","code":"# Create example data event_data <- data.frame(   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   onset = c(1, 10, 20, 30),   run = c(1, 1, 1, 1) )  # Create sampling frame and dataset sframe <- sampling_frame(blocklens = 100, TR = 2) dset <- fmridataset::matrix_dataset(   matrix(rnorm(100 * 2), 100, 2),   TR = 2,   run_length = 100,   event_table = event_data )  # Estimate betas using mixed-effects model betas <- estimate_betas(   dset,   fixed = onset ~ hrf(condition),   ran = onset ~ trialwise(),   block = ~run,   method = \"mixed\" )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.matrix_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate betas for a matrix dataset — estimate_betas.matrix_dataset","title":"Estimate betas for a matrix dataset — estimate_betas.matrix_dataset","text":"function estimates betas (regression coefficients) fixed random effects matrix dataset using various methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.matrix_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate betas for a matrix dataset — estimate_betas.matrix_dataset","text":"","code":"# S3 method for class 'matrix_dataset' estimate_betas(   x,   fixed = NULL,   ran,   block,   method = c(\"mixed\", \"lss\", \"ols\"),   basemod = NULL,   fracs = 0.5,   progress = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.matrix_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate betas for a matrix dataset — estimate_betas.matrix_dataset","text":"x object class matrix_dataset representing matrix dataset fixed formula specifying fixed regressors model constant effects (.e., non-varying trials) ran formula specifying random (trialwise) regressors model single trial effects block formula specifying block factor method regression method estimating trialwise betas; one \"mixed\", \"lss\", \"ols\" (default: \"mixed\") basemod baseline_model instance regress data beta estimation (default: NULL) fracs Fraction voxels used prewhitening. progress Logical; show progress bar. ... Additional arguments passed estimation method","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_betas.matrix_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate betas for a matrix dataset — estimate_betas.matrix_dataset","text":"list class \"fmri_betas\" containing following components: betas_fixed: Matrix representing fixed effect betas betas_ran: Matrix representing random effect betas design_ran: Design matrix random effects design_fixed: Design matrix fixed effects design_base: Design matrix baseline model","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate hemodynamic response function (HRF) using Generalized Additive Models (GAMs) — estimate_hrf","title":"Estimate hemodynamic response function (HRF) using Generalized Additive Models (GAMs) — estimate_hrf","text":"function estimates HRF using GAMs mgcv package. HRF can estimated without fixed effects.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate hemodynamic response function (HRF) using Generalized Additive Models (GAMs) — estimate_hrf","text":"","code":"estimate_hrf(   form,   fixed = NULL,   block,   dataset,   bs = c(\"tp\", \"ts\", \"cr\", \"ps\"),   rsam = seq(0, 20, by = 1),   basemod = NULL,   k = 8,   fx = TRUE,   progress = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate hemodynamic response function (HRF) using Generalized Additive Models (GAMs) — estimate_hrf","text":"form formula specifying event model conditions interest fixed formula specifying fixed regressors model constant effects (.e., non-varying trials); default NULL block formula specifying block factor dataset object representing fMRI dataset bs Basis function smooth term GAM; one \"tp\" (default), \"ts\", \"cr\", \"ps\" rsam sequence time points HRF estimated (default: seq(0, 20, = 1)) basemod baseline_model instance regress data HRF estimation (default: NULL) k dimension basis, default 8 fx indicates whether term fixed d.f. regression spline (TRUE) penalized regression spline (FALSE); default TRUE. progress Logical; display progress estimation.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate hemodynamic response function (HRF) using Generalized Additive Models (GAMs) — estimate_hrf","text":"matrix estimated HRF values voxel","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate hemodynamic response function (HRF) using Generalized Additive Models (GAMs) — estimate_hrf","text":"","code":"# To be added"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_tau2.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Between-Study Variance (tau2) — estimate_tau2","title":"Estimate Between-Study Variance (tau2) — estimate_tau2","text":"Estimate -Study Variance (tau2)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_tau2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Between-Study Variance (tau2) — estimate_tau2","text":"","code":"estimate_tau2(y, se, X, method)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_tau2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Between-Study Variance (tau2) — estimate_tau2","text":"y Effect sizes se Standard errors X Design matrix method Estimation method","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/estimate_tau2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Between-Study Variance (tau2) — estimate_tau2","text":"tau2 estimate","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/evaluate_method_performance.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Method Performance on Benchmark Dataset — evaluate_method_performance","title":"Evaluate Method Performance on Benchmark Dataset — evaluate_method_performance","text":"Helper function evaluate performance beta estimation methods benchmark datasets comparing estimated betas ground truth.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/evaluate_method_performance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Method Performance on Benchmark Dataset — evaluate_method_performance","text":"","code":"evaluate_method_performance(   dataset_name,   estimated_betas,   method_name = \"Unknown\" )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/evaluate_method_performance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Method Performance on Benchmark Dataset — evaluate_method_performance","text":"dataset_name Character string specifying dataset use estimated_betas Matrix estimated beta values (conditions x voxels) method_name Character string describing method used","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/evaluate_method_performance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Method Performance on Benchmark Dataset — evaluate_method_performance","text":"list performance metrics","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/evaluate_method_performance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Method Performance on Benchmark Dataset — evaluate_method_performance","text":"","code":"if (FALSE) { # \\dontrun{ # Load dataset and create design matrix dataset <- load_benchmark_dataset(\"BM_Canonical_HighSNR\") X <- create_design_matrix_from_benchmark(\"BM_Canonical_HighSNR\", fmrihrf::HRF_SPMG1)  # Fit simple linear model betas <- solve(t(X) %*% X) %*% t(X) %*% dataset$Y_noisy  # Evaluate performance performance <- evaluate_method_performance(\"BM_Canonical_HighSNR\",                                            betas[-1, ], # Remove intercept                                           \"OLS\") } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/event_table.convolved_term.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract event table from convolved term — event_table.convolved_term","title":"Extract event table from convolved term — event_table.convolved_term","text":"Extract event table convolved term object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/event_table.convolved_term.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract event table from convolved term — event_table.convolved_term","text":"","code":"# S3 method for class 'convolved_term' event_table(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/event_table.convolved_term.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract event table from convolved term — event_table.convolved_term","text":"x convolved_term object ... Additional arguments passed underlying event_table method","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/event_table.convolved_term.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract event table from convolved term — event_table.convolved_term","text":"data.frame containing event table","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extend_betas_landmarks.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Nyström / barycentric extension: B (p x V) from B_L (p x L) — extend_betas_landmarks","title":"Apply Nyström / barycentric extension: B (p x V) from B_L (p x L) — extend_betas_landmarks","text":"Apply Nyström / barycentric extension: B (p x V) B_L (p x L)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extend_betas_landmarks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Nyström / barycentric extension: B (p x V) from B_L (p x L) — extend_betas_landmarks","text":"","code":"extend_betas_landmarks(BL, W)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extend_betas_landmarks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Nyström / barycentric extension: B (p x V) from B_L (p x L) — extend_betas_landmarks","text":"BL p x L dense matrix betas landmarks W V x L sparse weight matrix (rows sum 1)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extend_betas_landmarks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Nyström / barycentric extension: B (p x V) from B_L (p x L) — extend_betas_landmarks","text":"p x V dense matrix extended betas","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_csv_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Data for Meta-Analysis from CSV — extract_csv_data","title":"Extract Data for Meta-Analysis from CSV — extract_csv_data","text":"Extract Data Meta-Analysis CSV","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_csv_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Data for Meta-Analysis from CSV — extract_csv_data","text":"","code":"extract_csv_data(gd, roi = NULL, contrast = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_csv_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Data for Meta-Analysis from CSV — extract_csv_data","text":"gd group_data_csv object roi Optional ROI name extract contrast Optional contrast name extract","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_csv_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Data for Meta-Analysis from CSV — extract_csv_data","text":"List effect sizes variances","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_csv_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Data for Meta-Analysis from CSV — extract_csv_data","text":"","code":"gd <- fmrireg:::.demo_group_data_csv() extract_csv_data(gd, roi = \"ROI1\") #> $beta #> [1] 0.20 0.30 0.25 #>  #> $se #> [1] 0.1 0.1 0.1 #>  #> $var #> [1] 0.01 0.01 0.01 #>  #> $subjects #> [1] \"s1\" \"s2\" \"s3\" #>"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_subject_ids_from_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Subject IDs from File Paths — extract_subject_ids_from_paths","title":"Extract Subject IDs from File Paths — extract_subject_ids_from_paths","text":"Extract Subject IDs File Paths","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_subject_ids_from_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Subject IDs from File Paths — extract_subject_ids_from_paths","text":"","code":"extract_subject_ids_from_paths(paths)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_subject_ids_from_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Subject IDs from File Paths — extract_subject_ids_from_paths","text":"paths Character vector file paths","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/extract_subject_ids_from_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Subject IDs from File Paths — extract_subject_ids_from_paths","text":"Character vector subject IDs","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.default.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Contrasts for Linear Model (Default Method) — fit_contrasts.default","title":"Fit Contrasts for Linear Model (Default Method) — fit_contrasts.default","text":"function calculates contrasts fitted linear model.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Contrasts for Linear Model (Default Method) — fit_contrasts.default","text":"","code":"# Default S3 method fit_contrasts(object, conmat, colind, se = TRUE, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Contrasts for Linear Model (Default Method) — fit_contrasts.default","text":"object fitted linear model object. conmat contrast matrix contrast vector. colind subset column indices design associated contrast. se Whether compute standard errors, t-statistics, p-values (default: TRUE). ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Contrasts for Linear Model (Default Method) — fit_contrasts.default","text":"list containing following elements: conmat: Contrast matrix. sigma: Residual standard error. df.residual: Degrees freedom residuals. estimate: Estimated contrasts. se: Standard errors contrasts (se = TRUE). stat: t-statistics contrasts (se = TRUE). prob: Probabilities associated t-statistics (se = TRUE). stat_type: Type statistics calculated.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.fmri_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Contrasts for fMRI Linear Model Objects — fit_contrasts.fmri_lm","title":"Fit Contrasts for fMRI Linear Model Objects — fit_contrasts.fmri_lm","text":"S3 method computing contrasts fitted fmri_lm objects.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.fmri_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Contrasts for fMRI Linear Model Objects — fit_contrasts.fmri_lm","text":"","code":"# S3 method for class 'fmri_lm' fit_contrasts(object, contrasts, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.fmri_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Contrasts for fMRI Linear Model Objects — fit_contrasts.fmri_lm","text":"object fmri_lm object contrasts list contrast specifications ... Additional arguments (unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.fmri_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Contrasts for fMRI Linear Model Objects — fit_contrasts.fmri_lm","text":"list contrast results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Contrasts — fit_contrasts","title":"Fit Contrasts — fit_contrasts","text":"Generic function fitting contrasts model objects.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Contrasts — fit_contrasts","text":"","code":"fit_contrasts(object, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Contrasts — fit_contrasts","text":"object fitted model object ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Contrasts — fit_contrasts","text":"Contrast results (format depends method)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_lm_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Linear Model Contrasts — fit_lm_contrasts","title":"Fit Linear Model Contrasts — fit_lm_contrasts","text":"function computes contrasts beta statistics fitted linear model.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_lm_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Linear Model Contrasts — fit_lm_contrasts","text":"","code":"fit_lm_contrasts(fit, conlist, fcon, vnames, se = TRUE)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_lm_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Linear Model Contrasts — fit_lm_contrasts","text":"fit fitted linear model object. conlist list contrast matrices. fcon list F-contrasts. vnames Variable names corresponding model coefficients. se Logical. Whether compute standard errors. Default TRUE.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_lm_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Linear Model Contrasts — fit_lm_contrasts","text":"list containing contrasts, beta statistics, fitted model.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Meta-Analysis for a Chunk of Voxels — fit_meta_chunk","title":"Fit Meta-Analysis for a Chunk of Voxels — fit_meta_chunk","text":"Fit Meta-Analysis Chunk Voxels","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Meta-Analysis for a Chunk of Voxels — fit_meta_chunk","text":"","code":"fit_meta_chunk(   chunk_data,   X,   method,   robust,   weights,   weights_custom,   n_threads,   combine = NULL,   contrasts = NULL,   return_cov = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Meta-Analysis for a Chunk of Voxels — fit_meta_chunk","text":"chunk_data List beta se matrices X Design matrix method Meta-analysis method robust Robust estimation method weights Weighting scheme weights_custom Custom weights n_threads Number threads","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Meta-Analysis for a Chunk of Voxels — fit_meta_chunk","text":"List meta-analysis results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Meta-Analysis for a Single Voxel/ROI — fit_meta_single","title":"Fit Meta-Analysis for a Single Voxel/ROI — fit_meta_single","text":"Fit Meta-Analysis Single Voxel/ROI","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Meta-Analysis for a Single Voxel/ROI — fit_meta_single","text":"","code":"fit_meta_single(y, se, X, method, robust, weights, weights_custom)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Meta-Analysis for a Single Voxel/ROI — fit_meta_single","text":"y Effect sizes se Standard errors X Design matrix method Meta-analysis method robust Robust estimation method weights Weighting scheme weights_custom Custom weights","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fit_meta_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Meta-Analysis for a Single Voxel/ROI — fit_meta_single","text":"List meta-analysis results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.fmri_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Fitted Hemodynamic Response Functions for an fmri_lm Object — fitted_hrf.fmri_lm","title":"Compute Fitted Hemodynamic Response Functions for an fmri_lm Object — fitted_hrf.fmri_lm","text":"method computes fitted hemodynamic response functions (HRFs) fmri_lm object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.fmri_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Fitted Hemodynamic Response Functions for an fmri_lm Object — fitted_hrf.fmri_lm","text":"","code":"# S3 method for class 'fmri_lm' fitted_hrf(x, sample_at = seq(0, 24, by = 1), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.fmri_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Fitted Hemodynamic Response Functions for an fmri_lm Object — fitted_hrf.fmri_lm","text":"x fmri_lm object fitted HRFs computed. sample_at numeric vector time points HRFs sampled. Default seq(0, 24, = 1). ... Additional arguments (currently unused).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.fmri_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Fitted Hemodynamic Response Functions for an fmri_lm Object — fitted_hrf.fmri_lm","text":"list element corresponds event term fmri_lm object. element contains: pred matrix predicted HRF values. design tibble containing design matrix HRFs.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.html","id":null,"dir":"Reference","previous_headings":"","what":"fitted_hrf — fitted_hrf","title":"fitted_hrf — fitted_hrf","text":"Compute return fitted hemodynamic response function (HRF) model object. HRF represents expected BOLD response neural activity. models multiple basis functions, returns combined HRF shape.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fitted_hrf — fitted_hrf","text":"","code":"fitted_hrf(x, sample_at, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fitted_hrf — fitted_hrf","text":"x object fitted HRF computed sample_at vector time points HRF sampled ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fitted_hrf — fitted_hrf","text":"numeric vector containing fitted HRF values requested time points","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"fitted_hrf — fitted_hrf","text":"generic function computes fitted hemodynamic response function (HRF) object. method needs implemented specific object types.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fitted_hrf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fitted_hrf — fitted_hrf","text":"","code":"# Create a simple dataset with two conditions X <- matrix(rnorm(100 * 100), 100, 100)  # 100 timepoints, 100 voxels event_data <- data.frame(   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   onsets = c(1, 25, 50, 75),   run = c(1, 1, 1, 1) )  # Create dataset and sampling frame dset <- fmridataset::matrix_dataset(X, TR = 2, run_length = 100, event_table = event_data) sframe <- sampling_frame(blocklens = 100, TR = 2)  # Create event model with canonical HRF evmodel <- event_model(   onsets ~ hrf(condition),   data = event_data,   block = ~run,   sampling_frame = sframe )  # Fit model fit <- fmri_lm(   onsets ~ hrf(condition),   block = ~run,   dataset = dset )  # Get fitted HRF at specific timepoints times <- seq(0, 20, by = 0.5)  # Sample from 0-20s every 0.5s hrf_values <- fitted_hrf(fit, sample_at = times)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/flip_sign.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip Sign of Coefficients — flip_sign","title":"Flip Sign of Coefficients — flip_sign","text":"Reverses sign coefficient-like outputs fit object. Useful switching -B B-conventions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/flip_sign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip Sign of Coefficients — flip_sign","text":"","code":"flip_sign(fit, coef = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/flip_sign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip Sign of Coefficients — flip_sign","text":"fit fmri_ttest_fit similar object coef Character vector coefficient names flip (default: )","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/flip_sign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip Sign of Coefficients — flip_sign","text":"Modified fit object flipped signs","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_benchmark_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmark fMRI datasets — fmri_benchmark_datasets","title":"Benchmark fMRI datasets — fmri_benchmark_datasets","text":"list simulated datasets used testing package.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_benchmark_datasets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Benchmark fMRI datasets — fmri_benchmark_datasets","text":"list elements BM_Canonical_HighSNR, BM_Canonical_LowSNR, BM_HRF_Variability_AcrossVoxels, BM_Trial_Amplitude_Variability, BM_Complex_Realistic, metadata. element contains simulated BOLD data ground truth information.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_benchmark_datasets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Benchmark fMRI datasets — fmri_benchmark_datasets","text":"Generated data-raw/generate_benchmark_datasets.R","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_latent_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","title":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","text":"function estimates regression model fMRI data using latent component dataset. dataset must type latent_dataset, requires LatentNeuroVec input.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_latent_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","text":"","code":"fmri_latent_lm(   formula,   block,   baseline_model = NULL,   dataset,   durations,   drop_empty = TRUE,   robust = FALSE,   autocor = c(\"none\", \"auto\", \"ar1\", \"ar2\", \"arma\"),   bootstrap = FALSE,   nboot = 1000,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_latent_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","text":"formula formula specifying regression model. block factor indicating block structure data. baseline_model optional baseline model. dataset dataset class 'latent_dataset'. durations duration events dataset. drop_empty Whether drop empty events model. Default TRUE. robust Whether use robust regression methods. Default FALSE. autocor autocorrelation correction method use components. One 'none', 'auto', 'ar1', 'ar2', 'arma'. Default 'none'. bootstrap Whether compute bootstrapped parameter estimates. Default FALSE. nboot number bootstrap iterations. Default 1000. ... Additional arguments.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_latent_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","text":"object class 'fmri_latent_lm' containing regression model dataset.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_latent_lm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","text":"method currently experimental.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_latent_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast fMRI Regression Model Estimation from a Latent Component Dataset — fmri_latent_lm","text":"","code":"# Estimate the fMRI regression model using the latent dataset #result <- fmri_latent_lm(formula = formula, block = block, dataset = dset, #                          durations = NULL, drop_empty = TRUE, robust = FALSE)  # Print the result #print(result)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","title":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","text":"fmri_lm generic fitting fMRI regression models. default interface accepts model formula dataset. alternative method can used preconstructed fmri_model object already contains design data.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","text":"","code":"fmri_lm(formula, ...)  # S3 method for class 'formula' fmri_lm(   formula,   block,   baseline_model = NULL,   dataset,   durations = 0,   drop_empty = TRUE,   robust = FALSE,   robust_options = NULL,   ar_options = NULL,   strategy = c(\"runwise\", \"chunkwise\"),   nchunks = 10,   use_fast_path = FALSE,   progress = FALSE,   ar_voxelwise = FALSE,   parallel_voxels = FALSE,   cor_struct = NULL,   cor_iter = NULL,   cor_global = NULL,   ar1_exact_first = NULL,   ar_p = NULL,   robust_psi = NULL,   robust_max_iter = NULL,   robust_scale_scope = NULL,   ... )  # S3 method for class 'fmri_model' fmri_lm(   formula,   dataset = NULL,   robust = FALSE,   robust_options = NULL,   ar_options = NULL,   strategy = c(\"runwise\", \"chunkwise\"),   nchunks = 10,   use_fast_path = FALSE,   progress = FALSE,   ar_voxelwise = FALSE,   parallel_voxels = FALSE,   cor_struct = NULL,   cor_iter = NULL,   cor_global = NULL,   ar1_exact_first = NULL,   ar_p = NULL,   robust_psi = NULL,   robust_max_iter = NULL,   robust_scale_scope = NULL,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","text":"formula model formula describing event structure fmri_model object. ... Additional arguments passed chosen method. block model formula block structure. baseline_model (Optional) baseline_model object. Default NULL. dataset fmri_dataset object containing time-series data. durations vector event durations. Default 0. drop_empty Logical. Whether remove factor levels zero size. Default TRUE. robust Logical character. Either FALSE (robust fitting), TRUE (use Huber), one \"huber\" \"bisquare\". Default FALSE. robust_options List robust fitting options. See Details. ar_options List autoregressive modeling options. See Details. strategy data splitting strategy, either \"runwise\" \"chunkwise\". Default \"runwise\". nchunks Number data chunks strategy \"chunkwise\". Default 10. use_fast_path Logical. TRUE, use matrix-based computation speed. Default FALSE. progress Logical. Whether display progress bar model fitting. Default FALSE. ar_voxelwise Logical. Estimate AR parameters voxel-wise (overrides ar_options$voxelwise). parallel_voxels Logical. Parallelize across voxels supported. cor_struct Character. Shorthand ar_options$struct (e.g., \"ar1\", \"ar2\", \"arp\"). cor_iter Integer. Shorthand ar_options$iter_gls. cor_global Logical. Shorthand ar_options$global. ar1_exact_first Logical. Shorthand ar_options$exact_first. ar_p Integer. Shorthand ar_options$p. robust_psi Character. Shorthand robust_options$type (e.g., \"huber\", \"bisquare\"). robust_max_iter Integer. Shorthand robust_options$max_iter. robust_scale_scope Character. Shorthand robust_options$scale_scope (\"run\" \"global\").","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","text":"object class fmri_lm. fitted linear regression model fMRI data analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","text":"robust_options may contain: type: Character logical. Type robust fitting (FALSE, \"huber\", \"bisquare\") k_huber: Numeric. Tuning constant Huber's psi (default: 1.345) c_tukey: Numeric. Tuning constant Tukey's bisquare psi (default: 4.685) max_iter: Integer. Maximum IRLS iterations (default: 2) scale_scope: Character. Scope scale estimation (\"run\" \"global\") reestimate_phi: Logical. Whether re-estimate AR parameters robust fitting ar_options may contain: struct: Character. Correlation structure (\"iid\", \"ar1\", \"ar2\", \"arp\") p: Integer. AR order struct = \"arp\" iter_gls: Integer. Number GLS iterations (default: 1) global: Logical. Use global AR coefficients (default: FALSE) voxelwise: Logical. Estimate AR parameters voxel-wise (default: FALSE) exact_first: Logical. Apply exact AR(1) scaling first sample (default: FALSE)","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Linear Regression Model for fMRI Data Analysis — fmri_lm","text":"","code":"facedes <- subset(read.table(system.file(\"extdata\", \"face_design.txt\", package = \"fmrireg\"),  header=TRUE), face_gen != \"n/a\") facedes$face_gen <- droplevels(factor(facedes$face_gen)) sframe <- sampling_frame(rep(430/2,6), TR=2) ev <- event_model(onset ~ hrf(face_gen, basis=\"gaussian\"), data=facedes,  block= ~ run, sampling_frame=sframe) globonsets <- fmrihrf::global_onsets(sframe, facedes$onset, facedes$run) reg1_signal <- regressor(globonsets[facedes$face_gen == \"male\"], hrf=fmrihrf::HRF_GAUSSIAN) reg2_signal <- regressor(globonsets[facedes$face_gen == \"female\"], hrf=fmrihrf::HRF_GAUSSIAN) time <- samples(sframe, global=TRUE) y1 <- fmrihrf::evaluate(reg1_signal, time)*1.5 y2 <- fmrihrf::evaluate(reg2_signal, time)*3.0 y <- y1+y2 ys1 <- y + rnorm(length(y), sd=.02) ys2 <- y + rnorm(length(y), sd=.02)  h <<- gen_hrf(fmrihrf::hrf_bspline, N=7, span=25) dset <- matrix_dataset(cbind(ys1,ys2), TR=2,                         run_length=fmrihrf::blocklens(sframe),                         event_table=facedes) flm <- fmri_lm(onset ~ hrf(face_gen,                             basis=gen_hrf(fmrihrf::hrf_bspline, N=7, span=25)),                 block = ~ run,                 strategy=\"chunkwise\", nchunks=1, dataset=dset)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Configuration for fmri_lm fitting — fmri_lm_control","title":"Configuration for fmri_lm fitting — fmri_lm_control","text":"fmri_lm_control() creates fmri_lm_config object collecting options robust autoregressive modelling. validates inputs applies defaults downstream functions receive single structured list.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configuration for fmri_lm fitting — fmri_lm_control","text":"","code":"fmri_lm_control(robust_options = list(), ar_options = list())"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configuration for fmri_lm fitting — fmri_lm_control","text":"robust_options list robust fitting options. See Details. ar_options list autoregressive modelling options. See Details.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configuration for fmri_lm fitting — fmri_lm_control","text":"object class fmri_lm_config.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_control.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Configuration for fmri_lm fitting — fmri_lm_control","text":"robust_options may contain: type (FALSE, \"huber\", \"bisquare\") k_huber c_tukey max_iter scale_scope (\"run\", \"global\") reestimate_phi (logical) ar_options may contain: struct (\"iid\", \"ar1\", \"ar2\", \"arp\") p (order \"arp\") iter_gls (integer number GLS iterations) global (logical, use global phi) voxelwise (logical) exact_first (logical)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit an fMRI Linear Regression Model with a Specified Fitting Strategy — fmri_lm_fit","title":"Fit an fMRI Linear Regression Model with a Specified Fitting Strategy — fmri_lm_fit","text":"function fits fMRI linear regression model using specified fmri_model object, dataset, data splitting strategy (either \"runwise\" \"chunkwise\"). primarily internal function used fmri_lm function.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit an fMRI Linear Regression Model with a Specified Fitting Strategy — fmri_lm_fit","text":"","code":"fmri_lm_fit(   fmrimod,   dataset,   strategy = c(\"runwise\", \"chunkwise\"),   cfg,   nchunks = 10,   use_fast_path = FALSE,   progress = FALSE,   parallel_voxels = FALSE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit an fMRI Linear Regression Model with a Specified Fitting Strategy — fmri_lm_fit","text":"fmrimod fmri_model object. dataset fmri_dataset object containing time-series data. strategy data splitting strategy, either \"runwise\" \"chunkwise\". Default \"runwise\". cfg fmri_lm_config object containing fitting options. See fmri_lm_control. nchunks Number data chunks strategy \"chunkwise\". Default 10. use_fast_path Logical. TRUE, use matrix-based computation speed. Default FALSE. progress Logical. Whether display progress bar model fitting. Default FALSE. parallel_voxels Logical. TRUE, voxelwise AR processing within runs parallelised using future.apply. Default FALSE. ... Additional arguments.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_lm_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit an fMRI Linear Regression Model with a Specified Fitting Strategy — fmri_lm_fit","text":"fitted fMRI linear regression model specified fitting strategy.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Group-Level Meta-Analysis — fmri_meta","title":"Fit Group-Level Meta-Analysis — fmri_meta","text":"Performs voxelwise ROI-based meta-analysis group fMRI data using fixed-effects, random-effects, robust methods. Supports meta-regression covariates group comparisons moderator analyses.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Group-Level Meta-Analysis — fmri_meta","text":"","code":"fmri_meta(   data,   formula = ~1,   method = c(\"pm\", \"fe\", \"dl\", \"reml\"),   robust = c(\"none\", \"huber\", \"t\"),   weights = c(\"ivw\", \"equal\", \"custom\"),   weights_custom = NULL,   combine = NULL,   contrasts = NULL,   return_cov = NULL,   chunk_size = 10000,   n_threads = getOption(\"fmrireg.num_threads\", 0),   verbose = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Group-Level Meta-Analysis — fmri_meta","text":"data group_data object created group_data formula Formula specifying meta-regression model. Default ~ 1 (intercept ). Use ~ 1 + group group comparisons, include continuous covariates. method Character string specifying meta-analysis method: \"fe\": Fixed-effects (inverse variance weighted) \"pm\": Paule-Mandel random-effects (default, good whole-brain) \"dl\": DerSimonian-Laird random-effects \"reml\": Restricted maximum likelihood random-effects robust Character string specifying robust estimation: \"none\": robust estimation (default) \"huber\": Huber M-estimator IRLS \"t\": Student-t mixture model (heavy-tailed distributions) weights Character string specifying weighting scheme: \"ivw\": Inverse variance weighting (default) \"equal\": Equal weights subjects \"custom\": User-provided weights (must supply weights argument) weights_custom Numeric vector matrix custom weights (required weights = \"custom\"). vector, length must equal number subjects. matrix, must subjects x features. combine t-statistic-data, combination method (\"stouffer\", \"fisher\", \"lancaster\"). Stouffer combines z-scores supports equal, inverse-variance, custom weighting (via weights). Fisher uses equal weights. Lancaster implements weighted Fisher method mapping weights per-subject degrees freedom. contrasts Optional numeric vector matrix specifying fit-time exact contrasts. vector provided, names must match column names design matrix X. matrix columns corresponding predictors rows corresponding contrasts. return_cov Optional. set \"tri\", returns packed upper-triangular Var(beta) per feature $cov enable exact post-hoc contrasts via contrast(). chunk_size Number voxels process (default: 10000) n_threads Number parallel threads use. Defaults fmrireg.num_threads option. verbose Logical. Print progress messages (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Group-Level Meta-Analysis — fmri_meta","text":"fmri_meta object containing: coefficients: Meta-regression coefficients se: Standard errors tau2: -study variance (random-effects) I2: -squared heterogeneity statistic Q: Cochran's Q statistic model: Model specification data: Input group_data object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Group-Level Meta-Analysis — fmri_meta","text":"","code":"if (FALSE) { # \\dontrun{ # Simple fixed-effects meta-analysis fit <- fmri_meta(gd, method = \"fe\")  # Random-effects with group comparison fit <- fmri_meta(gd, formula = ~ 1 + group, method = \"pm\")  # Robust meta-regression with continuous covariate fit <- fmri_meta(gd, formula = ~ 1 + age + sex, method = \"reml\", robust = \"huber\")  # Stouffer's Z for t-statistics only fit <- fmri_meta(gd_tstat, combine = \"stouffer\")  # Exact post-hoc contrasts by storing covariance fit_cov <- fmri_meta(gd, formula = ~ 1 + group, method = \"pm\", return_cov = \"tri\") con <- contrast(fit_cov, c(\"(Intercept)\" = 0, group = 1))  # Exact fit-time contrast without storing covariance fit_con <- fmri_meta(gd, formula = ~ 1 + group, method = \"pm\",                      contrasts = c(\"(Intercept)\" = 0, group = 1)) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Meta-Analysis Models — fmri_meta_fit","title":"Fit Meta-Analysis Models — fmri_meta_fit","text":"Low-level function calls C++ meta-analysis implementation. typically called internally higher-level functions like fmri_meta().","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Meta-Analysis Models — fmri_meta_fit","text":"","code":"fmri_meta_fit(   Y,   V,   X,   method = c(\"pm\", \"dl\", \"fe\", \"reml\"),   robust = c(\"none\", \"huber\"),   huber_c = 1.345,   robust_iter = 2,   n_threads = getOption(\"fmrireg.num_threads\", 0) )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Meta-Analysis Models — fmri_meta_fit","text":"Y Numeric matrix effect sizes (subjects x features) V Numeric matrix variances (subjects x features) X Numeric matrix; design matrix (subjects x predictors), including intercept method Character scalar; meta-analysis method: \"pm\" (Paule-Mandel), \"dl\" (DerSimonian-Laird), \"fe\" (fixed-effects), \"reml\" (REML, uses PM solver) robust Character scalar; robust estimation method: \"none\" \"huber\" huber_c Numeric scalar; tuning constant Huber M-estimator (default: 1.345). Smaller values provide robust estimates may reduce efficiency. robust_iter Integer scalar; number IRLS iterations robust estimation (default: 2) n_threads Integer scalar; number OpenMP threads (0 = use available)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Meta-Analysis Models — fmri_meta_fit","text":"List components: beta Numeric matrix coefficients (predictors x features) se Numeric matrix standard errors (predictors x features) z Numeric matrix z-scores (predictors x features) tau2 Numeric vector -study variance estimates Q_fe Numeric vector Q statistics fixed-effects model I2_fe Numeric vector ² statistics fixed-effects model df Numeric vector degrees freedom ok Logical vector indicating successful fits","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Meta-Analysis Models with Exact Contrasts — fmri_meta_fit_contrasts","title":"Fit Meta-Analysis Models with Exact Contrasts — fmri_meta_fit_contrasts","text":"Low-level function calls C++ meta-analysis implementation returns exact contrast statistics c' (X' W X)^(-1) c provided contrasts.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Meta-Analysis Models with Exact Contrasts — fmri_meta_fit_contrasts","text":"","code":"fmri_meta_fit_contrasts(   Y,   V,   X,   Cmat,   method = c(\"pm\", \"dl\", \"fe\", \"reml\"),   robust = c(\"none\", \"huber\"),   huber_c = 1.345,   robust_iter = 2,   n_threads = getOption(\"fmrireg.num_threads\", 0) )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Meta-Analysis Models with Exact Contrasts — fmri_meta_fit_contrasts","text":"Y, V, X See fmri_meta_fit Cmat Numeric matrix K x J (columns contrasts predictors) method Character scalar; meta-analysis method: \"pm\" (Paule-Mandel), \"dl\" (DerSimonian-Laird), \"fe\" (fixed-effects), \"reml\" (REML, uses PM solver) robust Character scalar; robust estimation method: \"none\" \"huber\" huber_c Numeric scalar; tuning constant Huber M-estimator (default: 1.345). Smaller values provide robust estimates may reduce efficiency. robust_iter Integer scalar; number IRLS iterations robust estimation (default: 2) n_threads Integer scalar; number OpenMP threads (0 = use available)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Meta-Analysis Models with Exact Contrasts — fmri_meta_fit_contrasts","text":"List base meta outputs plus c_beta, c_se, c_z","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Meta-Analysis and return packed covariance per voxel — fmri_meta_fit_cov","title":"Fit Meta-Analysis and return packed covariance per voxel — fmri_meta_fit_cov","text":"Fit Meta-Analysis return packed covariance per voxel","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Meta-Analysis and return packed covariance per voxel — fmri_meta_fit_cov","text":"","code":"fmri_meta_fit_cov(   Y,   V,   X,   method = c(\"pm\", \"dl\", \"fe\", \"reml\"),   robust = c(\"none\", \"huber\"),   huber_c = 1.345,   robust_iter = 2,   n_threads = getOption(\"fmrireg.num_threads\", 0) )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Meta-Analysis and return packed covariance per voxel — fmri_meta_fit_cov","text":"Y Numeric matrix effect sizes (subjects x features) V Numeric matrix variances (subjects x features) X Numeric matrix; design matrix (subjects x predictors), including intercept method Character scalar; meta-analysis method: \"pm\" (Paule-Mandel), \"dl\" (DerSimonian-Laird), \"fe\" (fixed-effects), \"reml\" (REML, uses PM solver) robust Character scalar; robust estimation method: \"none\" \"huber\" huber_c Numeric scalar; tuning constant Huber M-estimator (default: 1.345). Smaller values provide robust estimates may reduce efficiency. robust_iter Integer scalar; number IRLS iterations robust estimation (default: 2) n_threads Integer scalar; number OpenMP threads (0 = use available)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Meta-Analysis and return packed covariance per voxel — fmri_meta_fit_cov","text":"List base outputs cov_tri (tsize x P) tsize = K*(K+1)/2","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_extended.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended Meta-Analysis Fit with Voxelwise Covariate — fmri_meta_fit_extended","title":"Extended Meta-Analysis Fit with Voxelwise Covariate — fmri_meta_fit_extended","text":"Wrapper meta-analysis supports optional voxelwise covariate. extends basic fmri_meta_fit handle per-voxel covariates.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_extended.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended Meta-Analysis Fit with Voxelwise Covariate — fmri_meta_fit_extended","text":"","code":"fmri_meta_fit_extended(   Y,   V,   X,   method = c(\"pm\", \"dl\", \"fe\", \"reml\"),   robust = c(\"none\", \"huber\"),   huber_c = 1.345,   robust_iter = 2,   voxelwise = NULL,   center_voxelwise = TRUE,   voxel_name = \"voxel_cov\",   n_threads = getOption(\"fmrireg.num_threads\", 0) )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_extended.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended Meta-Analysis Fit with Voxelwise Covariate — fmri_meta_fit_extended","text":"Y Matrix effect sizes (S x P) V Matrix variances (S x P) X Design matrix (S x K) method Meta-analysis method robust Robust estimation method huber_c Huber tuning constant robust_iter Number IRLS iterations voxelwise Optional voxelwise covariate matrix (S x P) center_voxelwise Logical; center voxelwise covariate per feature voxel_name Name voxelwise coefficient n_threads Number threads","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_meta_fit_extended.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended Meta-Analysis Fit with Voxelwise Covariate — fmri_meta_fit_extended","text":"List meta-analysis results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an fMRI Regression Model — fmri_model","title":"Construct an fMRI Regression Model — fmri_model","text":"function constructs fMRI regression model consisting event model baseline model. resulting model can used analysis fMRI data.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an fMRI Regression Model — fmri_model","text":"","code":"fmri_model(event_model, baseline_model, dataset)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an fMRI Regression Model — fmri_model","text":"event_model object class \"event_model\" representing event-related part fMRI regression model. baseline_model object class \"baseline_model\" representing baseline-related part fMRI regression model. dataset fmri_dataset used build model.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an fMRI Regression Model — fmri_model","text":"object class fmri_model containing event baseline models along dataset.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ols_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"OLS Fit with Optional Voxelwise Covariate — fmri_ols_fit","title":"OLS Fit with Optional Voxelwise Covariate — fmri_ols_fit","text":"Wrapper OLS t-tests supports optional voxelwise covariate.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ols_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OLS Fit with Optional Voxelwise Covariate — fmri_ols_fit","text":"","code":"fmri_ols_fit(   Y,   X,   voxelwise = NULL,   center_voxelwise = TRUE,   voxel_name = \"voxel_cov\" )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ols_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OLS Fit with Optional Voxelwise Covariate — fmri_ols_fit","text":"Y Outcome matrix (S x P) X Design matrix (S x K) voxelwise Optional voxelwise covariate matrix (S x P) center_voxelwise Logical; center voxelwise covariate per feature voxel_name Name voxelwise coefficient","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ols_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OLS Fit with Optional Voxelwise Covariate — fmri_ols_fit","text":"List OLS results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_rlm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a Robust Linear Model for fMRI Data Analysis — fmri_rlm","title":"Fit a Robust Linear Model for fMRI Data Analysis — fmri_rlm","text":"function fits robust linear regression model fMRI data analysis using specified model formula, block structure, dataset. model can fit using either runwise chunkwise data splitting strategy.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_rlm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a Robust Linear Model for fMRI Data Analysis — fmri_rlm","text":"","code":"fmri_rlm(   formula,   block,   baseline_model = NULL,   dataset,   durations = 0,   drop_empty = TRUE,   strategy = c(\"runwise\", \"chunkwise\"),   nchunks = 10,   cor_struct = c(\"iid\", \"ar1\", \"ar2\", \"arp\"),   cor_iter = 1L,   cor_global = FALSE,   ar_p = NULL,   ar1_exact_first = FALSE,   robust_psi = c(\"huber\", \"bisquare\"),   robust_k_huber = 1.345,   robust_c_tukey = 4.685,   robust_max_iter = 2L,   robust_scale_scope = c(\"run\", \"global\"),   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_rlm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a Robust Linear Model for fMRI Data Analysis — fmri_rlm","text":"formula model formula describing event structure fmri_model object. block model formula block structure. baseline_model (Optional) baseline_model object. Default NULL. dataset fmri_dataset object containing time-series data. durations vector event durations. Default 0. drop_empty Logical. Whether remove factor levels zero size. Default TRUE. strategy data splitting strategy, either \"runwise\" \"chunkwise\". Default \"runwise\". nchunks Number data chunks strategy \"chunkwise\". Default 10. cor_struct Correlation structure: \"iid\", \"ar1\", \"ar2\", \"arp\". Default \"iid\". cor_iter Number iterations AR parameter estimation. Default 1. cor_global Whether use global AR parameters. Default FALSE. ar_p Order autoregressive model \"arp\" structure. Default NULL. ar1_exact_first Whether use exact AR(1) first iteration. Default FALSE. robust_psi Robust psi function: \"huber\" \"bisquare\". Default \"huber\". robust_k_huber Tuning constant Huber's psi. Default 1.345. robust_c_tukey Tuning constant Tukey's bisquare. Default 4.685. robust_max_iter Maximum iterations robust fitting. Default 2. robust_scale_scope Scope robust scale estimation: \"run\" \"global\". Default \"run\". ... Additional arguments passed fmri_lm","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_rlm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a Robust Linear Model for fMRI Data Analysis — fmri_rlm","text":"fitted robust linear regression model fMRI data analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_rlm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a Robust Linear Model for fMRI Data Analysis — fmri_rlm","text":"","code":"etab <- data.frame(onset=c(1,30,15,25), fac=factor(c(\"A\", \"B\", \"A\", \"B\")), run=c(1,1,2,2)) etab2 <- data.frame(onset=c(1,30,65,75), fac=factor(c(\"A\", \"B\", \"A\", \"B\")), run=c(1,1,1,1)) mat <- matrix(rnorm(100*100), 100,100) dset <- fmridataset::matrix_dataset(mat, TR=1, run_length=c(50,50),event_table=etab) dset2 <- fmridataset::matrix_dataset(mat, TR=1, run_length=c(100),event_table=etab2) lm.1 <- fmri_rlm(onset ~ hrf(fac), block= ~ run, dataset=dset) lm.2 <- fmri_rlm(onset ~ hrf(fac), block= ~ run, dataset=dset2)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"fmrireg t-tests for Group Analysis — fmri_ttest","title":"fmrireg t-tests for Group Analysis — fmri_ttest","text":"Performs group-level t-tests fMRI data support one-sample, two-sample, paired, ANCOVA designs. Provides meta-analysis classical t-test engines, mirroring AFNI 3dttest++ functionality within fmrireg framework.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fmrireg t-tests for Group Analysis — fmri_ttest","text":"","code":"fmri_ttest(   gd,   formula = ~1,   engine = c(\"auto\", \"meta\", \"classic\", \"welch\"),   paired = FALSE,   mu0 = 0,   contrast = NULL,   mc = NULL,   alpha = 0.05,   sign = c(\"AminusB\", \"BminusA\"),   mask = NULL,   voxelwise_cov = NULL,   center_voxelwise = TRUE,   voxel_name = \"voxel_cov\",   weights = c(\"ivw\", \"equal\", \"custom\"),   weights_custom = NULL,   combine = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fmrireg t-tests for Group Analysis — fmri_ttest","text":"gd group_data object data frame subject data formula R formula -subjects design. Examples: ~ 1: One-sample t-test ~ 1 + group: Two-sample t-test ~ 1 + group + age: ANCOVA covariate engine Character string; analysis engine use: \"auto\": Automatically select based data (default) \"meta\": Use inverse-variance meta-analysis (requires SE) \"classic\": Use OLS/Student t-test \"welch\": Use Welch t-test unequal variances paired Logical; TRUE, perform paired t-test differences (default: FALSE) mu0 Numeric scalar; constant test one-sample tests (default: 0) contrast Optional named numeric vector linear combination coefficients mc Character string NULL; multiple comparisons correction: NULL: correction (default) \"bh\": Benjamini-Hochberg FDR \"spatial_fdr\": Spatially-aware FDR alpha Numeric scalar; FDR level mc NULL (default: 0.05) sign Character string; sign convention group differences: \"AminusB\": - B (default) \"BminusA\": B - mask Optional mask object path voxelwise_cov Optional S x P matrix voxelwise covariates center_voxelwise Logical; center voxelwise covariate per feature (default: TRUE) voxel_name Character string; name voxelwise coefficient (default: \"voxel_cov\") weights Character string meta-engine weighting: \"ivw\" (default, uses provided SE), \"equal\" (equal weights), \"custom\" (supply weights_custom). Ignored classic/welch engines. weights_custom Numeric vector (length S) matrix (S x P) custom weights weights = \"custom\". combine Optional. using meta engine t-inputs (.e., per-subject t-statistics df), specify t-combination method: \"stouffer\", \"fisher\", \"lancaster\". Passed fmri_meta() delegating meta engine group_data_*.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fmrireg t-tests for Group Analysis — fmri_ttest","text":"fmri_ttest_fit object containing: beta: Matrix coefficients se: Matrix standard errors (available) t: Matrix t-statistics (classic engine) z: Matrix z-scores p: Matrix p-values df: Matrix degrees freedom q: Matrix FDR-adjusted p-values (mc used)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmri_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"fmrireg t-tests for Group Analysis — fmri_ttest","text":"","code":"if (FALSE) { # \\dontrun{ # One-sample t-test fit <- fmri_ttest(gd, formula = ~ 1)  # Two-sample t-test fit <- fmri_ttest(gd, formula = ~ 1 + group)  # Paired t-test fit <- fmri_ttest(gd_diff, formula = ~ 1, paired = TRUE)  # ANCOVA with age covariate fit <- fmri_ttest(gd, formula = ~ 1 + group + age)  # With spatial FDR correction fit <- fmri_ttest(gd, formula = ~ 1 + group, mc = \"spatial_fdr\", alpha = 0.05) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmrireg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fmrireg: regression tools for fMRI data — fmrireg-package","title":"fmrireg: regression tools for fMRI data — fmrireg-package","text":"fmrireg provides functions generating experimental design matrices appropriate analyzing fMRI data regression.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/fmrireg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fmrireg: regression tools for fMRI data — fmrireg-package","text":"Maintainer: Bradley Buchsbaum brad.buchsbaum@gmail.com","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/generate_interaction_contrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast factorial contrast generators — generate_interaction_contrast","title":"Fast factorial contrast generators — generate_interaction_contrast","text":"Returns matrix N_cells x N_contrasts - row design cell, columns independent contrasts (difference-coded factors ask , grand-mean rest).  Suitable tcrossprod(dm, C) lm.fit(design, y) followed %*% coef usual way.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/generate_interaction_contrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast factorial contrast generators — generate_interaction_contrast","text":"","code":"generate_interaction_contrast(des, factors)  generate_main_effect_contrast(des, factor)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/generate_interaction_contrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast factorial contrast generators — generate_interaction_contrast","text":"des data.frame one column per factor (must factor) factors character vector: factor(s) get difference coding. - generate_main_effect_contrast() takes single factor name. - generate_interaction_contrast() takes >= 2 interaction (1 reproduce main-effect matrix). factor Single factor name main effect.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/generate_interaction_contrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast factorial contrast generators — generate_interaction_contrast","text":"numeric matrix nrow = prod levels(f) , ncol = prod (Li - 1) chosen factors.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/generate_interaction_contrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast factorial contrast generators — generate_interaction_contrast","text":"","code":"des <- expand.grid(Time = factor(1:4),                    Cond = factor(c(\"face\",\"scene\")))  # Main effect of Time (4-1 = 3 contrasts) M <- generate_main_effect_contrast(des, \"Time\")  # Full TimexCond interaction ( (4-1)*(2-1) = 3 contrasts ) I <- generate_interaction_contrast(des, c(\"Time\",\"Cond\")) dim(I)   # 8 rows (cells) x 3 columns (contrasts) #> [1] 8 3"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_benchmark_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Benchmark Dataset Summary — get_benchmark_summary","title":"Get Benchmark Dataset Summary — get_benchmark_summary","text":"Provides detailed summary specific benchmark dataset including dimensions, experimental design, ground truth information.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_benchmark_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Benchmark Dataset Summary — get_benchmark_summary","text":"","code":"get_benchmark_summary(dataset_name)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_benchmark_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Benchmark Dataset Summary — get_benchmark_summary","text":"dataset_name Character string specifying dataset summarize","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_benchmark_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Benchmark Dataset Summary — get_benchmark_summary","text":"list summary information dataset","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_benchmark_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Benchmark Dataset Summary — get_benchmark_summary","text":"","code":"# Get summary of a specific dataset summary_info <- get_benchmark_summary(\"BM_Canonical_HighSNR\") print(summary_info) #> $description #> [1] \"Canonical HRF (SPMG1), high SNR, 3 conditions, fixed amplitudes per condition\" #>  #> $dimensions #> $dimensions$n_timepoints #> [1] 150 #>  #> $dimensions$n_voxels #> [1] 100 #>  #> $dimensions$n_events #> [1] 45 #>  #> $dimensions$n_conditions #> [1] 3 #>  #>  #> $experimental_design #> $experimental_design$conditions #> [1] \"Cond1\" \"Cond2\" \"Cond3\" #>  #> $experimental_design$events_per_condition #> $experimental_design$events_per_condition$Cond1 #> [1] 15 #>  #> $experimental_design$events_per_condition$Cond2 #> [1] 15 #>  #> $experimental_design$events_per_condition$Cond3 #> [1] 15 #>  #>  #> $experimental_design$TR #> [1] 2 #>  #> $experimental_design$total_time #> [1] 300 #>  #> $experimental_design$target_snr #> [1] 4 #>  #>  #> $hrf_information #> $hrf_information$type #> [1] \"SPMG1\" #>  #> $hrf_information$hrf_object_name #> [1] \"HRF_SPMG1\" #>  #> $hrf_information$hrf_object #> function (t, P1 = 5, P2 = 15, A1 = 0.0833)  #> { #>     ifelse(t < 0, 0, exp(-t) * (A1 * t^P1 - 1.274527e-13 * t^P2)) #> } #> <bytecode: 0x557b0645bb88> #> <environment: namespace:fmrihrf> #> attr(,\"class\") #> [1] \"HRF\"      \"function\" #> attr(,\"name\") #> [1] \"SPMG1\" #> attr(,\"nbasis\") #> [1] 1 #> attr(,\"span\") #> [1] 24 #> attr(,\"param_names\") #> [1] \"P1\" \"P2\" \"A1\" #> attr(,\"params\") #> attr(,\"params\")$P1 #> [1] 5 #>  #> attr(,\"params\")$P2 #> [1] 15 #>  #> attr(,\"params\")$A1 #> [1] 0.0833 #>  #>  #>  #> $noise_information #> $noise_information$noise_type #> [1] \"ar1\" #>  #> $noise_information$noise_ar #> [1] 0.4 #>  #> $noise_information$noise_sd #> [1] 0.5217219 #>  #>"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_contrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available Contrasts — get_contrasts","title":"Get Available Contrasts — get_contrasts","text":"Get Available Contrasts","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_contrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available Contrasts — get_contrasts","text":"","code":"get_contrasts(gd)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_contrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Available Contrasts — get_contrasts","text":"gd group_data_csv object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_contrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available Contrasts — get_contrasts","text":"Character vector contrast names","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_contrasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available Contrasts — get_contrasts","text":"","code":"gd <- fmrireg:::.demo_group_data_csv() get_contrasts(gd) #> [1] \"A_vs_B\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Covariates — get_covariates","title":"Get Covariates — get_covariates","text":"Get Covariates","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Covariates — get_covariates","text":"","code":"get_covariates(x)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Covariates — get_covariates","text":"x group_data object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Covariates — get_covariates","text":"Data frame covariates NULL","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_covariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Covariates — get_covariates","text":"","code":"gd <- fmrireg:::.demo_group_data_csv() get_covariates(gd) #>    age #> s1  30 #> s2  32 #> s3  34"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"get_data — get_formula","title":"get_data — get_formula","text":"Functions creating manipulating fmri_model objects","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_data — get_formula","text":"","code":"get_formula(x, ...)  # S3 method for class 'fmri_model' get_formula(x, ...)  # S3 method for class 'fmri_model' get_formula(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_data — get_formula","text":"x object extract formula . ... Additional arguments passed methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_data — get_formula","text":"formula.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_data — get_formula","text":"","code":"fm <- fmrireg:::.demo_fmri_model() get_formula(fm) #> .y ~ condition + drift + block - 1 #> <environment: 0x557b0bfe7030>"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_rois.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Available ROIs — get_rois","title":"Get Available ROIs — get_rois","text":"Get Available ROIs","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_rois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Available ROIs — get_rois","text":"","code":"get_rois(gd)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_rois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Available ROIs — get_rois","text":"gd group_data_csv object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_rois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Available ROIs — get_rois","text":"Character vector ROI names","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_rois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Available ROIs — get_rois","text":"","code":"gd <- fmrireg:::.demo_group_data_csv() get_rois(gd) #> [1] \"ROI1\" \"ROI2\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Subject IDs — get_subjects","title":"Get Subject IDs — get_subjects","text":"Get Subject IDs","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Subject IDs — get_subjects","text":"","code":"get_subjects(x)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Subject IDs — get_subjects","text":"x group_data object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_subjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Subject IDs — get_subjects","text":"Character vector unique subject IDs","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/get_subjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Subject IDs — get_subjects","text":"","code":"gd <- fmrireg:::.demo_group_data_csv() get_subjects(gd) #> [1] \"s1\" \"s2\" \"s3\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_lss.html","id":null,"dir":"Reference","previous_headings":"","what":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","title":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","text":"convenience wrapper around estimate_betas least squares separate (LSS) estimation. primarily designed single trial estimation, individual trial/event gets separate beta estimate rather averaging across trials condition.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_lss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","text":"","code":"glm_lss(   dataset,   model_obj,   basis_obj,   basemod = NULL,   block = ~1,   use_cpp = TRUE,   progress = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_lss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","text":"dataset matrix_dataset object containing fMRI time series data model_obj event_model object specifying experimental design basis_obj HRF basis object (e.g., fmrihrf::HRF_SPMG1, HRF_FIR, etc.) basemod baseline_model instance regress data beta estimation (default: NULL) block formula specifying block factor (default: ~ 1 single block) use_cpp Logical; retained backward compatibility. TRUE, warning issued R implementation used. progress Logical; show progress bar (default: TRUE) ... Additional arguments passed estimate_betas","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_lss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","text":"list class \"fmri_betas\" containing estimated trial-wise coefficients","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_lss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","text":"Primary Use Case - Single Trial Estimation: Trial-wise beta estimation: trial gets beta coefficient Single trial analysis: Useful decoding, representational similarity analysis (RSA) Trial--trial variability: Captures individual trial responses rather condition averages Avoiding trial averaging: Preserves trial-specific information lost standard GLM Method Details: LSS (Least Squares Separate) fits separate model trial, trial interest gets regressor trials condition modeled together. approach avoids collinearity issues arise including separate regressors every trial simultaneously. standard condition-level estimation (averaging trials within conditions), use glm_ols() instead.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_lss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLM LSS Estimation Convenience Function (Single Trial Estimation) — glm_lss","text":"","code":"if (FALSE) { # \\dontrun{ # Create event model and data event_data <- data.frame(   onset = c(10, 30, 50, 70),   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   run = rep(1, 4) ) sframe <- fmrihrf::sampling_frame(blocklens = 100, TR = 2) model_obj <- event_model(onset ~ hrf(condition),                          data = event_data,                          block = ~ run,                          sampling_frame = sframe)  # Create data matrix (100 timepoints, 10 voxels) Y <- matrix(rnorm(1000), 100, 10)  # Create matrix_dataset with event table dset <- matrix_dataset(Y, TR = 2, run_length = 100, event_table = event_data)  # Fit with LSS - estimates separate beta for each individual trial fit <- glm_lss(dset, model_obj, fmrihrf::HRF_SPMG1) dim(fit$betas_ran)  # 4 trials x 10 voxels (NOT averaged by condition)  # This is useful for: # - Decoding analysis (predicting condition from single trial patterns) # - RSA (representational similarity analysis) # - Studying trial-by-trial variability } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_ols.html","id":null,"dir":"Reference","previous_headings":"","what":"GLM OLS Estimation Convenience Function — glm_ols","title":"GLM OLS Estimation Convenience Function — glm_ols","text":"convenience wrapper around estimate_betas ordinary least squares (OLS) estimation. function provides simplified interface fitting GLMs using OLS matrix datasets.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_ols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GLM OLS Estimation Convenience Function — glm_ols","text":"","code":"glm_ols(   dataset,   model_obj,   basis_obj,   basemod = NULL,   block = ~1,   progress = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_ols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GLM OLS Estimation Convenience Function — glm_ols","text":"dataset matrix_dataset object containing fMRI time series data model_obj event_model object specifying experimental design basis_obj HRF basis object (e.g., fmrihrf::HRF_SPMG1, HRF_FIR, etc.) basemod baseline_model instance regress data beta estimation (default: NULL) block formula specifying block factor (default: ~ 1 single block) progress Logical; show progress bar (default: TRUE) ... Additional arguments passed estimate_betas","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_ols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GLM OLS Estimation Convenience Function — glm_ols","text":"list class \"fmri_betas\" containing estimated coefficients","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_ols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GLM OLS Estimation Convenience Function — glm_ols","text":"Use Cases: Condition-level estimation: Estimates average responses experimental condition General linear modeling: Standard GLM approach group-level condition-level effects Multi-trial averaging: Combines trials condition estimate mean responses single-trial estimation trial gets beta estimate, use glm_lss() instead.","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/glm_ols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GLM OLS Estimation Convenience Function — glm_ols","text":"","code":"if (FALSE) { # \\dontrun{ # Create event model and data event_data <- data.frame(   onset = c(10, 30, 50, 70),   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   run = rep(1, 4) ) sframe <- fmrihrf::sampling_frame(blocklens = 100, TR = 2) model_obj <- event_model(onset ~ hrf(condition),                          data = event_data,                          block = ~ run,                          sampling_frame = sframe)  # Create data matrix (100 timepoints, 10 voxels) Y <- matrix(rnorm(1000), 100, 10)  # Create matrix_dataset with event table dset <- matrix_dataset(Y, TR = 2, run_length = 100, event_table = event_data)  # Fit with OLS - estimates average response for each condition fit <- glm_ols(dset, model_obj, fmrihrf::HRF_SPMG1) dim(fit$betas_ran)  # 2 conditions x 10 voxels } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Group Dataset for Meta-Analysis — group_data","title":"Create Group Dataset for Meta-Analysis — group_data","text":"Generic constructor creates group dataset various input formats use group-level meta-analysis fmri_meta.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Group Dataset for Meta-Analysis — group_data","text":"","code":"group_data(data, format = c(\"auto\", \"h5\", \"nifti\", \"csv\", \"fmrilm\"), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Group Dataset for Meta-Analysis — group_data","text":"data Input data. Format depends format argument: \"h5\": Character vector HDF5 file paths \"nifti\": List data frame beta/SE/variance paths \"csv\": Path CSV file data frame \"fmrilm\": List fmri_lm objects format Character string specifying input format. One \"auto\" (default), \"h5\", \"nifti\", \"csv\", \"fmrilm\". \"auto\", attempts detect format. ... Additional arguments passed format-specific constructors","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Group Dataset for Meta-Analysis — group_data","text":"group_data object suitable meta-analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Group Dataset for Meta-Analysis — group_data","text":"","code":"if (FALSE) { # \\dontrun{ # From HDF5 files created by write_results.fmri_lm gd <- group_data(   h5_paths,   format = \"h5\",   subjects = subject_ids,   covariates = covariates_df,   contrast = \"FaceVsPlace\" )  # From NIfTI files gd <- group_data(   list(beta = beta_paths, se = se_paths),   format = \"nifti\",   subjects = subject_ids,   mask = \"group_mask.nii.gz\" ) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Group Dataset from CSV File or Data Frame — group_data_from_csv","title":"Create Group Dataset from CSV File or Data Frame — group_data_from_csv","text":"Creates group dataset tabular data containing pre-extracted statistics ROI means, effect sizes, standard errors. format useful ROI-based analyses working summary statistics.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Group Dataset from CSV File or Data Frame — group_data_from_csv","text":"","code":"group_data_from_csv(   data,   effect_cols,   subject_col = \"subject\",   roi_col = NULL,   contrast_col = NULL,   covariate_cols = NULL,   wide_format = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Group Dataset from CSV File or Data Frame — group_data_from_csv","text":"data Either path CSV file data frame containing data effect_cols Named vector list specifying column names effect statistics. E.g., c(beta = \"mean_activation\", se = \"std_error\") c(t = \"t_stat\", df = \"df\") subject_col Character string specifying column containing subject IDs roi_col Character string specifying column containing ROI names (optional) contrast_col Character string specifying column containing contrast names (optional) covariate_cols Character vector column names use covariates (optional) wide_format Logical. TRUE, expects wide format ROIs columns (default: FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Group Dataset from CSV File or Data Frame — group_data_from_csv","text":"group_data_csv object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Group Dataset from CSV File or Data Frame — group_data_from_csv","text":"","code":"if (FALSE) { # \\dontrun{ # Long format: one row per subject-ROI combination gd <- group_data_from_csv(   \"roi_statistics.csv\",   effect_cols = c(beta = \"mean_beta\", se = \"se_beta\"),   subject_col = \"participant_id\",   roi_col = \"roi_name\",   covariate_cols = c(\"age\", \"sex\", \"group\") )  # Wide format: one row per subject, ROIs as columns gd <- group_data_from_csv(   \"subject_summary.csv\",   effect_cols = c(beta = \"roi_\"),  # Prefix for ROI columns   subject_col = \"subject\",   wide_format = TRUE )  # From data frame with multiple contrasts df <- read.csv(\"contrast_results.csv\") gd <- group_data_from_csv(   df,   effect_cols = c(beta = \"estimate\", se = \"std_error\", t = \"t_value\"),   subject_col = \"subject_id\",   contrast_col = \"contrast_name\",   roi_col = \"region\" ) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_fmrilm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Group Dataset from fmri_lm Objects — group_data_from_fmrilm","title":"Create Group Dataset from fmri_lm Objects — group_data_from_fmrilm","text":"Creates group dataset directly list fitted fmri_lm objects","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_fmrilm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Group Dataset from fmri_lm Objects — group_data_from_fmrilm","text":"","code":"group_data_from_fmrilm(   lm_list,   contrast = NULL,   stat = c(\"beta\", \"se\"),   subjects = NULL,   covariates = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_fmrilm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Group Dataset from fmri_lm Objects — group_data_from_fmrilm","text":"lm_list List fmri_lm objects contrast Character string specifying contrast extract stat Character vector statistics extract subjects Character vector subject identifiers covariates Data frame subject-level covariates","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_fmrilm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Group Dataset from fmri_lm Objects — group_data_from_fmrilm","text":"group_data_h5 object (-memory variant)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_h5.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Group Dataset from HDF5 Files — group_data_from_h5","title":"Create Group Dataset from HDF5 Files — group_data_from_h5","text":"Creates group dataset HDF5 files produced write_results.fmri_lm. files use fmristore LabeledVolumeSet format efficient storage multiple statistical maps.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_h5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Group Dataset from HDF5 Files — group_data_from_h5","text":"","code":"group_data_from_h5(   paths,   subjects = NULL,   covariates = NULL,   mask = NULL,   contrast = NULL,   stat = c(\"beta\", \"se\"),   validate = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_h5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Group Dataset from HDF5 Files — group_data_from_h5","text":"paths Character vector HDF5 file paths, one per subject subjects Character vector subject identifiers. NULL, extracted file paths. covariates Data frame subject-level covariates (optional) mask Path mask file mask object (optional) contrast Character string specifying contrast extract (multi-contrast files) stat Character vector statistics extract (e.g., c(\"beta\", \"se\", \"tstat\")) validate Logical. Validate files exist contain expected data (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_h5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Group Dataset from HDF5 Files — group_data_from_h5","text":"group_data_h5 object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_h5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Group Dataset from HDF5 Files — group_data_from_h5","text":"","code":"if (FALSE) { # \\dontrun{ # Read HDF5 files from write_results.fmri_lm subjects <- data.frame(   subject = sprintf(\"sub-%02d\", 1:20),   group = rep(c(\"young\", \"old\"), each = 10),   age = c(rnorm(10, 25, 3), rnorm(10, 70, 5)) )  h5_paths <- sprintf(\"derivatives/sub-%02d_task-nback_desc-GLMstatmap_bold.h5\", 1:20)  gd <- group_data_from_h5(   h5_paths,   subjects = subjects$subject,   covariates = subjects[c(\"group\", \"age\")],   contrast = \"FaceVsPlace\",   stat = c(\"beta\", \"se\") ) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_nifti.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Group Dataset from NIfTI Files — group_data_from_nifti","title":"Create Group Dataset from NIfTI Files — group_data_from_nifti","text":"Creates group dataset NIfTI files containing effect sizes standard errors variances. Supports various input configurations including beta/SE pairs, beta/variance pairs, t-statistics degrees freedom.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_nifti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Group Dataset from NIfTI Files — group_data_from_nifti","text":"","code":"group_data_from_nifti(   beta_paths = NULL,   se_paths = NULL,   var_paths = NULL,   t_paths = NULL,   df = NULL,   subjects = NULL,   covariates = NULL,   mask = NULL,   target_space = NULL,   validate = TRUE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_nifti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Group Dataset from NIfTI Files — group_data_from_nifti","text":"beta_paths Character vector paths beta/effect size NIfTI files se_paths Character vector paths standard error NIfTI files var_paths Character vector paths variance NIfTI files (alternative se_paths) t_paths Character vector paths t-statistic NIfTI files df Degrees freedom (scalar vector). Required using t_paths. subjects Character vector subject identifiers. NULL, extracted file paths. covariates Data frame subject-level covariates (optional) mask Path mask NIfTI file mask object (optional recommended) target_space Path template NIfTI spatial alignment checking validate Logical. Validate files exist matching dimensions (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_nifti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Group Dataset from NIfTI Files — group_data_from_nifti","text":"group_data_nifti object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/group_data_from_nifti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Group Dataset from NIfTI Files — group_data_from_nifti","text":"","code":"if (FALSE) { # \\dontrun{ # From FSL FEAT output (COPE and VARCOPE files) gd <- group_data_from_nifti(   beta_paths = Sys.glob(\"feat_output/sub-*/cope1.nii.gz\"),   var_paths = Sys.glob(\"feat_output/sub-*/varcope1.nii.gz\"),   subjects = sprintf(\"sub-%02d\", 1:20),   mask = \"group_mask.nii.gz\" )  # From SPM contrast images gd <- group_data_from_nifti(   beta_paths = Sys.glob(\"SPM/sub*/con_0001.nii\"),   se_paths = Sys.glob(\"SPM/sub*/se_0001.nii\"),   mask = \"SPM/mask.nii\" )  # From t-statistics only (for Stouffer's Z combination) gd <- group_data_from_nifti(   t_paths = Sys.glob(\"stats/sub-*/tstat1.nii.gz\"),   df = 100,  # Or vector of per-subject df   mask = \"group_mask.nii.gz\" ) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/hrf_smoothing_kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an HRF smoothing kernel — hrf_smoothing_kernel","title":"Compute an HRF smoothing kernel — hrf_smoothing_kernel","text":"function computes temporal similarity matrix series hemodynamic response functions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/hrf_smoothing_kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an HRF smoothing kernel — hrf_smoothing_kernel","text":"","code":"hrf_smoothing_kernel(   len,   TR = 2,   form = onset ~ trialwise(),   buffer_scans = 3L,   normalise = TRUE,   method = c(\"gram\", \"cosine\") )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/hrf_smoothing_kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an HRF smoothing kernel — hrf_smoothing_kernel","text":"len number scans. TR repetition time (default 2 seconds). form trialwise formula expression, see examples. buffer_scans number scans buffer event. normalise Whether normalise kernel. method method use computing kernel.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/hrf_smoothing_kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an HRF smoothing kernel — hrf_smoothing_kernel","text":"smoothing matrix","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/hrf_smoothing_kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an HRF smoothing kernel — hrf_smoothing_kernel","text":"","code":"form <- onset ~ trialwise(basis=\"gaussian\") sk <- hrf_smoothing_kernel(100, TR=1.5, form)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ihs_latent_solve.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative Hessian Sketch (multi-RHS), returning M and Ginv — ihs_latent_solve","title":"Iterative Hessian Sketch (multi-RHS), returning M and Ginv — ihs_latent_solve","text":"Iterative Hessian Sketch (multi-RHS), returning M Ginv","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ihs_latent_solve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative Hessian Sketch (multi-RHS), returning M and Ginv — ihs_latent_solve","text":"","code":"ihs_latent_solve(X, Z, m, iters = 3L)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/list_benchmark_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"List Available Benchmark Datasets — list_benchmark_datasets","title":"List Available Benchmark Datasets — list_benchmark_datasets","text":"Returns summary available benchmark datasets descriptions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/list_benchmark_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Available Benchmark Datasets — list_benchmark_datasets","text":"","code":"list_benchmark_datasets()"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/list_benchmark_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Available Benchmark Datasets — list_benchmark_datasets","text":"data.frame dataset names descriptions","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/list_benchmark_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Available Benchmark Datasets — list_benchmark_datasets","text":"","code":"# See what benchmark datasets are available list_benchmark_datasets() #>                                                         Dataset #> BM_Canonical_HighSNR                       BM_Canonical_HighSNR #> BM_Canonical_LowSNR                         BM_Canonical_LowSNR #> BM_HRF_Variability_AcrossVoxels BM_HRF_Variability_AcrossVoxels #> BM_Trial_Amplitude_Variability   BM_Trial_Amplitude_Variability #> BM_Complex_Realistic                       BM_Complex_Realistic #>                                                                                                                        Description #> BM_Canonical_HighSNR                                 Canonical HRF (SPMG1), high SNR, 3 conditions, fixed amplitudes per condition #> BM_Canonical_LowSNR                                   Canonical HRF (SPMG1), low SNR, 3 conditions, fixed amplitudes per condition #> BM_HRF_Variability_AcrossVoxels                                         HRF varies across voxel groups, 2 conditions, moderate SNR #> BM_Trial_Amplitude_Variability                              Single condition with significant trial-to-trial amplitude variability #> BM_Complex_Realistic            Complex realistic scenario: 3 HRF groups, 3 conditions, variable durations/amplitudes, AR(2) noise"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/load_benchmark_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Load fMRI Benchmark Datasets — load_benchmark_dataset","title":"Load fMRI Benchmark Datasets — load_benchmark_dataset","text":"function provides easy access benchmark datasets included fmrireg package. datasets designed testing HRF fitting, beta estimation, fMRI analysis methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/load_benchmark_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load fMRI Benchmark Datasets — load_benchmark_dataset","text":"","code":"load_benchmark_dataset(dataset_name = \"BM_Canonical_HighSNR\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/load_benchmark_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load fMRI Benchmark Datasets — load_benchmark_dataset","text":"dataset_name Character string specifying dataset load. Options include: \"BM_Canonical_HighSNR\": Canonical HRF high SNR (3 conditions) \"BM_Canonical_LowSNR\": Canonical HRF low SNR (3 conditions) \"BM_HRF_Variability_AcrossVoxels\": HRF varies across voxel groups (2 conditions) \"BM_Trial_Amplitude_Variability\": Trial--trial amplitude variability (1 condition) \"BM_Complex_Realistic\": Complex scenario multiple factors (3 conditions) \"\": Returns datasets list \"metadata\": Returns metadata datasets","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/load_benchmark_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load fMRI Benchmark Datasets — load_benchmark_dataset","text":"list containing specified benchmark dataset(s) following components: description: Text description dataset Y_noisy: Matrix noisy BOLD time series (time x voxels) Y_clean: Matrix clean BOLD time series (available) X_list_true_hrf: List design matrices convolved true HRF true_hrf_parameters: Information true HRF(s) used event_onsets: Vector event onset times condition_labels: Vector condition labels event true_betas_condition: Matrix true condition-level beta values true_amplitudes_trial: Matrix true trial-level amplitudes TR: Repetition time total_time: Total scan duration noise_parameters: Information noise generation simulation_seed: Random seed used generation target_snr: Target signal--noise ratio","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/load_benchmark_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load fMRI Benchmark Datasets — load_benchmark_dataset","text":"","code":"# Load a specific dataset high_snr_data <- load_benchmark_dataset(\"BM_Canonical_HighSNR\")  # Get information about all available datasets metadata <- load_benchmark_dataset(\"metadata\")  # Load all datasets all_data <- load_benchmark_dataset(\"all\")  # Access the BOLD data Y <- high_snr_data$Y_noisy  # Get event information onsets <- high_snr_data$event_onsets conditions <- high_snr_data$condition_labels"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/longnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Long Names of Variable Levels — longnames","title":"Extract Long Names of Variable Levels — longnames","text":"Get extended names variable levels, include term prefix basis function information. Long names provide complete specification condition model. example, term conditions \"level1\" \"level2\" basis functions \"basis1\" \"basis2\", long names \"term#level1:basis1\", \"term#level1:basis2\", \"term#level2:basis1\", \"term#level2:basis2\".","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/longnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Long Names of Variable Levels — longnames","text":"","code":"longnames(x, ...)  # S3 method for class 'event_term' longnames(x, ...)  # S3 method for class 'event_seq' longnames(x, ...)  # S3 method for class 'convolved_term' longnames(x, ...)  # S3 method for class 'event_model' longnames(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/longnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Long Names of Variable Levels — longnames","text":"x object extract names (typically event_term, event_model, convolved_term) ... Additional arguments passed methods. Common arguments include: exclude_basis Logical; TRUE, exclude basis function labels names drop_empty Logical; TRUE, drop empty condition levels","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/longnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Long Names of Variable Levels — longnames","text":"character vector containing full condition names term prefixes basis functions","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/longnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Long Names of Variable Levels — longnames","text":"","code":"# Create example data with multiple conditions event_data <- data.frame(   condition = factor(c(\"A\", \"B\", \"C\", \"A\", \"B\", \"C\")),   rt = c(0.8, 1.2, 0.9, 1.1, 0.7, 1.3),   onsets = c(1, 10, 20, 30, 40, 50),   run = c(1, 1, 1, 1, 1, 1) )  # Create sampling frame sframe <- sampling_frame(blocklens = 60, TR = 2)  # Create event model with multiple basis functions evmodel <- event_model(   onsets ~ hrf(condition, basis = \"fourier\", nbasis = 2),   data = event_data,   block = ~run,   sampling_frame = sframe )  # Get long names including basis functions lnames <- longnames(evmodel) # Returns: c(\"condition#A:basis1\", \"condition#A:basis2\", #           \"condition#B:basis1\", \"condition#B:basis2\", #           \"condition#C:basis1\", \"condition#C:basis2\")  # Create simple event term eterm <- event_term(   list(condition = event_data$condition),   onsets = event_data$onsets,   blockids = event_data$run )  # Get long names for term term_names <- longnames(eterm) # Returns: c(\"condition#A\", \"condition#B\", \"condition#C\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/lowrank_control.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-rank / sketch controls for fast GLM — lowrank_control","title":"Low-rank / sketch controls for fast GLM — lowrank_control","text":"Control object enable optional sketched GLM engine.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/lowrank_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-rank / sketch controls for fast GLM — lowrank_control","text":"","code":"lowrank_control(   parcels = NULL,   landmarks = NULL,   k_neighbors = 16L,   time_sketch = list(method = \"gaussian\", m = NULL, iters = 0L),   ncomp = NULL,   noise_pcs = 0L )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/lowrank_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-rank / sketch controls for fast GLM — lowrank_control","text":"parcels Optional parceling, e.g., neuroim2::ClusteredNeuroVol integer vector (length = number voxels mask). landmarks Optional integer; number landmark voxels optional Nyström extension (NULL = ). k_neighbors Integer; k k-NN Nyström extension. time_sketch List(method = \"gaussian\" | \"countsketch\", m = NULL, iters = 0L). ncomp Optional integer; number latent components within parcels (PCA). noise_pcs Integer; optional GLMdenoise-style PCs low-R2 parcels.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/lowrank_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low-rank / sketch controls for fast GLM — lowrank_control","text":"list class \"lowrank_control\".","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/make_srht_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SRHT plan — make_srht_plan","title":"Build SRHT plan — make_srht_plan","text":"Build SRHT plan","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/make_srht_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SRHT plan — make_srht_plan","text":"","code":"make_srht_plan(Tlen, m)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/make_time_sketch.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a time sketch matrix S (m x T) — make_time_sketch","title":"Build a time sketch matrix S (m x T) — make_time_sketch","text":"Build time sketch matrix S (m x T)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/make_time_sketch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a time sketch matrix S (m x T) — make_time_sketch","text":"","code":"make_time_sketch(Tlen, ctrl)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/make_time_sketch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a time sketch matrix S (m x T) — make_time_sketch","text":"Tlen Integer time length ctrl List(method = \"gaussian\"|\"countsketch\", m, iters)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/make_time_sketch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a time sketch matrix S (m x T) — make_time_sketch","text":"Dense sparse sketch matrix S","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_effective_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Effective Sample Size for Meta-Analysis — meta_effective_n","title":"Compute Effective Sample Size for Meta-Analysis — meta_effective_n","text":"Computes effective sample size based heterogeneity estimate. useful understanding impact -study heterogeneity.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_effective_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Effective Sample Size for Meta-Analysis — meta_effective_n","text":"","code":"meta_effective_n(v, tau2)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_effective_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Effective Sample Size for Meta-Analysis — meta_effective_n","text":"v Numeric vector within-study variances tau2 Numeric scalar; -study variance (tau-squared)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_effective_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Effective Sample Size for Meta-Analysis — meta_effective_n","text":"Numeric scalar; effective sample size","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_effective_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Effective Sample Size for Meta-Analysis — meta_effective_n","text":"","code":"meta_effective_n(v = rep(0.05, 3), tau2 = 0.01) #> [1] 3"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_fit_vcov_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-regression with ONE voxelwise covariate — meta_fit_vcov_cpp","title":"Meta-regression with ONE voxelwise covariate — meta_fit_vcov_cpp","text":"Meta-regression ONE voxelwise covariate","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_fit_vcov_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-regression with ONE voxelwise covariate — meta_fit_vcov_cpp","text":"","code":"meta_fit_vcov_cpp(   Y,   V,   X,   C,   method,   robust,   huber_c = 1.345,   robust_iter = 2L,   n_threads = 0L )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_fit_vcov_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-regression with ONE voxelwise covariate — meta_fit_vcov_cpp","text":"Y S x P matrix effect sizes V S x P matrix variances X S x K design matrix C S x P matrix voxelwise covariates method Meta-analysis method robust Robust estimation method huber_c Huber tuning constant robust_iter Number IRLS iterations n_threads Number OpenMP threads","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/meta_fit_vcov_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta-regression with ONE voxelwise covariate — meta_fit_vcov_cpp","text":"List results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/mixed_solve_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed Model Solver using Rcpp and roptim — mixed_solve_cpp","title":"Mixed Model Solver using Rcpp and roptim — mixed_solve_cpp","text":"function solves mixed model using Rcpp roptim optimization. estimates variance components mixed model, potentially speeding computations compared pure R implementation.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/mixed_solve_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed Model Solver using Rcpp and roptim — mixed_solve_cpp","text":"","code":"mixed_solve_cpp(   y,   Z = NULL,   K = NULL,   X = NULL,   method = \"REML\",   bounds = c(1e-09, 1e+09),   SE = FALSE,   return_Hinv = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/mixed_solve_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed Model Solver using Rcpp and roptim — mixed_solve_cpp","text":"y Response vector. Z Design matrix random effects (default: identity matrix size n). K Kinship matrix (default: NULL). X Design matrix fixed effects (default: vector ones). method Optimization method, either \"REML\" \"ML\" (default: \"REML\"). bounds Bounds optimizer (default: c(1e-9, 1e9)). SE Logical, whether return standard errors (default: FALSE). return_Hinv Logical, whether return inverse H (default: FALSE).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/mixed_solve_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed Model Solver using Rcpp and roptim — mixed_solve_cpp","text":"list containing: Vu Estimated variance component random effects. Ve Estimated variance component residuals. beta Estimated fixed effects coefficients. u Estimated random effects coefficients. LL Log-likelihood model. beta.SE Standard errors fixed effects coefficients (SE = TRUE). u.SE Standard errors random effects coefficients (SE = TRUE). Hinv Inverse H (return_Hinv = TRUE).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/mixed_solve_cpp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed Model Solver using Rcpp and roptim — mixed_solve_cpp","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage with random data set.seed(123) n <- 100 y <- rnorm(n) Z <- matrix(rnorm(n * 5), n, 5) K <- diag(5) X <- matrix(1, n, 1) result <- mixed_solve_cpp(y, Z, K, X) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_bootstrap_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiresponse bootstrap linear model — multiresponse_bootstrap_lm","title":"Multiresponse bootstrap linear model — multiresponse_bootstrap_lm","text":"Performs block bootstrap resampling multiresponse linear models, particularly useful fMRI time series data temporal dependencies exist. function implements block bootstrap approach maintain temporal correlation structure within data.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_bootstrap_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiresponse bootstrap linear model — multiresponse_bootstrap_lm","text":"","code":"multiresponse_bootstrap_lm(   form,   data_env,   conlist,   vnames,   fcon,   modmat = NULL,   block_size = 30,   boot_rows = FALSE,   nboot = 100,   event_indices )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_bootstrap_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiresponse bootstrap linear model — multiresponse_bootstrap_lm","text":"form Formula linear model. Required modmat NULL. data_env Environment containing data linear model. conlist List contrasts computed bootstrap sample. vnames Vector variable names. fcon Contrasts fixed effects. modmat Optional pre-computed model matrix. provided, form ignored. block_size Size blocks bootstrap (default: 30). large enough capture temporal dependencies small enough allow sufficient randomization. boot_rows Logical flag indicating whether bootstrap rows (default: FALSE). nboot Number bootstrap iterations (default: 100). event_indices Indices events computing beta covariances.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_bootstrap_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiresponse bootstrap linear model — multiresponse_bootstrap_lm","text":"list containing: original: fitted original model contrasts con_cov: Covariance matrices contrasts (contrasts provided) beta_cov: Covariance matrices beta estimates nboot: Number bootstrap iterations performed bootstrap: Logical indicating bootstrap result","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_bootstrap_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiresponse bootstrap linear model — multiresponse_bootstrap_lm","text":"function performs following steps: Fits original linear model Implements block bootstrap resampling residuals Reconstructs response variables using fitted values resampled residuals Computes contrasts bootstrap sample block bootstrap approach helps preserve temporal dependencies data resampling blocks consecutive observations rather individual observations.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Multiresponse Linear Model — multiresponse_lm","title":"Fit Multiresponse Linear Model — multiresponse_lm","text":"function fits linear model multiple responses fMRI dataset.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Multiresponse Linear Model — multiresponse_lm","text":"","code":"multiresponse_lm(form, data_env, conlist, vnames, fcon, modmat = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Multiresponse Linear Model — multiresponse_lm","text":"form formula used define linear model. data_env environment containing data used linear model. conlist list contrasts used analysis. vnames names variables used linear model. fcon F-contrasts used analysis. modmat model matrix (default NULL, calculate model matrix using formula).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/multiresponse_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Multiresponse Linear Model — multiresponse_lm","text":"list containing results multiresponse linear model analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/n_subjects.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Number of Subjects — n_subjects","title":"Extract Number of Subjects — n_subjects","text":"Extract Number Subjects","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/n_subjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Number of Subjects — n_subjects","text":"","code":"n_subjects(x)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/n_subjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Number of Subjects — n_subjects","text":"x group_data object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/n_subjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Number of Subjects — n_subjects","text":"Integer number unique subjects","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/n_subjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Number of Subjects — n_subjects","text":"","code":"gd <- fmrireg:::.demo_group_data_csv() n_subjects(gd) #> [1] 3"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"OLS t-test / ANCOVA across features — ols_t_cpp","title":"OLS t-test / ANCOVA across features — ols_t_cpp","text":"OLS t-test / ANCOVA across features","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OLS t-test / ANCOVA across features — ols_t_cpp","text":"","code":"ols_t_cpp(Y, X)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OLS t-test / ANCOVA across features — ols_t_cpp","text":"Y S x P matrix (subjects x features) X S x K design matrix intercept desired","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OLS t-test / ANCOVA across features — ols_t_cpp","text":"List beta (K x P), se (K x P), t (K x P), df (scalar), ok (P)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_vcov_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"OLS with ONE voxelwise covariate — ols_t_vcov_cpp","title":"OLS with ONE voxelwise covariate — ols_t_vcov_cpp","text":"OLS ONE voxelwise covariate","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_vcov_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OLS with ONE voxelwise covariate — ols_t_vcov_cpp","text":"","code":"ols_t_vcov_cpp(Y, X, C)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_vcov_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OLS with ONE voxelwise covariate — ols_t_vcov_cpp","text":"Y S x P matrix outcomes X S x K design matrix C S x P matrix voxelwise covariates","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/ols_t_vcov_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OLS with ONE voxelwise covariate — ols_t_vcov_cpp","text":"List beta ((K+1) x P), se, t, df","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/p_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract P-values from a Model Fit — p_values","title":"Extract P-values from a Model Fit — p_values","text":"Extract p-values associated parameter estimates test statistics fitted model object. part family functions extracting statistical measures.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/p_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract P-values from a Model Fit — p_values","text":"","code":"p_values(x, ...)  # S3 method for class 'fmri_lm' p_values(x, type = c(\"estimates\", \"contrasts\"), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/p_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract P-values from a Model Fit — p_values","text":"x fitted model object ... Additional arguments passed methods type Character string specifying type p-values extract. Options typically include \"estimates\" parameter estimates \"contrasts\" contrast tests. Defaults \"estimates\" methods.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/p_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract P-values from a Model Fit — p_values","text":"tibble matrix containing p-values","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/p_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract P-values from a Model Fit — p_values","text":"","code":"# Create example data event_data <- data.frame(   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   onsets = c(1, 10, 20, 30),   run = c(1, 1, 1, 1) )  # Create sampling frame and dataset sframe <- sampling_frame(blocklens = 50, TR = 2) dset <- fmridataset::matrix_dataset(   matrix(rnorm(50 * 2), 50, 2),   TR = 2,   run_length = 50,   event_table = event_data )  # Fit model fit <- fmri_lm(   onsets ~ hrf(condition),   block = ~run,   dataset = dset )  # Extract p-values pvals <- p_values(fit)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/paired_diff_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper Functions for fmri_ttest — paired_diff_block","title":"Helper Functions for fmri_ttest — paired_diff_block","text":"Support functions paired differences, sign flipping, wrapper functions OLS meta-analysis voxelwise covariates. Compute Paired Within-Subject Differences","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/paired_diff_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper Functions for fmri_ttest — paired_diff_block","text":"","code":"paired_diff_block(blkA, blkB, rho = 0)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/paired_diff_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper Functions for fmri_ttest — paired_diff_block","text":"blkA First group_data block blkB Second group_data block rho Optional within-subject correlation B. Can : Scalar: correlation subjects features Vector length S: Per-subject correlations Vector length P: Per-feature correlations Matrix (S x P): Subject-feature specific correlations Default 0 (independence).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/paired_diff_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper Functions for fmri_ttest — paired_diff_block","text":"new block Y = Y_A - Y_B propagated variance available","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/paired_diff_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Helper Functions for fmri_ttest — paired_diff_block","text":"Creates within-subject differences (- B) paired t-tests two blocks identical subjects features.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_contrast_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Contrast Formula — parse_contrast_formula","title":"Parse Contrast Formula — parse_contrast_formula","text":"Parse Contrast Formula","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_contrast_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Contrast Formula — parse_contrast_formula","text":"","code":"parse_contrast_formula(formula, object)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_contrast_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Contrast Formula — parse_contrast_formula","text":"formula Contrast formula object fmri_meta object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_contrast_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Contrast Formula — parse_contrast_formula","text":"Numeric vector contrast weights","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_meta_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Meta-Analysis Formula — parse_meta_formula","title":"Parse Meta-Analysis Formula — parse_meta_formula","text":"Parse Meta-Analysis Formula","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_meta_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Meta-Analysis Formula — parse_meta_formula","text":"","code":"parse_meta_formula(formula, data)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_meta_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Meta-Analysis Formula — parse_meta_formula","text":"formula Formula object data Group data object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/parse_meta_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Meta-Analysis Formula — parse_meta_formula","text":"List design matrix X model info","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Meta-Analysis Results — print.fmri_meta","title":"Print Meta-Analysis Results — print.fmri_meta","text":"Print Meta-Analysis Results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Meta-Analysis Results — print.fmri_meta","text":"","code":"# S3 method for class 'fmri_meta' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Meta-Analysis Results — print.fmri_meta","text":"x fmri_meta object ... Additional print arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Meta-Analysis Results — print.fmri_meta","text":"Invisibly returns input object x","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Meta-Analysis Results — print.fmri_meta","text":"","code":"toy_meta <- structure(   list(     coefficients = matrix(0.2, nrow = 1),     se = matrix(0.05, nrow = 1),     method = \"DL\",     robust = \"none\",     formula = ~ condition,     n_subjects = 12,     n_rois = 1   ),   class = \"fmri_meta\" ) print(toy_meta) #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: DL  #> Robust: none  #> Formula: ~condition  #> Subjects: 12  #> ROIs analyzed: 1"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_ttest_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for fmri_ttest_fit — print.fmri_ttest_fit","title":"Print method for fmri_ttest_fit — print.fmri_ttest_fit","text":"Print method fmri_ttest_fit","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_ttest_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for fmri_ttest_fit — print.fmri_ttest_fit","text":"","code":"# S3 method for class 'fmri_ttest_fit' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_ttest_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for fmri_ttest_fit — print.fmri_ttest_fit","text":"x fmri_ttest_fit object ... Additional print arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.fmri_ttest_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for fmri_ttest_fit — print.fmri_ttest_fit","text":"Invisibly returns input object x","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.group_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Group Data Object — print.group_data","title":"Print Group Data Object — print.group_data","text":"Print Group Data Object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.group_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Group Data Object — print.group_data","text":"","code":"# S3 method for class 'group_data' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.group_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Group Data Object — print.group_data","text":"x group_data object ... Additional print arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.group_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Group Data Object — print.group_data","text":"Invisibly returns input object x","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Print an fmri_lm_result object — print.fmri_model","title":"Print an fmri_lm_result object — print.fmri_model","text":"Provides colorful informative printout.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print an fmri_lm_result object — print.fmri_model","text":"","code":"# S3 method for class 'fmri_model' print(x, ...)  # S3 method for class 'fmri_lm' print(x, ...)  # S3 method for class 'fmri_rlm' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print an fmri_lm_result object — print.fmri_model","text":"x fmri_rlm object ... Additional arguments passed print.fmri_lm","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print an fmri_lm_result object — print.fmri_model","text":"Invisibly returns input object x","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.spatial_fdr_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Spatial FDR Results — print.spatial_fdr_result","title":"Print Spatial FDR Results — print.spatial_fdr_result","text":"Print Spatial FDR Results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.spatial_fdr_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Spatial FDR Results — print.spatial_fdr_result","text":"","code":"# S3 method for class 'spatial_fdr_result' print(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.spatial_fdr_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Spatial FDR Results — print.spatial_fdr_result","text":"x spatial_fdr_result object ... Additional print arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/print.spatial_fdr_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Spatial FDR Results — print.spatial_fdr_result","text":"Invisibly returns input object x","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pull_stat_revised.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Statistical Measures from an fmri_lm Object — pull_stat_revised","title":"Extract Statistical Measures from an fmri_lm Object — pull_stat_revised","text":"function extracts statistical measures (e.g., estimates, standard errors) fmri_lm object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pull_stat_revised.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Statistical Measures from an fmri_lm Object — pull_stat_revised","text":"","code":"pull_stat_revised(x, type, element)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pull_stat_revised.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Statistical Measures from an fmri_lm Object — pull_stat_revised","text":"x fmri_lm object. type type statistic extract: \"betas\", \"contrasts\", \"F\". element specific element extract, \"estimate\", \"se\", \"stat\", \"prob\".","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pull_stat_revised.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Statistical Measures from an fmri_lm Object — pull_stat_revised","text":"tibble containing requested statistical measures.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute P-values from Meta-Analysis — pvalues","title":"Compute P-values from Meta-Analysis — pvalues","text":"Compute P-values Meta-Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute P-values from Meta-Analysis — pvalues","text":"","code":"pvalues(object, two_tailed = TRUE)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute P-values from Meta-Analysis — pvalues","text":"object fmri_meta object two_tailed Logical. Use two-tailed test (default: TRUE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute P-values from Meta-Analysis — pvalues","text":"Matrix p-values","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/pvalues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute P-values from Meta-Analysis — pvalues","text":"","code":"toy_meta <- structure(   list(     coefficients = matrix(c(0.2, -0.1), nrow = 1),     se = matrix(c(0.05, 0.08), nrow = 1)   ),   class = \"fmri_meta\" ) pvalues(toy_meta) #>              [,1]      [,2] #> [1,] 6.334248e-05 0.2112995"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/r_to_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Correlation to Fisher's Z — r_to_z","title":"Convert Correlation to Fisher's Z — r_to_z","text":"Transforms correlations Fisher's Z scale meta-analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/r_to_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Correlation to Fisher's Z — r_to_z","text":"","code":"r_to_z(r, n)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/r_to_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Correlation to Fisher's Z — r_to_z","text":"r Numeric vector matrix correlations n Integer scalar; sample size","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/r_to_z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Correlation to Fisher's Z — r_to_z","text":"List components: z Numeric vector matrix; Fisher's Z transformed correlations v Numeric vector matrix; sampling variances","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/r_to_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Correlation to Fisher's Z — r_to_z","text":"","code":"r_to_z(r = 0.4, n = 30) #> $z #> [1] 0.4236489 #>  #> $v #> [1] 0.03703704 #>"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Data Chunk from HDF5 Files — read_h5_chunk","title":"Read Data Chunk from HDF5 Files — read_h5_chunk","text":"Reads subset voxels subjects' HDF5 files","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Data Chunk from HDF5 Files — read_h5_chunk","text":"","code":"read_h5_chunk(gd, voxel_indices, stat = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Data Chunk from HDF5 Files — read_h5_chunk","text":"gd group_data_h5 object voxel_indices Integer vector voxel indices read stat Character vector statistics extract","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Data Chunk from HDF5 Files — read_h5_chunk","text":"List one element per subject, containing extracted data","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Read All Data from HDF5 Files — read_h5_full","title":"Read All Data from HDF5 Files — read_h5_full","text":"Reads complete data subjects' HDF5 files. Warning: can use lot memory whole-brain data.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read All Data from HDF5 Files — read_h5_full","text":"","code":"read_h5_full(gd, stat = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read All Data from HDF5 Files — read_h5_full","text":"gd group_data_h5 object stat Character vector statistics extract","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_full.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read All Data from HDF5 Files — read_h5_full","text":"Array dimensions (voxels, subjects, statistics)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Metadata from HDF5 File — read_h5_metadata","title":"Read Metadata from HDF5 File — read_h5_metadata","text":"Read Metadata HDF5 File","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Metadata from HDF5 File — read_h5_metadata","text":"","code":"read_h5_metadata(path)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Metadata from HDF5 File — read_h5_metadata","text":"path Path HDF5 file","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_h5_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Metadata from HDF5 File — read_h5_metadata","text":"List metadata including dimensions labels","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_chunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Data Chunk from NIfTI Files — read_nifti_chunk","title":"Read Data Chunk from NIfTI Files — read_nifti_chunk","text":"Reads subset voxels subjects' NIfTI files","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_chunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Data Chunk from NIfTI Files — read_nifti_chunk","text":"","code":"read_nifti_chunk(gd, voxel_indices)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_chunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Data Chunk from NIfTI Files — read_nifti_chunk","text":"gd group_data_nifti object voxel_indices Integer vector voxel indices read","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_chunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Data Chunk from NIfTI Files — read_nifti_chunk","text":"Matrix dimensions (subjects, voxels)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NIfTI Data — read_nifti_data","title":"Read NIfTI Data — read_nifti_data","text":"Read NIfTI Data","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NIfTI Data — read_nifti_data","text":"","code":"read_nifti_data(path, mask = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NIfTI Data — read_nifti_data","text":"path Path NIfTI file mask Optional mask apply","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NIfTI Data — read_nifti_data","text":"Array vector data","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_full.html","id":null,"dir":"Reference","previous_headings":"","what":"Read All Data from NIfTI Files — read_nifti_full","title":"Read All Data from NIfTI Files — read_nifti_full","text":"Reads complete data subjects' NIfTI files using memory mapping possible.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_full.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read All Data from NIfTI Files — read_nifti_full","text":"","code":"read_nifti_full(gd, use_mask = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_full.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read All Data from NIfTI Files — read_nifti_full","text":"gd group_data_nifti object use_mask Logical. Apply mask data (default: TRUE mask exists)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_full.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read All Data from NIfTI Files — read_nifti_full","text":"List data matrices","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NIfTI Header Information — read_nifti_header","title":"Read NIfTI Header Information — read_nifti_header","text":"Read NIfTI Header Information","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NIfTI Header Information — read_nifti_header","text":"","code":"read_nifti_header(path)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NIfTI Header Information — read_nifti_header","text":"path Path NIfTI file","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/read_nifti_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NIfTI Header Information — read_nifti_header","text":"List header information","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reconstruct_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct 3D Image from Vector — reconstruct_image","title":"Reconstruct 3D Image from Vector — reconstruct_image","text":"Reconstruct 3D Image Vector","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reconstruct_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct 3D Image from Vector — reconstruct_image","text":"","code":"reconstruct_image(values, object)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reconstruct_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct 3D Image from Vector — reconstruct_image","text":"values Numeric vector values object fmri_meta object spatial information","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reconstruct_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct 3D Image from Vector — reconstruct_image","text":"NeuroVol object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. fmridataset .matrix_dataset, data_chunks, fmri_dataset, fmri_mem_dataset, get_data, get_data_matrix, get_mask, latent_dataset, matrix_dataset, read_fmri_config fmridesign baseline, baseline_model, baseline_terms, basis_suffix, block, BSpline, cells, column_contrast, condition_basis_list, conditions, construct, contrast_weights, convolve, convolve_design, covariate, design_map, design_matrix, durations, elements, event_basis, event_factor, event_matrix, event_model, event_table, event_term, event_terms, event_variable, Fcontrasts, feature_suffix, hrf, Ident, interaction_contrast, is_categorical, is_continuous, nuisance, one_against_all_contrast, oneway_contrast, onsets, pair_contrast, plot_contrasts, Poly, poly_contrast, RobustScale, sanitize, Scale, ScaleWithin, split_by_block, Standardized, sub_basis, term_indices, term_matrices, trialwise, unit_contrast fmrihrf as_hrf, blockids, blocklens, evaluate, gen_hrf, global_onsets, HRF, hrf_spmg1, nbasis, regressor, samples, sampling_frame","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reshape_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Coefficient Data — reshape_coef","title":"Reshape Coefficient Data — reshape_coef","text":"function reshapes coefficient data wide long format merges design information.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reshape_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Coefficient Data — reshape_coef","text":"","code":"reshape_coef(df, des, measure = \"value\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reshape_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Coefficient Data — reshape_coef","text":"df data frame containing coefficient estimates. des data frame containing design information. measure name value column reshaped data. Default \"value\".","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/reshape_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape Coefficient Data — reshape_coef","text":"data frame long format merged design information.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/runwise_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Runwise Linear Modeling on fMRI Dataset — runwise_lm","title":"Perform Runwise Linear Modeling on fMRI Dataset — runwise_lm","text":"function performs runwise linear model analysis fMRI dataset, running linear model run separately pooling results. function performs runwise linear model analysis fMRI dataset running linear model data run combining results.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/runwise_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Runwise Linear Modeling on fMRI Dataset — runwise_lm","text":"","code":"runwise_lm(   dset,   model,   contrast_objects,   cfg,   verbose = FALSE,   use_fast_path = FALSE,   progress = FALSE,   phi_fixed = NULL,   sigma_fixed = NULL,   parallel_voxels = FALSE )  runwise_lm(   dset,   model,   contrast_objects,   cfg,   verbose = FALSE,   use_fast_path = FALSE,   progress = FALSE,   phi_fixed = NULL,   sigma_fixed = NULL,   parallel_voxels = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/runwise_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Runwise Linear Modeling on fMRI Dataset — runwise_lm","text":"dset fmri_dataset object. model fmri_model used analysis. contrast_objects list full contrast objects. cfg fmri_lm_config object containing fitting options. verbose Logical. Whether display progress messages (default FALSE). use_fast_path Logical. Whether use fast path computation (default FALSE). progress Logical. Display progress bar run processing. Default FALSE. phi_fixed Optional fixed AR parameters. sigma_fixed Optional fixed robust scale estimate. parallel_voxels Logical. TRUE, process voxels parallel using future.apply. Default FALSE.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/runwise_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Runwise Linear Modeling on fMRI Dataset — runwise_lm","text":"list containing combined results runwise linear model analysis. list containing combined results runwise linear model analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"Sandwich Variance Estimation in fmrireg — sandwich_variance","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"documentation describes sandwich variance estimation capabilities fmrireg, provide robust standard errors regression coefficients model assumptions violated.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"background","dir":"Reference","previous_headings":"","what":"Background","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"sandwich variance estimator (also known Huber-White estimator) provides valid standard errors even residuals exhibit heteroscedasticity violations classical linear model assumptions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"mathematical-details","dir":"Reference","previous_headings":"","what":"Mathematical Details","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"sandwich estimator computed : $$V_{sandwich} = (X'X)^{-1} X' \\Omega X (X'X)^{-1}$$ \\(\\Omega\\) diagonal matrix squared residuals diagonal. robust regression weights \\(w_i\\), weighted version : $$V_{sandwich} = (X'WX)^{-1} X'W \\Omega WX (X'WX)^{-1}$$","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"usage-in-fmrireg","dir":"Reference","previous_headings":"","what":"Usage in fmrireg","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"Sandwich variance estimation automatically used : Robust regression enabled (using M-estimators) AR modeling combined robust regression Heteroscedasticity suspected residuals","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"effective-degrees-of-freedom","dir":"Reference","previous_headings":"","what":"Effective Degrees of Freedom","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"using robust regression /AR models, effective degrees freedom adjusted account : Downweighting outliers robust regression Loss degrees freedom due AR parameter estimation adjustment formula : $$df_{effective} = df_{base} \\times \\frac{\\sum w_i}{n} \\times \\frac{n - p_{AR}}{n}$$","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation Notes","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"Small sample corrections applied (n/(n-p) factor) multi-voxel data, computation vectorized efficiency Compatible contrast types (t, F, custom)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"Huber, P. J. (1967). behavior maximum likelihood estimates nonstandard conditions. Proceedings Fifth Berkeley Symposium Mathematical Statistics Probability. White, H. (1980). heteroskedasticity-consistent covariance matrix estimator direct test heteroskedasticity. Econometrica, 48(4), 817-838.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/sandwich_variance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sandwich Variance Estimation in fmrireg — sandwich_variance","text":"","code":"if (FALSE) { # \\dontrun{ # Fit model with robust regression cfg <- fmri_lm_control(   robust = list(     type = \"bisquare\",     c_tukey = 4.685   ) )  fit <- fmri_lm(model, dataset, config = cfg)  # Standard errors in fit$betas will use sandwich variance # P-values will use effective degrees of freedom } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/se.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Standard Errors from Meta-Analysis — se","title":"Extract Standard Errors from Meta-Analysis — se","text":"Extract Standard Errors Meta-Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Standard Errors from Meta-Analysis — se","text":"","code":"se(object)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Standard Errors from Meta-Analysis — se","text":"object fmri_meta object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Standard Errors from Meta-Analysis — se","text":"Matrix standard errors","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/se.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Standard Errors from Meta-Analysis — se","text":"","code":"toy_meta <- structure(   list(se = matrix(c(0.05, 0.06), nrow = 1)),   class = \"fmri_meta\" ) se(toy_meta) #>      [,1] [,2] #> [1,] 0.05 0.06"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/shortnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Short Names — shortnames","title":"Short Names — shortnames","text":"Generate short names model terms conditions.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/shortnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Short Names — shortnames","text":"","code":"shortnames(x, ...)  # S3 method for class 'event_term' shortnames(x, ...)  # S3 method for class 'event_model' shortnames(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/shortnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Short Names — shortnames","text":"x object generate short names . ... Additional arguments.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/shortnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Short Names — shortnames","text":"character vector short names.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_bold_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate fMRI Time Series — simulate_bold_signal","title":"Simulate fMRI Time Series — simulate_bold_signal","text":"function simulates fMRI time series multiple experimental conditions specified parameters. generates realistic event-related design randomized inter-stimulus intervals condition orders.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_bold_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate fMRI Time Series — simulate_bold_signal","text":"","code":"simulate_bold_signal(   ncond,   hrf = fmrihrf::HRF_SPMG1,   nreps = 12,   amps = rep(1, ncond),   isi = c(3, 6),   ampsd = 0,   TR = 1.5 )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_bold_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate fMRI Time Series — simulate_bold_signal","text":"ncond number conditions simulate. hrf hemodynamic response function use (default fmrihrf::HRF_SPMG1). nreps number repetitions per condition (default 12). amps vector amplitudes condition (default vector 1s length ncond). isi vector length 2 specifying range inter-stimulus intervals sample (default c(3, 6) seconds). ampsd standard deviation amplitudes (default 0). TR repetition time fMRI acquisition (default 1.5 seconds).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_bold_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate fMRI Time Series — simulate_bold_signal","text":"list following components: onset: vector onset times trial condition: vector condition labels trial mat: matrix containing simulated fMRI time series: Column 1: Time points (seconds) Columns 2:(ncond+1): Simulated BOLD responses condition","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_bold_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate fMRI Time Series — simulate_bold_signal","text":"","code":"# Simulate 3 conditions with different amplitudes sim <- simulate_bold_signal(ncond = 3, amps = c(1, 1.5, 2), TR = 2)  # Plot the simulated time series matplot(sim$mat[,1], sim$mat[,-1], type = \"l\",          xlab = \"Time (s)\", ylab = \"BOLD Response\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_fmri_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate fMRI Time Courses, Return Shared Onsets + Column-Specific Amplitudes/Durations — simulate_fmri_matrix","title":"Simulate fMRI Time Courses, Return Shared Onsets + Column-Specific Amplitudes/Durations — simulate_fmri_matrix","text":"Generates \\(n\\) time-series (columns) single set onsets, resampled amplitudes/durations column amplitude_sd>0 duration_sd>0. column also gets independent noise. result list containing: time_series: matrix_dataset \\(T \\times n\\). event_table uses first column's amplitude/duration draws. ampmat: \\(n\\_events \\times n\\) matrix per-column amplitudes. durmat: \\(n\\_events \\times n\\) matrix per-column durations. hrf_info: info HRF. noise_params: info noise generation (type + AR coefficients + SD).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_fmri_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate fMRI Time Courses, Return Shared Onsets + Column-Specific Amplitudes/Durations — simulate_fmri_matrix","text":"","code":"simulate_fmri_matrix(   n = 1,   total_time = 240,   TR = 2,   hrf = fmrihrf::HRF_SPMG1,   n_events = 10,   onsets = NULL,   isi_dist = c(\"even\", \"uniform\", \"exponential\"),   isi_min = 2,   isi_max = 6,   isi_rate = 0.25,   durations = 0,   duration_sd = 0,   duration_dist = c(\"lognormal\", \"gamma\"),   amplitudes = 1,   amplitude_sd = 0,   amplitude_dist = c(\"lognormal\", \"gamma\", \"gaussian\"),   single_trial = FALSE,   noise_type = c(\"none\", \"white\", \"ar1\", \"ar2\"),   noise_ar = NULL,   noise_sd = 1,   random_seed = NULL,   verbose = FALSE,   buffer = 16 )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_fmri_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate fMRI Time Courses, Return Shared Onsets + Column-Specific Amplitudes/Durations — simulate_fmri_matrix","text":"n Number time-series (columns). total_time Numeric. Total scan length (seconds). TR Numeric. Repetition time (seconds). hrf Hemodynamic response function, e.g. fmrihrf::HRF_SPMG1. n_events Number events (ignored onsets provided). onsets Optional numeric vector event onsets. NULL, generated. isi_dist One \"even\", \"uniform\", \"exponential\". Default \"even\" events evenly spaced 0..total_time. isi_min, isi_max isi_dist=\"uniform\". isi_rate isi_dist=\"exponential\". durations Numeric, scalar length-n_events. duration_sd>0, random sampling done per column. duration_sd Numeric. >0, random variation durations. duration_dist \"lognormal\" \"gamma\" (strictly positive). amplitudes Numeric, scalar length-n_events. amplitude_sd>0, random sampling done per column. amplitude_sd Numeric. >0, random variation amplitudes. amplitude_dist \"lognormal\", \"gamma\", \"gaussian\" (can negative). single_trial TRUE, event separate single-trial regressor gets summed. noise_type \"none\", \"white\", \"ar1\", \"ar2\". noise_ar Numeric vector AR(1) AR(2). missing insufficient, defaults used (0.3 AR(1); c(0.3,0.2) AR(2)). noise_sd Std dev noise. random_seed Optional integer reproducibility. verbose TRUE, prints messages. buffer Numeric seconds appended end time grid avoid edge truncation (default: 16).","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_fmri_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate fMRI Time Courses, Return Shared Onsets + Column-Specific Amplitudes/Durations — simulate_fmri_matrix","text":"list containing: time_series matrix_dataset \\(T \\times n\\) data event_table first column's random draws. ampmat \\(n\\_events \\times n\\) numeric matrix amplitudes. durmat \\(n\\_events \\times n\\) numeric matrix durations. hrf_info list HRF metadata. noise_params list describing noise generation.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_fmri_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate fMRI Time Courses, Return Shared Onsets + Column-Specific Amplitudes/Durations — simulate_fmri_matrix","text":"noise_type=\"ar1\" provide noise_ar, default c(0.3). noise_type=\"ar2\" provide 2-element noise_ar, default c(0.3, 0.2). Onsets either provided generated columns. Amplitudes/durations re-sampled inside loop column can differ randomly. final arrays ampmat durmat one column per time-series. matrix_dataset's event_table records first column's amplitudes/durations. need column's, see ampmat durmat.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_noise_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate fMRI Noise — simulate_noise_vector","title":"Simulate fMRI Noise — simulate_noise_vector","text":"function simulates realistic fMRI noise combining: Temporal autocorrelation using ARMA model Low-frequency drift Physiological noise (cardiac respiratory)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_noise_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate fMRI Noise — simulate_noise_vector","text":"","code":"simulate_noise_vector(   n,   TR = 1.5,   ar = c(0.3),   ma = c(0.5),   sd = 1,   drift_freq = 1/128,   drift_amplitude = 2,   physio = TRUE,   seed = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_noise_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate fMRI Noise — simulate_noise_vector","text":"n number time points fMRI time series TR repetition time seconds (default 1.5) ar numeric vector containing autoregressive (AR) coefficients (default c(0.3)) ma numeric vector containing moving average (MA) coefficients (default c(0.5)) sd standard deviation white noise component (default 1) drift_freq Frequency low-frequency drift Hz (default 1/128) drift_amplitude Amplitude low-frequency drift (default 2) physio Logical; whether add simulated physiological noise (default TRUE) seed optional seed reproducibility (default NULL)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_noise_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate fMRI Noise — simulate_noise_vector","text":"numeric vector containing simulated fMRI noise","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_noise_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate fMRI Noise — simulate_noise_vector","text":"","code":"# Simulate noise for a 5-minute scan with TR=2s n_timepoints <- 150  # 5 minutes * 60 seconds / 2s TR noise <- simulate_noise_vector(n_timepoints, TR = 2) plot(noise, type = \"l\", xlab = \"Time Point\", ylab = \"Signal\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_simple_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Complete fMRI Dataset — simulate_simple_dataset","title":"Simulate Complete fMRI Dataset — simulate_simple_dataset","text":"function simulates complete fMRI dataset combining task-related signals realistic noise. returns clean signals noisy data.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_simple_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Complete fMRI Dataset — simulate_simple_dataset","text":"","code":"simulate_simple_dataset(   ncond,   nreps = 12,   TR = 1.5,   snr = 0.5,   hrf = fmrihrf::HRF_SPMG1,   seed = NULL )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_simple_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Complete fMRI Dataset — simulate_simple_dataset","text":"ncond Number conditions simulate nreps Number repetitions per condition (default 12) TR Repetition time seconds (default 1.5) snr Signal--noise ratio (default 0.5) hrf Hemodynamic response function use (default fmrihrf::HRF_SPMG1) seed Optional seed reproducibility (default NULL)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_simple_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Complete fMRI Dataset — simulate_simple_dataset","text":"list containing: clean: simulated signals without noise (simulate_bold_signal) noisy: signals added noise noise: simulated noise component onsets: Trial onset times conditions: Condition labels trial","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/simulate_simple_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Complete fMRI Dataset — simulate_simple_dataset","text":"","code":"# Simulate a dataset with 3 conditions data <- simulate_simple_dataset(ncond = 3, TR = 2, snr = 0.5)  # Plot clean and noisy data par(mfrow = c(2,1)) matplot(data$clean$mat[,1], data$clean$mat[,-1], type = \"l\",         main = \"Clean Signal\", xlab = \"Time (s)\", ylab = \"BOLD\") matplot(data$noisy[,1], data$noisy[,-1], type = \"l\",         main = \"Noisy Signal\", xlab = \"Time (s)\", ylab = \"BOLD\")"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"Performs spatially-aware FDR control using structure-adaptive weighted Benjamini-Hochberg (SABHA-style) procedure. method leverages spatial structure data increase power controlling false discovery rate.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"","code":"spatial_fdr(   z = NULL,   p = NULL,   group = NULL,   alpha = 0.05,   tau = 0.5,   lambda = 1,   neighbors = NULL,   min_pi0 = 0.05,   empirical_null = TRUE,   verbose = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"z Numeric vector Z-values (one per feature). Provide either z p, . p Numeric vector p-values (two-sided). Provide either z p, . group Integer factor vector group IDs feature (e.g., parcel IDs, block IDs). Must length z p. alpha Numeric scalar; FDR level control (default: 0.05) tau Numeric scalar; Storey threshold (0,1) \\(\\pi_0\\) estimation (default: 0.5). Higher values conservative. lambda Numeric scalar; smoothing strength groupwise \\(\\pi_0\\) across neighbors (default: 1.0). Set 0 smoothing, higher values smoothing. neighbors Optional list length G (number groups) element integer vector 1-based neighbor IDs. Used spatial smoothing \\(\\pi_0\\). min_pi0 Numeric scalar; lower bound \\(\\pi_0\\) stabilize weights (default: 0.05). Prevents infinite weights. empirical_null Logical; TRUE, estimate null distribution parameters (\\(\\mu_0\\), \\(\\sigma_0\\)) central z-values using robust estimators (default: TRUE). verbose Logical; print progress messages (default: FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"Object class \"spatial_fdr_result\" containing: reject Logical vector indicating rejected hypotheses (discoveries) q Numeric vector FDR-adjusted p-values (q-values) p Numeric vector two-sided p-values used testing weights Numeric vector normalized weights used weighted BH pi0_raw Numeric vector raw \\(\\pi_0\\) estimates per group pi0_smooth Numeric vector smoothed \\(\\pi_0\\) estimates per group threshold Numeric scalar; BH threshold used rejection k Integer scalar; number rejections mu0 Numeric scalar; estimated null mean (empirical_null = TRUE) sigma0 Numeric scalar; estimated null SD (empirical_null = TRUE) groups Integer vector compressed group IDs (1..G) group Factor integer vector original group IDs G Integer scalar; number groups alpha Numeric scalar; FDR level used coef_name Character scalar; name coefficient (S3 method)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"function implements spatially-aware multiple testing procedure : Estimates proportion null hypotheses (pi0) within spatial groups Optionally smooths estimates across neighboring groups Uses pi0 estimates weight Benjamini-Hochberg procedure Provides power regions true signal maintaining FDR control method particularly effective : Voxelwise analyses spatial clustering signal Parcel-based analyses anatomical functional grouping scenario hypotheses can grouped spatially functionally","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"Benjamini & Hochberg (1995). Controlling false discovery rate. Storey (2002). direct approach false discovery rates. Hu et al. (2010). False discovery rate control groups (SABHA).","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatially-Aware Multiple Comparisons Correction — spatial_fdr","text":"","code":"# Simple synthetic example set.seed(123) n <- 1000 z_scores <- c(rnorm(800), rnorm(200, mean = 2))  # 200 true signals group_ids <- rep(1:10, each = 100)  # 10 groups of 100 features each  # Basic usage without spatial smoothing result <- spatial_fdr(z = z_scores, group = group_ids, alpha = 0.05) summary(result) #> Spatial FDR Results #> =================== #> Features: 1000  #> Groups: 10  #> FDR level: 0.05  #> Discoveries: 180 ( 18 %) #> Threshold: 0.009  #> Empirical null: mu = 0.079 , sigma = 0.673  #>  #> Pi0 summary: #>   Range: 0.08 - 0.8  #>   Mean: 0.6  #>   Median: 0.69  #>  #> Group-level discoveries: #>   Groups with discoveries: 10 / 10  #>   Max proportion in group: 0.69  #>   Mean proportion in groups with signal: 0.18   # Create simple neighbor structure (each group neighbors with adjacent groups) neighbors <- lapply(1:10, function(i) {   c(if(i > 1) i-1, if(i < 10) i+1) })  # With spatial smoothing result_smooth <- spatial_fdr(z = z_scores, group = group_ids,                              neighbors = neighbors, lambda = 1.0) print(result_smooth) #> Spatial FDR Results #> =================== #> Features: 1000  #> Groups: 10  #> FDR level: 0.05  #> Discoveries: 185 ( 18.5 %) #> Threshold: 0.00925  #> Empirical null: mu = 0.079 , sigma = 0.673  #>  #> Pi0 summary: #>   Range: 0.12 - 0.76  #>   Mean: 0.597  #>   Median: 0.688"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr_fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal handler for spatial FDR on fmri_meta objects — spatial_fdr_fmri_meta","title":"Internal handler for spatial FDR on fmri_meta objects — spatial_fdr_fmri_meta","text":"Internal handler spatial FDR fmri_meta objects","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr_fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal handler for spatial FDR on fmri_meta objects — spatial_fdr_fmri_meta","text":"","code":"spatial_fdr_fmri_meta(   object,   coef = 1,   group = NULL,   alpha = 0.05,   tau = 0.5,   lambda = 1,   neighbors = NULL,   min_pi0 = 0.05,   empirical_null = TRUE,   verbose = FALSE )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/spatial_fdr_fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal handler for spatial FDR on fmri_meta objects — spatial_fdr_fmri_meta","text":"object fmri_meta object coef Character integer; coefficient name index test group Grouping variable spatial FDR. Can : NULL: Auto-create blocks (voxelwise) use ROIs (ROI-wise) Integer/factor vector: Custom grouping \"blocks\": Create 3D blocks (voxelwise ) \"parcels\": Use existing parcellation ... Additional arguments passed spatial_fdr","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/srht_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply SRHT to a T x k matrix using a plan — srht_apply","title":"Apply SRHT to a T x k matrix using a plan — srht_apply","text":"Apply SRHT T x k matrix using plan","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/srht_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply SRHT to a T x k matrix using a plan — srht_apply","text":"","code":"srht_apply(M, plan)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/standard_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Standard Errors from a Model Fit — standard_error","title":"Extract Standard Errors from a Model Fit — standard_error","text":"Extract standard errors parameter estimates fitted model object. part family functions extracting statistical measures.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/standard_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Standard Errors from a Model Fit — standard_error","text":"","code":"standard_error(x, ...)  # S3 method for class 'fmri_latent_lm' standard_error(x, type = c(\"estimates\", \"contrasts\"), recon = FALSE, ...)  # S3 method for class 'fmri_lm' standard_error(x, type = c(\"estimates\", \"contrasts\"), ...)  # S3 method for class 'fmri_lm' standard_error(x, type = c(\"estimates\", \"contrasts\"), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/standard_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Standard Errors from a Model Fit — standard_error","text":"x fitted model object ... Additional arguments passed methods type type standard errors extract: \"estimates\" \"contrasts\" (default: \"estimates\") recon Logical; whether reconstruct full matrix representation (default: FALSE)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/standard_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Standard Errors from a Model Fit — standard_error","text":"tibble matrix containing standard errors parameter estimates","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/standard_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Standard Errors from a Model Fit — standard_error","text":"","code":"# Create example data event_data <- data.frame(   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   onsets = c(1, 10, 20, 30),   run = c(1, 1, 1, 1) )  # Create sampling frame and dataset sframe <- sampling_frame(blocklens = 50, TR = 2) dset <- fmridataset::matrix_dataset(   matrix(rnorm(50 * 2), 50, 2),   TR = 2,   run_length = 50,   event_table = event_data )  # Fit model fit <- fmri_lm(   onsets ~ hrf(condition),   block = ~run,   dataset = dset )  # Extract standard errors se <- standard_error(fit)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Test Statistics from a Model Fit — stats","title":"Extract Test Statistics from a Model Fit — stats","text":"Extract test statistics (e.g., t-statistics, F-statistics) fitted model object. part family functions extracting statistical measures.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Test Statistics from a Model Fit — stats","text":"","code":"stats(x, ...)  # S3 method for class 'fmri_lm' stats(x, type = c(\"estimates\", \"contrasts\", \"F\"), ...)  # S3 method for class 'fmri_lm' stats(x, type = c(\"estimates\", \"contrasts\", \"F\"), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Test Statistics from a Model Fit — stats","text":"x fitted model object ... Additional arguments passed methods type type statistics extract: \"estimates\", \"contrasts\", \"F\" (default: \"estimates\")","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Test Statistics from a Model Fit — stats","text":"tibble matrix containing test statistics","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Test Statistics from a Model Fit — stats","text":"","code":"# Create example data event_data <- data.frame(   condition = factor(c(\"A\", \"B\", \"A\", \"B\")),   onsets = c(1, 10, 20, 30),   run = c(1, 1, 1, 1) )  # Create sampling frame and dataset sframe <- sampling_frame(blocklens = 50, TR = 2) dset <- fmridataset::matrix_dataset(   matrix(rnorm(50 * 2), 50, 2),   TR = 2,   run_length = 50,   event_table = event_data )  # Fit model fit <- fmri_lm(   onsets ~ hrf(condition),   block = ~run,   dataset = dset )  # Extract test statistics tstats <- stats(fit)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Meta-Analysis Results — summary.fmri_meta","title":"Summary of Meta-Analysis Results — summary.fmri_meta","text":"Summary Meta-Analysis Results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Meta-Analysis Results — summary.fmri_meta","text":"","code":"# S3 method for class 'fmri_meta' summary(object, threshold = 0.05, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Meta-Analysis Results — summary.fmri_meta","text":"object fmri_meta object threshold P-value threshold significance (default: 0.05) ... Additional summary arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Meta-Analysis Results — summary.fmri_meta","text":"list containing summary statistics invisibly","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_meta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of Meta-Analysis Results — summary.fmri_meta","text":"","code":"toy_meta <- structure(   list(     coefficients = matrix(c(0.3, -0.1), nrow = 1,       dimnames = list(NULL, c(\"A\", \"B\"))),     se = matrix(c(0.05, 0.07), nrow = 1),     method = \"DL\",     robust = \"none\",     formula = ~ condition,     n_subjects = 12,     n_rois = 1   ),   class = \"fmri_meta\" ) summary(toy_meta, threshold = 0.1) #> fMRI Meta-Analysis Summary #> ========================== #>  #> fMRI Meta-Analysis Results #> ========================== #>  #> Method: DL  #> Robust: none  #> Formula: ~condition  #> Subjects: 12  #> ROIs analyzed: 1  #>  #> Coefficients: #>   A: #>     Mean effect: 0.3  #>     Mean SE: 0.05  #>     Significant:1/1 (100%) #>   B: #>     Mean effect: -0.1  #>     Mean SE: 0.07  #>     Significant:0/1 (0%)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_ttest_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for fmri_ttest_fit — summary.fmri_ttest_fit","title":"Summary method for fmri_ttest_fit — summary.fmri_ttest_fit","text":"Summary method fmri_ttest_fit","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_ttest_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for fmri_ttest_fit — summary.fmri_ttest_fit","text":"","code":"# S3 method for class 'fmri_ttest_fit' summary(object, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_ttest_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for fmri_ttest_fit — summary.fmri_ttest_fit","text":"object fmri_ttest_fit object ... Additional summary arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.fmri_ttest_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for fmri_ttest_fit — summary.fmri_ttest_fit","text":"Invisibly returns input object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.group_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Group Data Object — summary.group_data","title":"Summary of Group Data Object — summary.group_data","text":"Summary Group Data Object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.group_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Group Data Object — summary.group_data","text":"","code":"# S3 method for class 'group_data' summary(object, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.group_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Group Data Object — summary.group_data","text":"object group_data object ... Additional summary arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.group_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Group Data Object — summary.group_data","text":"Invisibly returns input object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.spatial_fdr_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of Spatial FDR Results — summary.spatial_fdr_result","title":"Summary of Spatial FDR Results — summary.spatial_fdr_result","text":"Summary Spatial FDR Results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.spatial_fdr_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of Spatial FDR Results — summary.spatial_fdr_result","text":"","code":"# S3 method for class 'spatial_fdr_result' summary(object, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.spatial_fdr_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of Spatial FDR Results — summary.spatial_fdr_result","text":"object spatial_fdr_result object ... Additional summary arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/summary.spatial_fdr_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of Spatial FDR Results — summary.spatial_fdr_result","text":"Invisibly returns input object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_beta_se.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert t-statistics to Effect Sizes — t_to_beta_se","title":"Convert t-statistics to Effect Sizes — t_to_beta_se","text":"Helper function convert t-statistics df beta SE estimates","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_beta_se.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert t-statistics to Effect Sizes — t_to_beta_se","text":"","code":"t_to_beta_se(t, df, n = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_beta_se.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert t-statistics to Effect Sizes — t_to_beta_se","text":"t T-statistic values df Degrees freedom n Sample size (optional, improves SE estimation)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_beta_se.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert t-statistics to Effect Sizes — t_to_beta_se","text":"List beta se estimates","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert T-statistics to Effect Sizes and Variances — t_to_d","title":"Convert T-statistics to Effect Sizes and Variances — t_to_d","text":"Converts t-statistics degrees freedom standardized mean differences (Cohen's d) sampling variances meta-analysis.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert T-statistics to Effect Sizes and Variances — t_to_d","text":"","code":"t_to_d(t, df, n = NULL)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert T-statistics to Effect Sizes and Variances — t_to_d","text":"t Numeric vector matrix t-statistics df Numeric scalar vector; degrees freedom (matching t) n Numeric scalar; sample size per group (two-sample t-tests)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert T-statistics to Effect Sizes and Variances — t_to_d","text":"List components: d Numeric vector matrix; standardized mean differences v Numeric vector matrix; sampling variances","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/t_to_d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert T-statistics to Effect Sizes and Variances — t_to_d","text":"","code":"t_to_d(t = 2, df = 18) #> $d #> [1] 0.4588315 #>  #> $v #> [1] 0.05817175 #>  t_to_d(t = 2, df = 18, n = 20) #> $d #> [1] 0.942809 #>  #> $v #> [1] 0.2246914 #>"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/term_matrices.fmri_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract term matrices from fmri_model — term_matrices.fmri_model","title":"Extract term matrices from fmri_model — term_matrices.fmri_model","text":"Extract design matrices individual terms fmri_model object.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/term_matrices.fmri_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract term matrices from fmri_model — term_matrices.fmri_model","text":"","code":"# S3 method for class 'fmri_model' term_matrices(x, blocknum = NULL, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/term_matrices.fmri_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract term matrices from fmri_model — term_matrices.fmri_model","text":"x fmri_model object blocknum Optional vector block numbers extract matrices ... Additional arguments (currently unused)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/term_matrices.fmri_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract term matrices from fmri_model — term_matrices.fmri_model","text":"list matrices, one term model","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/term_matrices.fmri_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract term matrices from fmri_model — term_matrices.fmri_model","text":"","code":"fm <- fmrireg:::.demo_fmri_model() term_matrices(fm) #> $condition #>      condition_condition.A condition_condition.B #> [1,]            0.06243065            0.00000000 #> [2,]            1.13751689            0.00000000 #> [3,]            1.77810440            0.00000000 #> [4,]            2.21043230            0.00000000 #> [5,]            0.00000000            0.04828652 #> [6,]            0.00000000            1.07265083 #> [7,]            0.00000000            1.81464049 #> [8,]            0.00000000            2.37677852 #>  #> $drift #>      base_bs1_block_1 base_bs2_block_1 base_bs3_block_1 base_bs1_block_2 #> [1,]        0.0000000        0.0000000       0.00000000        0.0000000 #> [2,]        0.4444444        0.2222222       0.03703704        0.0000000 #> [3,]        0.2222222        0.4444444       0.29629630        0.0000000 #> [4,]        0.0000000        0.0000000       1.00000000        0.0000000 #> [5,]        0.0000000        0.0000000       0.00000000        0.0000000 #> [6,]        0.0000000        0.0000000       0.00000000        0.4444444 #> [7,]        0.0000000        0.0000000       0.00000000        0.2222222 #> [8,]        0.0000000        0.0000000       0.00000000        0.0000000 #>      base_bs2_block_2 base_bs3_block_2 #> [1,]        0.0000000       0.00000000 #> [2,]        0.0000000       0.00000000 #> [3,]        0.0000000       0.00000000 #> [4,]        0.0000000       0.00000000 #> [5,]        0.0000000       0.00000000 #> [6,]        0.2222222       0.03703704 #> [7,]        0.4444444       0.29629630 #> [8,]        0.0000000       1.00000000 #>  #> $block #>      constant_1 constant_2 #> [1,]          1          0 #> [2,]          1          0 #> [3,]          1          0 #> [4,]          1          0 #> [5,]          0          1 #> [6,]          0          1 #> [7,]          0          1 #> [8,]          0          1 #>  #> attr(,\"event_term_indices\") #> [1] 1 2 #> attr(,\"baseline_term_indices\") #> [1]  3  4  5  6  7  8  9 10 #> attr(,\"blocknum\") #> [1] 1 2 #> attr(,\"varnames\") #>  [1] \"condition_condition.A\" \"condition_condition.B\" \"base_bs1_block_1\"      #>  [4] \"base_bs2_block_1\"      \"base_bs3_block_1\"      \"base_bs1_block_2\"      #>  [7] \"base_bs2_block_2\"      \"base_bs3_block_2\"      \"constant_1\"            #> [10] \"constant_2\""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy Meta-Analysis Results — tidy.fmri_meta","title":"Tidy Meta-Analysis Results — tidy.fmri_meta","text":"Tidy Meta-Analysis Results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy Meta-Analysis Results — tidy.fmri_meta","text":"","code":"# S3 method for class 'fmri_meta' tidy(x, conf.int = FALSE, conf.level = 0.95, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy Meta-Analysis Results — tidy.fmri_meta","text":"x fmri_meta object conf.int Logical. Include confidence intervals (default: FALSE) conf.level Confidence level (default: 0.95) ... Additional arguments","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy Meta-Analysis Results — tidy.fmri_meta","text":"tibble tidy results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy generic — tidy","title":"Tidy generic — tidy","text":"Minimal tidy generic support fmri_meta tidy() without requiring broom.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy generic — tidy","text":"","code":"tidy(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy generic — tidy","text":"x object ... passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/tidy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tidy generic — tidy","text":"tidy data frame model coefficients statistics","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/welch_t_cpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Welch two-sample t-test across features — welch_t_cpp","title":"Welch two-sample t-test across features — welch_t_cpp","text":"Welch two-sample t-test across features","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/welch_t_cpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Welch two-sample t-test across features — welch_t_cpp","text":"","code":"welch_t_cpp(Y, g_in)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/welch_t_cpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Welch two-sample t-test across features — welch_t_cpp","text":"Y S x P matrix g_in Length S vector group indicators (1/2 0/1)","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/welch_t_cpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Welch two-sample t-test across features — welch_t_cpp","text":"List muA, muB, t, df (Welch), nA, nB","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/wide_to_long_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Wide Format to Long Format — wide_to_long_format","title":"Convert Wide Format to Long Format — wide_to_long_format","text":"Convert Wide Format Long Format","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/wide_to_long_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Wide Format to Long Format — wide_to_long_format","text":"","code":"wide_to_long_format(df, effect_cols, subject_col)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/wide_to_long_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Wide Format to Long Format — wide_to_long_format","text":"df Data frame wide format effect_cols Effect column specification subject_col Subject column name","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/wide_to_long_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Wide Format to Long Format — wide_to_long_format","text":"Data frame long format","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Results from fMRI Linear Model — write_results.fmri_lm","title":"Write Results from fMRI Linear Model — write_results.fmri_lm","text":"Exports statistical maps fmri_lm object HDF5 files BIDS-compliant naming JSON metadata sidecars using fmristore LabeledVolumeSet infrastructure.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Results from fMRI Linear Model — write_results.fmri_lm","text":"","code":"# S3 method for class 'fmri_lm' write_results(   x,   path = NULL,   subject = NULL,   task = NULL,   space = NULL,   desc = \"GLM\",   strategy = c(\"by_stat\", \"by_contrast\"),   save_betas = TRUE,   contrasts = NULL,   contrast_stats = c(\"beta\", \"tstat\", \"pval\", \"se\"),   overwrite = FALSE,   validate_inputs = TRUE,   ... )"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Results from fMRI Linear Model — write_results.fmri_lm","text":"x fmri_lm object containing fitted model results path Output directory path. NULL, uses current working directory subject Subject identifier (e.g., \"01\", \"1001\"). Required. task Task identifier (e.g., \"nback\", \"rest\"). Required BIDS compliance. space Spatial reference (e.g., \"MNI152NLin2009cAsym\"). Optional recommended. desc Description analysis (default: \"GLM\") strategy Storage strategy: \"by_stat\" (group contrasts statistic) \"by_contrast\" (separate files) save_betas Logical. Save raw regressor betas (default: TRUE) contrasts Character vector contrast names save. NULL saves contrasts contrast_stats Character vector contrast statistics save (default: c(\"beta\", \"tstat\", \"pval\", \"se\")) overwrite Logical. Overwrite existing files (default: FALSE) validate_inputs Logical. Validate fmrilm object structure (default: TRUE) ... Additional arguments passed internal functions","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Results from fMRI Linear Model — write_results.fmri_lm","text":"Invisible list file paths created","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Results from fMRI Linear Model — write_results.fmri_lm","text":"","code":"if (FALSE) { # \\dontrun{ # Save all results using default settings write_results(fitted_model, subject = \"01\", task = \"nback\")  # Save only specific contrasts and statistics   write_results(fitted_model,                subject = \"01\", task = \"nback\", space = \"MNI152NLin2009cAsym\",               contrasts = c(\"FacesVsPlaces\", \"GoVsNoGo\"),               contrast_stats = c(\"beta\", \"tstat\")) } # }"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Meta-Analysis Results — write_results.fmri_meta","title":"Write Meta-Analysis Results — write_results.fmri_meta","text":"Write Meta-Analysis Results","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Meta-Analysis Results — write_results.fmri_meta","text":"","code":"# S3 method for class 'fmri_meta' write_results(x, path = \".\", prefix = \"meta\", format = c(\"nifti\", \"h5\"), ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Meta-Analysis Results — write_results.fmri_meta","text":"x fmri_meta object path Output directory prefix File name prefix format Output format (\"nifti\" \"h5\") ... Additional arguments passed write_results.fmri_lm","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.fmri_meta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Meta-Analysis Results — write_results.fmri_meta","text":"Invisible list created files","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Results from fMRI Analysis — write_results","title":"Write Results from fMRI Analysis — write_results","text":"Generic function export statistical maps analysis results fitted fMRI models standardized file formats appropriate metadata.","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Results from fMRI Analysis — write_results","text":"","code":"write_results(x, ...)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Results from fMRI Analysis — write_results","text":"x fitted fMRI model object ... Additional arguments passed methods","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/write_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Results from fMRI Analysis — write_results","text":"Invisible list created file paths","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/z_to_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Back-transform Fisher's Z to Correlation — z_to_r","title":"Back-transform Fisher's Z to Correlation — z_to_r","text":"Back-transform Fisher's Z Correlation","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/z_to_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Back-transform Fisher's Z to Correlation — z_to_r","text":"","code":"z_to_r(z)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/z_to_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Back-transform Fisher's Z to Correlation — z_to_r","text":"z Numeric vector matrix; Fisher's Z values","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/z_to_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Back-transform Fisher's Z to Correlation — z_to_r","text":"Numeric vector matrix; correlations","code":""},{"path":[]},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/z_to_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Back-transform Fisher's Z to Correlation — z_to_r","text":"","code":"z_to_r(0.2) #> [1] 0.1973753"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/zscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Z-scores from Meta-Analysis — zscores","title":"Compute Z-scores from Meta-Analysis — zscores","text":"Compute Z-scores Meta-Analysis","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/zscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Z-scores from Meta-Analysis — zscores","text":"","code":"zscores(object)"},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/zscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Z-scores from Meta-Analysis — zscores","text":"object fmri_meta object","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/zscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Z-scores from Meta-Analysis — zscores","text":"Matrix z-scores","code":""},{"path":"https://bbuchsbaum.github.io/fmrireg/reference/zscores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Z-scores from Meta-Analysis — zscores","text":"","code":"toy_meta <- structure(   list(     coefficients = matrix(c(0.2, -0.1), nrow = 1),     se = matrix(c(0.05, 0.08), nrow = 1)   ),   class = \"fmri_meta\" ) zscores(toy_meta) #>      [,1]  [,2] #> [1,]    4 -1.25"},{"path":"https://bbuchsbaum.github.io/fmrireg/news/index.html","id":"fmrireg-001","dir":"Changelog","previous_headings":"","what":"fmrireg 0.0.1","title":"fmrireg 0.0.1","text":"Initial CRAN release.","code":""}]
